
ir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008598  08008598  00018598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ac  080089ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b4  080089b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b4  080089b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080089bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001e0  08008b98  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08008b98  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001208b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  00032297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00034d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00035c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f33  00000000  00000000  00036a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120f2  00000000  00000000  0005a933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8d69  00000000  00000000  0006ca25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014578e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  001457e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800857c 	.word	0x0800857c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800857c 	.word	0x0800857c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000eb4:	4a52      	ldr	r2, [pc, #328]	; (8001000 <MX_ADC1_Init+0x160>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb8:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000eba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ebe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eda:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee0:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ee2:	4a48      	ldr	r2, [pc, #288]	; (8001004 <MX_ADC1_Init+0x164>)
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee6:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef2:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efa:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f00:	483e      	ldr	r0, [pc, #248]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000f02:	f001 f873 	bl	8001fec <HAL_ADC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f000 fcf2 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4836      	ldr	r0, [pc, #216]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000f22:	f001 fb1f 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f2c:	f000 fce2 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482f      	ldr	r0, [pc, #188]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000f3e:	f001 fb11 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f48:	f000 fcd4 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f50:	2303      	movs	r3, #3
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4828      	ldr	r0, [pc, #160]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000f5a:	f001 fb03 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f64:	f000 fcc6 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4821      	ldr	r0, [pc, #132]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000f76:	f001 faf5 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f80:	f000 fcb8 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f88:	2305      	movs	r3, #5
 8000f8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481a      	ldr	r0, [pc, #104]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000f92:	f001 fae7 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f9c:	f000 fcaa 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000fae:	f001 fad9 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000fb8:	f000 fc9c 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fbc:	230e      	movs	r3, #14
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000fca:	f001 facb 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000fd4:	f000 fc8e 	bl	80018f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC1_Init+0x15c>)
 8000fe6:	f001 fabd 	bl	8002564 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ff0:	f000 fc80 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000210 	.word	0x20000210
 8001000:	40012000 	.word	0x40012000
 8001004:	0f000001 	.word	0x0f000001

08001008 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a40      	ldr	r2, [pc, #256]	; (8001128 <HAL_ADC_MspInit+0x120>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d179      	bne.n	800111e <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <HAL_ADC_MspInit+0x124>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a3e      	ldr	r2, [pc, #248]	; (800112c <HAL_ADC_MspInit+0x124>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <HAL_ADC_MspInit+0x124>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_ADC_MspInit+0x124>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a37      	ldr	r2, [pc, #220]	; (800112c <HAL_ADC_MspInit+0x124>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_ADC_MspInit+0x124>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_ADC_MspInit+0x124>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_ADC_MspInit+0x124>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_ADC_MspInit+0x124>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800107e:	233f      	movs	r3, #63	; 0x3f
 8001080:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4827      	ldr	r0, [pc, #156]	; (8001130 <HAL_ADC_MspInit+0x128>)
 8001092:	f002 fa25 	bl	80034e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001096:	2330      	movs	r3, #48	; 0x30
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4822      	ldr	r0, [pc, #136]	; (8001134 <HAL_ADC_MspInit+0x12c>)
 80010aa:	f002 fa19 	bl	80034e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <HAL_ADC_MspInit+0x134>)
 80010b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <HAL_ADC_MspInit+0x130>)
 80010f4:	f001 fdf2 	bl	8002cdc <HAL_DMA_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010fe:	f000 fbf9 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <HAL_ADC_MspInit+0x130>)
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_ADC_MspInit+0x130>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2012      	movs	r0, #18
 8001114:	f001 fdab 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001118:	2012      	movs	r0, #18
 800111a:	f001 fdc4 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020800 	.word	0x40020800
 8001138:	20000258 	.word	0x20000258
 800113c:	40026470 	.word	0x40026470

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_DMA_Init+0x3c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <MX_DMA_Init+0x3c>)
 8001150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_DMA_Init+0x3c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	203c      	movs	r0, #60	; 0x3c
 8001168:	f001 fd81 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800116c:	203c      	movs	r0, #60	; 0x3c
 800116e:	f001 fd9a 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <MX_GPIO_Init+0x14c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a44      	ldr	r2, [pc, #272]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b42      	ldr	r3, [pc, #264]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a36      	ldr	r2, [pc, #216]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <MX_GPIO_Init+0x14c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MX_GPIO_Init+0x14c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <MX_GPIO_Init+0x14c>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <MX_GPIO_Init+0x14c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	21c0      	movs	r1, #192	; 0xc0
 8001226:	482a      	ldr	r0, [pc, #168]	; (80012d0 <MX_GPIO_Init+0x150>)
 8001228:	f002 fb0e 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_GPIO_Init+0x154>)
 8001234:	f002 fb08 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800123e:	4826      	ldr	r0, [pc, #152]	; (80012d8 <MX_GPIO_Init+0x158>)
 8001240:	f002 fb02 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001244:	2310      	movs	r3, #16
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_GPIO_Init+0x15c>)
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	481f      	ldr	r0, [pc, #124]	; (80012d4 <MX_GPIO_Init+0x154>)
 8001258:	f002 f942 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4817      	ldr	r0, [pc, #92]	; (80012d0 <MX_GPIO_Init+0x150>)
 8001274:	f002 f934 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001278:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <MX_GPIO_Init+0x154>)
 8001292:	f002 f925 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001296:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <MX_GPIO_Init+0x158>)
 80012b0:	f002 f916 	bl	80034e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	200a      	movs	r0, #10
 80012ba:	f001 fcd8 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012be:	200a      	movs	r0, #10
 80012c0:	f001 fcf1 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	10110000 	.word	0x10110000

080012e0 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	230a      	movs	r3, #10
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <_write+0x24>)
 80012f6:	f003 fe6a 	bl	8004fce <HAL_UART_Transmit>
	return len;
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200003b4 	.word	0x200003b4

08001308 <CleanUp>:

uint16_t ADC1Current[ADC1_SIZE-1];
uint16_t ADC1Norm[ADC1_SIZE-1];

double avg, sum;
int CleanUp(double val, int tries){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001312:	6078      	str	r0, [r7, #4]
	while(tries){
 8001314:	e04b      	b.n	80013ae <CleanUp+0xa6>
		sum = sum - reading[INDEX];
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <CleanUp+0xc4>)
 8001318:	e9d3 4500 	ldrd	r4, r5, [r3]
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <CleanUp+0xc8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <CleanUp+0xcc>)
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8fc 	bl	8000524 <__aeabi_i2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4620      	mov	r0, r4
 8001332:	4629      	mov	r1, r5
 8001334:	f7fe ffa8 	bl	8000288 <__aeabi_dsub>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4923      	ldr	r1, [pc, #140]	; (80013cc <CleanUp+0xc4>)
 800133e:	e9c1 2300 	strd	r2, r3, [r1]
		reading[INDEX] = val;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <CleanUp+0xc8>)
 8001344:	681c      	ldr	r4, [r3, #0]
 8001346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134a:	f7ff fc05 	bl	8000b58 <__aeabi_d2iz>
 800134e:	4603      	mov	r3, r0
 8001350:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <CleanUp+0xcc>)
 8001352:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		sum = sum + val;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <CleanUp+0xc4>)
 8001358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001360:	f7fe ff94 	bl	800028c <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4918      	ldr	r1, [pc, #96]	; (80013cc <CleanUp+0xc4>)
 800136a:	e9c1 2300 	strd	r2, r3, [r1]
		INDEX = (INDEX+1) % CLEAN_SIZE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <CleanUp+0xc8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1c59      	adds	r1, r3, #1
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <CleanUp+0xd0>)
 8001376:	fb83 2301 	smull	r2, r3, r3, r1
 800137a:	109a      	asrs	r2, r3, #2
 800137c:	17cb      	asrs	r3, r1, #31
 800137e:	1ad2      	subs	r2, r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	1aca      	subs	r2, r1, r3
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <CleanUp+0xc8>)
 800138c:	601a      	str	r2, [r3, #0]

		avg = sum / CLEAN_SIZE;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <CleanUp+0xc4>)
 8001390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <CleanUp+0xd4>)
 800139a:	f7ff fa57 	bl	800084c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	490f      	ldr	r1, [pc, #60]	; (80013e0 <CleanUp+0xd8>)
 80013a4:	e9c1 2300 	strd	r2, r3, [r1]
		tries--;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
	while(tries){
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1b0      	bne.n	8001316 <CleanUp+0xe>
	}
	return avg;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <CleanUp+0xd8>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbcb 	bl	8000b58 <__aeabi_d2iz>
 80013c2:	4603      	mov	r3, r0

}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	200002d0 	.word	0x200002d0
 80013d0:	200001fc 	.word	0x200001fc
 80013d4:	20000308 	.word	0x20000308
 80013d8:	66666667 	.word	0x66666667
 80013dc:	40240000 	.word	0x40240000
 80013e0:	20000340 	.word	0x20000340

080013e4 <HAL_GPIO_EXTI_Callback>:
uint32_t elapsed, pressed=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
	elapsed = HAL_GetTick();
 80013ee:	f000 fdcd 	bl	8001f8c <HAL_GetTick>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a02      	ldr	r2, [pc, #8]	; (8001400 <HAL_GPIO_EXTI_Callback+0x1c>)
 80013f6:	6013      	str	r3, [r2, #0]
	//pressed = false;
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000368 	.word	0x20000368

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001408:	b092      	sub	sp, #72	; 0x48
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f000 fd58 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 fa06 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f7ff feb4 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 8001418:	f7ff fe92 	bl	8001140 <MX_DMA_Init>
  MX_ADC1_Init();
 800141c:	f7ff fd40 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001420:	f000 fba2 	bl	8001b68 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001424:	f000 fca8 	bl	8001d78 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Init(&hadc1);
  HAL_TIM_PWM_Init(&htim1);
 8001428:	487f      	ldr	r0, [pc, #508]	; (8001628 <main+0x224>)
 800142a:	f002 ff02 	bl	8004232 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800142e:	2108      	movs	r1, #8
 8001430:	487d      	ldr	r0, [pc, #500]	; (8001628 <main+0x224>)
 8001432:	f002 ff57 	bl	80042e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001436:	210c      	movs	r1, #12
 8001438:	487b      	ldr	r0, [pc, #492]	; (8001628 <main+0x224>)
 800143a:	f002 ff53 	bl	80042e4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001444:	4879      	ldr	r0, [pc, #484]	; (800162c <main+0x228>)
 8001446:	f002 f9ff 	bl	8003848 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001450:	4876      	ldr	r0, [pc, #472]	; (800162c <main+0x228>)
 8001452:	f002 f9f9 	bl	8003848 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145c:	4873      	ldr	r0, [pc, #460]	; (800162c <main+0x228>)
 800145e:	f002 f9f3 	bl	8003848 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001468:	4870      	ldr	r0, [pc, #448]	; (800162c <main+0x228>)
 800146a:	f002 f9ed 	bl	8003848 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, &ADC1Result[0], 8);
 800146e:	2208      	movs	r2, #8
 8001470:	496f      	ldr	r1, [pc, #444]	; (8001630 <main+0x22c>)
 8001472:	4870      	ldr	r0, [pc, #448]	; (8001634 <main+0x230>)
 8001474:	f000 ff3e 	bl	80022f4 <HAL_ADC_Start_DMA>
  for(int i=0;i<8;i++){ADC1Min[i] = 4095;}
 8001478:	2300      	movs	r3, #0
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
 800147c:	e008      	b.n	8001490 <main+0x8c>
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <main+0x234>)
 8001480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001482:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800148a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148c:	3301      	adds	r3, #1
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
 8001490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001492:	2b07      	cmp	r3, #7
 8001494:	ddf3      	ble.n	800147e <main+0x7a>

  int32_t weight;
  int32_t wsum;
  int32_t maxSum = 780;
 8001496:	f44f 7343 	mov.w	r3, #780	; 0x30c
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	for(int i=0;i<8;i++){
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a0:	e052      	b.n	8001548 <main+0x144>
		if(ADC1Result[i] >= ADC1Max[i]) ADC1Max[i] = ADC1Result[i];
 80014a2:	4a63      	ldr	r2, [pc, #396]	; (8001630 <main+0x22c>)
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014aa:	4964      	ldr	r1, [pc, #400]	; (800163c <main+0x238>)
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d307      	bcc.n	80014c6 <main+0xc2>
 80014b6:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <main+0x22c>)
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80014be:	4a5f      	ldr	r2, [pc, #380]	; (800163c <main+0x238>)
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(ADC1Result[i] <= ADC1Min[i] && ADC1Result[i] > 100) ADC1Min[i] = ADC1Result[i];
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <main+0x22c>)
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014ce:	495a      	ldr	r1, [pc, #360]	; (8001638 <main+0x234>)
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d80d      	bhi.n	80014f6 <main+0xf2>
 80014da:	4a55      	ldr	r2, [pc, #340]	; (8001630 <main+0x22c>)
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d907      	bls.n	80014f6 <main+0xf2>
 80014e6:	4a52      	ldr	r2, [pc, #328]	; (8001630 <main+0x22c>)
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80014ee:	4a52      	ldr	r2, [pc, #328]	; (8001638 <main+0x234>)
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		ADC1Current[i] = ((ADC1Result[i]-ADC1Min[i]) * 100)/(ADC1Max[i] - ADC1Min[i]);
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <main+0x22c>)
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014fe:	4619      	mov	r1, r3
 8001500:	4a4d      	ldr	r2, [pc, #308]	; (8001638 <main+0x234>)
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001508:	1acb      	subs	r3, r1, r3
 800150a:	2264      	movs	r2, #100	; 0x64
 800150c:	fb02 f203 	mul.w	r2, r2, r3
 8001510:	494a      	ldr	r1, [pc, #296]	; (800163c <main+0x238>)
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001518:	4618      	mov	r0, r3
 800151a:	4947      	ldr	r1, [pc, #284]	; (8001638 <main+0x234>)
 800151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001522:	1ac3      	subs	r3, r0, r3
 8001524:	fb92 f3f3 	sdiv	r3, r2, r3
 8001528:	b299      	uxth	r1, r3
 800152a:	4a45      	ldr	r2, [pc, #276]	; (8001640 <main+0x23c>)
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC1Norm[i] = ADC1Current[i];
 8001532:	4a43      	ldr	r2, [pc, #268]	; (8001640 <main+0x23c>)
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <main+0x240>)
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<8;i++){
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	3301      	adds	r3, #1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	2b07      	cmp	r3, #7
 800154c:	dda9      	ble.n	80014a2 <main+0x9e>
	}

	cTime = HAL_GetTick();
 800154e:	f000 fd1d 	bl	8001f8c <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	; 0x24
	double delay_Time = (double)(cTime - pTime);
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffd2 	bl	8000504 <__aeabi_ui2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2306 	strd	r2, r3, [r7, #24]

	weight = (ADC1Norm[0]-ADC1Norm[7])*WEIGHT4 + (ADC1Norm[1]-ADC1Norm[6])*WEIGHT3 + (ADC1Norm[2]-ADC1Norm[5])*WEIGHT2 + (ADC1Norm[3]-ADC1Norm[4])*WEIGHT1;
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <main+0x240>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <main+0x240>)
 8001570:	89db      	ldrh	r3, [r3, #14]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001578:	fb02 f203 	mul.w	r2, r2, r3
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <main+0x240>)
 800157e:	885b      	ldrh	r3, [r3, #2]
 8001580:	4619      	mov	r1, r3
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <main+0x240>)
 8001584:	899b      	ldrh	r3, [r3, #12]
 8001586:	1acb      	subs	r3, r1, r3
 8001588:	21fa      	movs	r1, #250	; 0xfa
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	441a      	add	r2, r3
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <main+0x240>)
 8001592:	889b      	ldrh	r3, [r3, #4]
 8001594:	4619      	mov	r1, r3
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <main+0x240>)
 8001598:	895b      	ldrh	r3, [r3, #10]
 800159a:	1acb      	subs	r3, r1, r3
 800159c:	2196      	movs	r1, #150	; 0x96
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	441a      	add	r2, r3
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <main+0x240>)
 80015a6:	88db      	ldrh	r3, [r3, #6]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <main+0x240>)
 80015ac:	891b      	ldrh	r3, [r3, #8]
 80015ae:	1acb      	subs	r3, r1, r3
 80015b0:	2132      	movs	r1, #50	; 0x32
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
	wsum = (ADC1Norm[0]+ADC1Norm[1]+ADC1Norm[2]+ADC1Norm[3]+ADC1Norm[4]+ADC1Norm[5]+ADC1Norm[6]+ADC1Norm[7]);
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <main+0x240>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <main+0x240>)
 80015c2:	885b      	ldrh	r3, [r3, #2]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <main+0x240>)
 80015c8:	8892      	ldrh	r2, [r2, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <main+0x240>)
 80015ce:	88d2      	ldrh	r2, [r2, #6]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <main+0x240>)
 80015d4:	8912      	ldrh	r2, [r2, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <main+0x240>)
 80015da:	8952      	ldrh	r2, [r2, #10]
 80015dc:	4413      	add	r3, r2
 80015de:	4a19      	ldr	r2, [pc, #100]	; (8001644 <main+0x240>)
 80015e0:	8992      	ldrh	r2, [r2, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a17      	ldr	r2, [pc, #92]	; (8001644 <main+0x240>)
 80015e6:	89d2      	ldrh	r2, [r2, #14]
 80015e8:	4413      	add	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

	if((ADC1Norm[3]+ADC1Norm[4]) <= 8) // Middle Point
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <main+0x240>)
 80015ee:	88db      	ldrh	r3, [r3, #6]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <main+0x240>)
 80015f4:	891b      	ldrh	r3, [r3, #8]
 80015f6:	4413      	add	r3, r2
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	dc05      	bgt.n	8001608 <main+0x204>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <main+0x244>)
 8001602:	f002 f921 	bl	8003848 <HAL_GPIO_WritePin>
 8001606:	e004      	b.n	8001612 <main+0x20e>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <main+0x244>)
 800160e:	f002 f91b 	bl	8003848 <HAL_GPIO_WritePin>
	//

	if(weight<0) Err = -(int)(- weight / wsum);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da19      	bge.n	800164c <main+0x248>
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	425a      	negs	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001622:	425b      	negs	r3, r3
 8001624:	643b      	str	r3, [r7, #64]	; 0x40
 8001626:	e016      	b.n	8001656 <main+0x252>
 8001628:	2000036c 	.word	0x2000036c
 800162c:	40021000 	.word	0x40021000
 8001630:	20000330 	.word	0x20000330
 8001634:	20000210 	.word	0x20000210
 8001638:	200002d8 	.word	0x200002d8
 800163c:	20000348 	.word	0x20000348
 8001640:	200002f8 	.word	0x200002f8
 8001644:	200002e8 	.word	0x200002e8
 8001648:	40020000 	.word	0x40020000
	else Err =  (int)(weight / wsum);
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fb92 f3f3 	sdiv	r3, r2, r3
 8001654:	643b      	str	r3, [r7, #64]	; 0x40
	ErrDif = (Err - pErr);
 8001656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	60fb      	str	r3, [r7, #12]

	dV1 = kP1 * Err + (kD / delay_Time) * ErrDif ;
 800165e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff5c 	bl	8000524 <__aeabi_i2d>
 800166c:	4604      	mov	r4, r0
 800166e:	460d      	mov	r5, r1
 8001670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	495f      	ldr	r1, [pc, #380]	; (80017f8 <main+0x3f4>)
 800167a:	f7ff f8e7 	bl	800084c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4690      	mov	r8, r2
 8001684:	4699      	mov	r9, r3
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7fe ff4c 	bl	8000524 <__aeabi_i2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4640      	mov	r0, r8
 8001692:	4649      	mov	r1, r9
 8001694:	f7fe ffb0 	bl	80005f8 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fdf4 	bl	800028c <__adddf3>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa54 	bl	8000b58 <__aeabi_d2iz>
 80016b0:	4603      	mov	r3, r0
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
	dV2 = kP2 * Err + (kD / delay_Time) * ErrDif ;
 80016b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016b6:	f7fe ff35 	bl	8000524 <__aeabi_i2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <main+0x3f8>)
 80016c0:	f7fe ff9a 	bl	80005f8 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d0:	f04f 0000 	mov.w	r0, #0
 80016d4:	4948      	ldr	r1, [pc, #288]	; (80017f8 <main+0x3f4>)
 80016d6:	f7ff f8b9 	bl	800084c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4690      	mov	r8, r2
 80016e0:	4699      	mov	r9, r3
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7fe ff1e 	bl	8000524 <__aeabi_i2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4640      	mov	r0, r8
 80016ee:	4649      	mov	r1, r9
 80016f0:	f7fe ff82 	bl	80005f8 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7fe fdc6 	bl	800028c <__adddf3>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa26 	bl	8000b58 <__aeabi_d2iz>
 800170c:	4603      	mov	r3, r0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34

    if(!HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4)==pressed){		// K0 usr btn, Active Low (Push 0)
 8001710:	2110      	movs	r1, #16
 8001712:	483b      	ldr	r0, [pc, #236]	; (8001800 <main+0x3fc>)
 8001714:	f002 f880 	bl	8003818 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <main+0x400>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d119      	bne.n	8001762 <main+0x35e>
    	if(cTime - elapsed > 1000) {
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <main+0x404>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173a:	d927      	bls.n	800178c <main+0x388>
    		pressed = !pressed; HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, pressed);
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <main+0x400>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <main+0x400>)
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <main+0x400>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	482c      	ldr	r0, [pc, #176]	; (800180c <main+0x408>)
 800175c:	f002 f874 	bl	8003848 <HAL_GPIO_WritePin>
 8001760:	e014      	b.n	800178c <main+0x388>
    	}
    }
	else if((ADC1Norm[2]+ADC1Norm[3]+ADC1Norm[4]+ADC1Norm[5]) <= 100 )
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <main+0x40c>)
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	461a      	mov	r2, r3
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <main+0x40c>)
 800176a:	88db      	ldrh	r3, [r3, #6]
 800176c:	4413      	add	r3, r2
 800176e:	4a28      	ldr	r2, [pc, #160]	; (8001810 <main+0x40c>)
 8001770:	8912      	ldrh	r2, [r2, #8]
 8001772:	4413      	add	r3, r2
 8001774:	4a26      	ldr	r2, [pc, #152]	; (8001810 <main+0x40c>)
 8001776:	8952      	ldrh	r2, [r2, #10]
 8001778:	4413      	add	r3, r2
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	dc06      	bgt.n	800178c <main+0x388>
	{
		dV1 = 0; dV2 = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
		printf("Cross Line!");
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <main+0x410>)
 8001788:	f004 fe78 	bl	800647c <iprintf>
	}

	vRight = pressed&(vINIT - CleanUp(dV2, CLEAN_SIZE));
 800178c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800178e:	f7fe fec9 	bl	8000524 <__aeabi_i2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	200a      	movs	r0, #10
 8001798:	ec43 2b10 	vmov	d0, r2, r3
 800179c:	f7ff fdb4 	bl	8001308 <CleanUp>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <main+0x400>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
	vLeft  = pressed&(vINIT + CleanUp(dV1, CLEAN_SIZE));
 80017b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017b2:	f7fe feb7 	bl	8000524 <__aeabi_i2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	200a      	movs	r0, #10
 80017bc:	ec43 2b10 	vmov	d0, r2, r3
 80017c0:	f7ff fda2 	bl	8001308 <CleanUp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <main+0x400>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4013      	ands	r3, r2
 80017d2:	607b      	str	r3, [r7, #4]

	TIM1->CCR3 = vLeft;  // A
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <main+0x414>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = vRight; // B
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <main+0x414>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	6413      	str	r3, [r2, #64]	; 0x40


	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  printf("\n  ");
 80017e0:	480e      	ldr	r0, [pc, #56]	; (800181c <main+0x418>)
 80017e2:	f004 fe4b 	bl	800647c <iprintf>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  pErr = Err;
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  pTime = cTime;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  HAL_Delay(10);
 80017ee:	200a      	movs	r0, #10
 80017f0:	f000 fbd8 	bl	8001fa4 <HAL_Delay>
  while (1){
 80017f4:	e652      	b.n	800149c <main+0x98>
 80017f6:	bf00      	nop
 80017f8:	40140000 	.word	0x40140000
 80017fc:	40220000 	.word	0x40220000
 8001800:	40021000 	.word	0x40021000
 8001804:	20000200 	.word	0x20000200
 8001808:	20000368 	.word	0x20000368
 800180c:	40020000 	.word	0x40020000
 8001810:	200002e8 	.word	0x200002e8
 8001814:	08008598 	.word	0x08008598
 8001818:	40010000 	.word	0x40010000
 800181c:	080085a4 	.word	0x080085a4

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	; 0x50
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	2230      	movs	r2, #48	; 0x30
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f004 f9b2 	bl	8005b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <SystemClock_Config+0xcc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <SystemClock_Config+0xcc>)
 800184e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <SystemClock_Config+0xcc>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <SystemClock_Config+0xd0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <SystemClock_Config+0xd0>)
 800186a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <SystemClock_Config+0xd0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800187c:	2301      	movs	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001886:	2302      	movs	r3, #2
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001890:	2304      	movs	r3, #4
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001894:	23a8      	movs	r3, #168	; 0xa8
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001898:	2302      	movs	r3, #2
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800189c:	2304      	movs	r3, #4
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 f801 	bl	80038ac <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b0:	f000 f820 	bl	80018f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b4:	230f      	movs	r3, #15
 80018b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2105      	movs	r1, #5
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fa62 	bl	8003d9c <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018de:	f000 f809 	bl	80018f4 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	; 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_MspInit+0x4c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x4c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 fae2 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019a8:	2010      	movs	r0, #16
 80019aa:	f001 ff67 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <ADC_IRQHandler+0x10>)
 80019ba:	f000 fb5a 	bl	8002072 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000210 	.word	0x20000210

080019c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART3_IRQHandler+0x10>)
 80019ce:	f003 fb91 	bl	80050f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200003b4 	.word	0x200003b4

080019dc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA2_Stream4_IRQHandler+0x10>)
 80019e2:	f001 fb13 	bl	800300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000258 	.word	0x20000258

080019f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	return 1;
 80019f4:	2301      	movs	r3, #1
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_kill>:

int _kill(int pid, int sig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a0a:	f004 f89b 	bl	8005b44 <__errno>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2216      	movs	r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
	return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_exit>:

void _exit (int status)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffe7 	bl	8001a00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a32:	e7fe      	b.n	8001a32 <_exit+0x12>

08001a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00a      	b.n	8001a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a46:	f3af 8000 	nop.w
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf0      	blt.n	8001a46 <_read+0x12>
	}

return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	605a      	str	r2, [r3, #4]
	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f004 f81c 	bl	8005b44 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20020000 	.word	0x20020000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000204 	.word	0x20000204
 8001b40:	20000410 	.word	0x20000410

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b096      	sub	sp, #88	; 0x58
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fff9 	bl	8005b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <MX_TIM1_Init+0x154>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bae:	22a7      	movs	r2, #167	; 0xa7
 8001bb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd2:	4839      	ldr	r0, [pc, #228]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bd4:	f002 fade 	bl	8004194 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bde:	f7ff fe89 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bec:	4619      	mov	r1, r3
 8001bee:	4832      	ldr	r0, [pc, #200]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001bf0:	f002 fcfe 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bfa:	f7ff fe7b 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bfe:	482e      	ldr	r0, [pc, #184]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001c00:	f002 fb17 	bl	8004232 <HAL_TIM_PWM_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c0a:	f7ff fe73 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4826      	ldr	r0, [pc, #152]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001c1e:	f003 f8bb 	bl	8004d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c28:	f7ff fe64 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2c:	2360      	movs	r3, #96	; 0x60
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001c52:	f002 fc0f 	bl	8004474 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c5c:	f7ff fe4a 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	220c      	movs	r2, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	4813      	ldr	r0, [pc, #76]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001c6a:	f002 fc03 	bl	8004474 <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c74:	f7ff fe3e 	bl	80018f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001c9c:	f003 f8f8 	bl	8004e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ca6:	f7ff fe25 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM1_Init+0x150>)
 8001cac:	f000 f82a 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3758      	adds	r7, #88	; 0x58
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000036c 	.word	0x2000036c
 8001cbc:	40010000 	.word	0x40010000

08001cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_TIM_Base_MspInit+0x3c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10d      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_TIM_Base_MspInit+0x40>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_TIM_Base_MspInit+0x40>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_TIM_Base_MspInit+0x40>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_TIM_MspPostInit+0x68>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d11e      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_TIM_MspPostInit+0x6c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_TIM_MspPostInit+0x6c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_MspPostInit+0x70>)
 8001d60:	f001 fbbe 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40021000 	.word	0x40021000

08001d78 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <MX_USART3_UART_Init+0x50>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_USART3_UART_Init+0x4c>)
 8001db0:	f003 f8c0 	bl	8004f34 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dba:	f7ff fd9b 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200003b4 	.word	0x200003b4
 8001dc8:	40004800 	.word	0x40004800

08001dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_UART_MspInit+0x94>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d134      	bne.n	8001e58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_UART_MspInit+0x98>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_UART_MspInit+0x98>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_UART_MspInit+0x98>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_UART_MspInit+0x98>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_UART_MspInit+0x98>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_UART_MspInit+0x98>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4809      	ldr	r0, [pc, #36]	; (8001e68 <HAL_UART_MspInit+0x9c>)
 8001e44:	f001 fb4c 	bl	80034e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2027      	movs	r0, #39	; 0x27
 8001e4e:	f000 ff0e 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e52:	2027      	movs	r0, #39	; 0x27
 8001e54:	f000 ff27 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40004800 	.word	0x40004800
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020400 	.word	0x40020400

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e96:	f7ff fe55 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f003 fe59 	bl	8005b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff fab1 	bl	8001404 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001eb0:	080089bc 	.word	0x080089bc
  ldr r2, =_sbss
 8001eb4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001eb8:	2000040c 	.word	0x2000040c

08001ebc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <CAN1_RX0_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 feb5 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fd04 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fecd 	bl	8002cc2 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 fe95 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008
 8001f88:	200003f8 	.word	0x200003f8

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200003f8 	.word	0x200003f8

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_Delay+0x44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e033      	b.n	800206a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fffc 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002032:	f023 0302 	bic.w	r3, r3, #2
 8002036:	f043 0202 	orr.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fbb2 	bl	80027a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
 800205a:	e001      	b.n	8002060 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d049      	beq.n	8002148 <HAL_ADC_IRQHandler+0xd6>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d046      	beq.n	8002148 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d12b      	bne.n	8002138 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d127      	bne.n	8002138 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002100:	2b00      	cmp	r3, #0
 8002102:	d119      	bne.n	8002138 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0220 	bic.w	r2, r2, #32
 8002112:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f9eb 	bl	8002514 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f06f 0212 	mvn.w	r2, #18
 8002146:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d057      	beq.n	800222a <HAL_ADC_IRQHandler+0x1b8>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d054      	beq.n	800222a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d139      	bne.n	800221a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12b      	bne.n	800221a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d124      	bne.n	800221a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11d      	bne.n	800221a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fc42 	bl	8002aa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 020c 	mvn.w	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d017      	beq.n	800228c <HAL_ADC_IRQHandler+0x21a>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d014      	beq.n	800228c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10d      	bne.n	800228c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f95d 	bl	800253c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0201 	mvn.w	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	bf0c      	ite	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	2300      	movne	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <HAL_ADC_IRQHandler+0x27a>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d012      	beq.n	80022ec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f06f 0220 	mvn.w	r2, #32
 80022da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f937 	bl	8002550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0220 	mvn.w	r2, #32
 80022ea:	601a      	str	r2, [r3, #0]
  }
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1e>
 800230e:	2302      	movs	r3, #2
 8002310:	e0e9      	b.n	80024e6 <HAL_ADC_Start_DMA+0x1f2>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d018      	beq.n	800235a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002338:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_ADC_Start_DMA+0x1fc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6d      	ldr	r2, [pc, #436]	; (80024f4 <HAL_ADC_Start_DMA+0x200>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9a      	lsrs	r2, r3, #18
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800234c:	e002      	b.n	8002354 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3b01      	subs	r3, #1
 8002352:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002368:	d107      	bne.n	800237a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002378:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 80a1 	bne.w	80024cc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d106      	bne.n	80023d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f023 0206 	bic.w	r2, r3, #6
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
 80023d6:	e002      	b.n	80023de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_ADC_Start_DMA+0x204>)
 80023e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	4a43      	ldr	r2, [pc, #268]	; (80024fc <HAL_ADC_Start_DMA+0x208>)
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	4a42      	ldr	r2, [pc, #264]	; (8002500 <HAL_ADC_Start_DMA+0x20c>)
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a41      	ldr	r2, [pc, #260]	; (8002504 <HAL_ADC_Start_DMA+0x210>)
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800240a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800241a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	334c      	adds	r3, #76	; 0x4c
 8002436:	4619      	mov	r1, r3
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f000 fcfc 	bl	8002e38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d12a      	bne.n	80024a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2d      	ldr	r2, [pc, #180]	; (8002508 <HAL_ADC_Start_DMA+0x214>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d015      	beq.n	8002482 <HAL_ADC_Start_DMA+0x18e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2c      	ldr	r2, [pc, #176]	; (800250c <HAL_ADC_Start_DMA+0x218>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d105      	bne.n	800246c <HAL_ADC_Start_DMA+0x178>
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_ADC_Start_DMA+0x204>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a27      	ldr	r2, [pc, #156]	; (8002510 <HAL_ADC_Start_DMA+0x21c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d136      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_ADC_Start_DMA+0x204>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d130      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d129      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e020      	b.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_ADC_Start_DMA+0x214>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d11b      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	e00b      	b.n	80024e4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0210 	orr.w	r2, r3, #16
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000000 	.word	0x20000000
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	40012300 	.word	0x40012300
 80024fc:	080029a1 	.word	0x080029a1
 8002500:	08002a5b 	.word	0x08002a5b
 8002504:	08002a77 	.word	0x08002a77
 8002508:	40012000 	.word	0x40012000
 800250c:	40012100 	.word	0x40012100
 8002510:	40012200 	.word	0x40012200

08002514 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e105      	b.n	800278c <HAL_ADC_ConfigChannel+0x228>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d925      	bls.n	80025dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68d9      	ldr	r1, [r3, #12]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	3b1e      	subs	r3, #30
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43da      	mvns	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	400a      	ands	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68d9      	ldr	r1, [r3, #12]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4403      	add	r3, r0
 80025ce:	3b1e      	subs	r3, #30
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	e022      	b.n	8002622 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	2207      	movs	r2, #7
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	400a      	ands	r2, r1
 80025fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	4603      	mov	r3, r0
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4403      	add	r3, r0
 8002618:	409a      	lsls	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b06      	cmp	r3, #6
 8002628:	d824      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3b05      	subs	r3, #5
 800263c:	221f      	movs	r2, #31
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	3b05      	subs	r3, #5
 8002666:	fa00 f203 	lsl.w	r2, r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
 8002672:	e04c      	b.n	800270e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d824      	bhi.n	80026c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b23      	subs	r3, #35	; 0x23
 800268e:	221f      	movs	r2, #31
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43da      	mvns	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	400a      	ands	r2, r1
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b23      	subs	r3, #35	; 0x23
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
 80026c4:	e023      	b.n	800270e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	3b41      	subs	r3, #65	; 0x41
 80026d8:	221f      	movs	r2, #31
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	400a      	ands	r2, r1
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b41      	subs	r3, #65	; 0x41
 8002702:	fa00 f203 	lsl.w	r2, r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_ADC_ConfigChannel+0x234>)
 8002710:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_ADC_ConfigChannel+0x238>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d109      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1cc>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b12      	cmp	r3, #18
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a19      	ldr	r2, [pc, #100]	; (800279c <HAL_ADC_ConfigChannel+0x238>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d123      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d003      	beq.n	800274a <HAL_ADC_ConfigChannel+0x1e6>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b11      	cmp	r3, #17
 8002748:	d11b      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b10      	cmp	r3, #16
 800275c:	d111      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_ADC_ConfigChannel+0x240>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	0c9a      	lsrs	r2, r3, #18
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002774:	e002      	b.n	800277c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40012300 	.word	0x40012300
 800279c:	40012000 	.word	0x40012000
 80027a0:	20000000 	.word	0x20000000
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b0:	4b79      	ldr	r3, [pc, #484]	; (8002998 <ADC_Init+0x1f0>)
 80027b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	4a58      	ldr	r2, [pc, #352]	; (800299c <ADC_Init+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800284e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e00f      	b.n	80028a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0202 	bic.w	r2, r2, #2
 80028b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7e1b      	ldrb	r3, [r3, #24]
 80028c0:	005a      	lsls	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	3b01      	subs	r3, #1
 8002900:	035a      	lsls	r2, r3, #13
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	e007      	b.n	800291c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	3b01      	subs	r3, #1
 8002938:	051a      	lsls	r2, r3, #20
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800295e:	025a      	lsls	r2, r3, #9
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	029a      	lsls	r2, r3, #10
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012300 	.word	0x40012300
 800299c:	0f000001 	.word	0x0f000001

080029a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13c      	bne.n	8002a34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12b      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d127      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0220 	bic.w	r2, r2, #32
 8002a06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fd71 	bl	8002514 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a32:	e00e      	b.n	8002a52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff fd85 	bl	8002550 <HAL_ADC_ErrorCallback>
}
 8002a46:	e004      	b.n	8002a52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fd5d 	bl	8002528 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fd5a 	bl	8002550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff f950 	bl	8001f8c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e099      	b.n	8002e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d18:	e00f      	b.n	8002d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1a:	f7ff f937 	bl	8001f8c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d908      	bls.n	8002d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e078      	b.n	8002e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e8      	bne.n	8002d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_DMA_Init+0x158>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d117      	bne.n	8002dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fb01 	bl	80033e8 <DMA_CheckFifoParam>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fab8 	bl	800337c <DMA_CalcBaseAndBitshift>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f010803f 	.word	0xf010803f

08002e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Start_IT+0x26>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e040      	b.n	8002ee0 <HAL_DMA_Start_IT+0xa8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12f      	bne.n	8002ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fa4a 	bl	8003320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	223f      	movs	r2, #63	; 0x3f
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0216 	orr.w	r2, r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e005      	b.n	8002ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ef6:	f7ff f849 	bl	8001f8c <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d008      	beq.n	8002f1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e052      	b.n	8002fc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0216 	bic.w	r2, r2, #22
 8002f28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <HAL_DMA_Abort+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0208 	bic.w	r2, r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6a:	e013      	b.n	8002f94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f6c:	f7ff f80e 	bl	8001f8c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d90c      	bls.n	8002f94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e015      	b.n	8002fc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e4      	bne.n	8002f6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	223f      	movs	r2, #63	; 0x3f
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00c      	b.n	8003000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003018:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_DMA_IRQHandler+0x258>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a92      	ldr	r2, [pc, #584]	; (8003268 <HAL_DMA_IRQHandler+0x25c>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	2208      	movs	r2, #8
 8003038:	409a      	lsls	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01a      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2208      	movs	r2, #8
 8003066:	409a      	lsls	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	2201      	movs	r2, #1
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	2204      	movs	r2, #4
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2204      	movs	r2, #4
 80030d2:	409a      	lsls	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	2210      	movs	r2, #16
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d043      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03c      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	2210      	movs	r2, #16
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d024      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e01f      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e016      	b.n	800317c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0208 	bic.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2220      	movs	r2, #32
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 808e 	beq.w	80032aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8086 	beq.w	80032aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	2220      	movs	r2, #32
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d136      	bne.n	8003224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0216 	bic.w	r2, r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x1da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0208 	bic.w	r2, r2, #8
 80031f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	223f      	movs	r2, #63	; 0x3f
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003216:	2b00      	cmp	r3, #0
 8003218:	d07d      	beq.n	8003316 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
        }
        return;
 8003222:	e078      	b.n	8003316 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01c      	beq.n	800326c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	2b00      	cmp	r3, #0
 8003246:	d030      	beq.n	80032aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e02b      	b.n	80032aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d027      	beq.n	80032aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e022      	b.n	80032aa <HAL_DMA_IRQHandler+0x29e>
 8003264:	20000000 	.word	0x20000000
 8003268:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0210 	bic.w	r2, r2, #16
 8003288:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d032      	beq.n	8003318 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2205      	movs	r2, #5
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d307      	bcc.n	80032f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f2      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x2ca>
 80032f0:	e000      	b.n	80032f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e000      	b.n	8003318 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003316:	bf00      	nop
    }
  }
}
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop

08003320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800333c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d108      	bne.n	8003360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800335e:	e007      	b.n	8003370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3b10      	subs	r3, #16
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <DMA_CalcBaseAndBitshift+0x64>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003396:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d909      	bls.n	80033be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033b2:	f023 0303 	bic.w	r3, r3, #3
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58
 80033bc:	e007      	b.n	80033ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	aaaaaaab 	.word	0xaaaaaaab
 80033e4:	080085c0 	.word	0x080085c0

080033e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11f      	bne.n	8003442 <DMA_CheckFifoParam+0x5a>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d856      	bhi.n	80034b6 <DMA_CheckFifoParam+0xce>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <DMA_CheckFifoParam+0x28>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003433 	.word	0x08003433
 8003418:	08003421 	.word	0x08003421
 800341c:	080034b7 	.word	0x080034b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d046      	beq.n	80034ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e043      	b.n	80034ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800343a:	d140      	bne.n	80034be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003440:	e03d      	b.n	80034be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344a:	d121      	bne.n	8003490 <DMA_CheckFifoParam+0xa8>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d837      	bhi.n	80034c2 <DMA_CheckFifoParam+0xda>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <DMA_CheckFifoParam+0x70>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	08003469 	.word	0x08003469
 800345c:	0800346f 	.word	0x0800346f
 8003460:	08003469 	.word	0x08003469
 8003464:	08003481 	.word	0x08003481
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e030      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d025      	beq.n	80034c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347e:	e022      	b.n	80034c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003488:	d11f      	bne.n	80034ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800348e:	e01c      	b.n	80034ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d903      	bls.n	800349e <DMA_CheckFifoParam+0xb6>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d003      	beq.n	80034a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800349c:	e018      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      break;
 80034a2:	e015      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e00b      	b.n	80034ce <DMA_CheckFifoParam+0xe6>
      break;
 80034b6:	bf00      	nop
 80034b8:	e00a      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e008      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e006      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
    }
  } 
  
  return status; 
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e16b      	b.n	80037d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	f040 815a 	bne.w	80037ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d005      	beq.n	8003532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	2b02      	cmp	r3, #2
 8003530:	d130      	bne.n	8003594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003568:	2201      	movs	r2, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 0201 	and.w	r2, r3, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b03      	cmp	r3, #3
 800359e:	d017      	beq.n	80035d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d123      	bne.n	8003624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b4 	beq.w	80037ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b60      	ldr	r3, [pc, #384]	; (80037ec <HAL_GPIO_Init+0x30c>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	4a5f      	ldr	r2, [pc, #380]	; (80037ec <HAL_GPIO_Init+0x30c>)
 8003670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003674:	6453      	str	r3, [r2, #68]	; 0x44
 8003676:	4b5d      	ldr	r3, [pc, #372]	; (80037ec <HAL_GPIO_Init+0x30c>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003682:	4a5b      	ldr	r2, [pc, #364]	; (80037f0 <HAL_GPIO_Init+0x310>)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_GPIO_Init+0x314>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02b      	beq.n	8003706 <HAL_GPIO_Init+0x226>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <HAL_GPIO_Init+0x318>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x222>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_GPIO_Init+0x31c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x21e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <HAL_GPIO_Init+0x320>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x21a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4e      	ldr	r2, [pc, #312]	; (8003804 <HAL_GPIO_Init+0x324>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x216>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4d      	ldr	r2, [pc, #308]	; (8003808 <HAL_GPIO_Init+0x328>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x212>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <HAL_GPIO_Init+0x32c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x20e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	; (8003810 <HAL_GPIO_Init+0x330>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x20a>
 80036e6:	2307      	movs	r3, #7
 80036e8:	e00e      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036ea:	2308      	movs	r3, #8
 80036ec:	e00c      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036ee:	2306      	movs	r3, #6
 80036f0:	e00a      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036f2:	2305      	movs	r3, #5
 80036f4:	e008      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036f6:	2304      	movs	r3, #4
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036fa:	2303      	movs	r3, #3
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x228>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x228>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x228>
 8003706:	2300      	movs	r3, #0
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003718:	4935      	ldr	r1, [pc, #212]	; (80037f0 <HAL_GPIO_Init+0x310>)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_GPIO_Init+0x334>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800374a:	4a32      	ldr	r2, [pc, #200]	; (8003814 <HAL_GPIO_Init+0x334>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003750:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_GPIO_Init+0x334>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_GPIO_Init+0x334>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_GPIO_Init+0x334>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800379e:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_GPIO_Init+0x334>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_GPIO_Init+0x334>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_GPIO_Init+0x334>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	f67f ae90 	bls.w	80034fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020c00 	.word	0x40020c00
 8003804:	40021000 	.word	0x40021000
 8003808:	40021400 	.word	0x40021400
 800380c:	40021800 	.word	0x40021800
 8003810:	40021c00 	.word	0x40021c00
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e001      	b.n	800383a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
 8003854:	4613      	mov	r3, r2
 8003856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003864:	e003      	b.n	800386e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	041a      	lsls	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	619a      	str	r2, [r3, #24]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fda2 	bl	80013e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40013c00 	.word	0x40013c00

080038ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e264      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d075      	beq.n	80039b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ca:	4ba3      	ldr	r3, [pc, #652]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4ba0      	ldr	r3, [pc, #640]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d112      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4b9d      	ldr	r3, [pc, #628]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b99      	ldr	r3, [pc, #612]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d05b      	beq.n	80039b4 <HAL_RCC_OscConfig+0x108>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d157      	bne.n	80039b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e23f      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x74>
 8003912:	4b91      	ldr	r3, [pc, #580]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a90      	ldr	r2, [pc, #576]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x98>
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a8a      	ldr	r2, [pc, #552]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a87      	ldr	r2, [pc, #540]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003944:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a83      	ldr	r2, [pc, #524]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a80      	ldr	r2, [pc, #512]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe fb12 	bl	8001f8c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396c:	f7fe fb0e 	bl	8001f8c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e204      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0xc0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe fafe 	bl	8001f8c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7fe fafa 	bl	8001f8c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1f0      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0xe8>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c2:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e1c4      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4952      	ldr	r1, [pc, #328]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e03a      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1c:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <HAL_RCC_OscConfig+0x2b0>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fe fab3 	bl	8001f8c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fe faaf 	bl	8001f8c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1a5      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b43      	ldr	r3, [pc, #268]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4940      	ldr	r1, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	e015      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <HAL_RCC_OscConfig+0x2b0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fe fa92 	bl	8001f8c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6c:	f7fe fa8e 	bl	8001f8c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e184      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d030      	beq.n	8003af8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_RCC_OscConfig+0x2b4>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fa72 	bl	8001f8c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fe fa6e 	bl	8001f8c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e164      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x200>
 8003aca:	e015      	b.n	8003af8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x2b4>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fa5b 	bl	8001f8c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ada:	f7fe fa57 	bl	8001f8c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e14d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a0 	beq.w	8003c46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_OscConfig+0x2b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d121      	bne.n	8003b86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCC_OscConfig+0x2b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_RCC_OscConfig+0x2b8>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4e:	f7fe fa1d 	bl	8001f8c <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	e011      	b.n	8003b7a <HAL_RCC_OscConfig+0x2ce>
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470000 	.word	0x42470000
 8003b60:	42470e80 	.word	0x42470e80
 8003b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fe fa10 	bl	8001f8c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e106      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b85      	ldr	r3, [pc, #532]	; (8003d90 <HAL_RCC_OscConfig+0x4e4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
 8003b8e:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x312>
 8003ba4:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a7a      	ldr	r2, [pc, #488]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	4b78      	ldr	r3, [pc, #480]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a77      	ldr	r2, [pc, #476]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
 8003bbe:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a74      	ldr	r2, [pc, #464]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a71      	ldr	r2, [pc, #452]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fe f9d5 	bl	8001f8c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe f9d1 	bl	8001f8c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0c5      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCC_OscConfig+0x33a>
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe f9bf 	bl	8001f8c <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fe f9bb 	bl	8001f8c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0af      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	4a55      	ldr	r2, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 809b 	beq.w	8003d86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d05c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d141      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe f98f 	bl	8001f8c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe f98b 	bl	8001f8c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e081      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c84:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	4937      	ldr	r1, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe f964 	bl	8001f8c <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe f960 	bl	8001f8c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e056      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x41c>
 8003ce6:	e04e      	b.n	8003d86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe f94d 	bl	8001f8c <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe f949 	bl	8001f8c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e03f      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x44a>
 8003d14:	e037      	b.n	8003d86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e032      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d028      	beq.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d121      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d11a      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d52:	4013      	ands	r3, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d111      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40007000 	.word	0x40007000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470060 	.word	0x42470060

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cc      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e067      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4934      	ldr	r1, [pc, #208]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fe f87e 	bl	8001f8c <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fe f87a 	bl	8001f8c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd ffde 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	080085a8 	.word	0x080085a8
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f80:	4b67      	ldr	r3, [pc, #412]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	f200 80bd 	bhi.w	800410c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x34>
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f9a:	e0b7      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f9e:	60bb      	str	r3, [r7, #8]
       break;
 8003fa0:	e0b7      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa2:	4b61      	ldr	r3, [pc, #388]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fa4:	60bb      	str	r3, [r7, #8]
      break;
 8003fa6:	e0b4      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b5d      	ldr	r3, [pc, #372]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d04d      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b58      	ldr	r3, [pc, #352]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fce:	f04f 0100 	mov.w	r1, #0
 8003fd2:	ea02 0800 	and.w	r8, r2, r0
 8003fd6:	ea03 0901 	and.w	r9, r3, r1
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4649      	mov	r1, r9
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	014b      	lsls	r3, r1, #5
 8003fe8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fec:	0142      	lsls	r2, r0, #5
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	ebb0 0008 	subs.w	r0, r0, r8
 8003ff6:	eb61 0109 	sbc.w	r1, r1, r9
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	018b      	lsls	r3, r1, #6
 8004004:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004008:	0182      	lsls	r2, r0, #6
 800400a:	1a12      	subs	r2, r2, r0
 800400c:	eb63 0301 	sbc.w	r3, r3, r1
 8004010:	f04f 0000 	mov.w	r0, #0
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	00d9      	lsls	r1, r3, #3
 800401a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800401e:	00d0      	lsls	r0, r2, #3
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	eb12 0208 	adds.w	r2, r2, r8
 8004028:	eb43 0309 	adc.w	r3, r3, r9
 800402c:	f04f 0000 	mov.w	r0, #0
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	0259      	lsls	r1, r3, #9
 8004036:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800403a:	0250      	lsls	r0, r2, #9
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	461a      	mov	r2, r3
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	f7fc fdac 	bl	8000ba8 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4613      	mov	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e04a      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405a:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	461a      	mov	r2, r3
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f240 10ff 	movw	r0, #511	; 0x1ff
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	ea02 0400 	and.w	r4, r2, r0
 8004072:	ea03 0501 	and.w	r5, r3, r1
 8004076:	4620      	mov	r0, r4
 8004078:	4629      	mov	r1, r5
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	014b      	lsls	r3, r1, #5
 8004084:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004088:	0142      	lsls	r2, r0, #5
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	1b00      	subs	r0, r0, r4
 8004090:	eb61 0105 	sbc.w	r1, r1, r5
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	018b      	lsls	r3, r1, #6
 800409e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040a2:	0182      	lsls	r2, r0, #6
 80040a4:	1a12      	subs	r2, r2, r0
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	f04f 0000 	mov.w	r0, #0
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	00d9      	lsls	r1, r3, #3
 80040b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b8:	00d0      	lsls	r0, r2, #3
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	1912      	adds	r2, r2, r4
 80040c0:	eb45 0303 	adc.w	r3, r5, r3
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0299      	lsls	r1, r3, #10
 80040ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040d2:	0290      	lsls	r0, r2, #10
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	461a      	mov	r2, r3
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f7fc fd60 	bl	8000ba8 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4613      	mov	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	60bb      	str	r3, [r7, #8]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800410e:	60bb      	str	r3, [r7, #8]
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	68bb      	ldr	r3, [r7, #8]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_RCC_GetHCLKFreq+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000000 	.word	0x20000000

08004144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004148:	f7ff fff0 	bl	800412c <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0a9b      	lsrs	r3, r3, #10
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	080085b8 	.word	0x080085b8

0800416c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004170:	f7ff ffdc 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004174:	4602      	mov	r2, r0
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	0b5b      	lsrs	r3, r3, #13
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	4903      	ldr	r1, [pc, #12]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004182:	5ccb      	ldrb	r3, [r1, r3]
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	080085b8 	.word	0x080085b8

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e041      	b.n	800422a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fd80 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 fad0 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e041      	b.n	80042c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f839 	bl	80042d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f000 fa81 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_TIM_PWM_Start+0x24>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e022      	b.n	800434e <HAL_TIM_PWM_Start+0x6a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b04      	cmp	r3, #4
 800430c:	d109      	bne.n	8004322 <HAL_TIM_PWM_Start+0x3e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e015      	b.n	800434e <HAL_TIM_PWM_Start+0x6a>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d109      	bne.n	800433c <HAL_TIM_PWM_Start+0x58>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e008      	b.n	800434e <HAL_TIM_PWM_Start+0x6a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07c      	b.n	8004450 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0x82>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004364:	e013      	b.n	800438e <HAL_TIM_PWM_Start+0xaa>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0x92>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	e00b      	b.n	800438e <HAL_TIM_PWM_Start+0xaa>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b08      	cmp	r3, #8
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0xa2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004384:	e003      	b.n	800438e <HAL_TIM_PWM_Start+0xaa>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fcd8 	bl	8004d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <HAL_TIM_PWM_Start+0x174>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_PWM_Start+0xcc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2c      	ldr	r2, [pc, #176]	; (800445c <HAL_TIM_PWM_Start+0x178>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d101      	bne.n	80043b4 <HAL_TIM_PWM_Start+0xd0>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_PWM_Start+0xd2>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_TIM_PWM_Start+0x174>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d022      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d01d      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_TIM_PWM_Start+0x17c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d018      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_TIM_PWM_Start+0x180>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_TIM_PWM_Start+0x184>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIM_PWM_Start+0x178>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a18      	ldr	r2, [pc, #96]	; (800446c <HAL_TIM_PWM_Start+0x188>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIM_PWM_Start+0x136>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_TIM_PWM_Start+0x18c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d010      	beq.n	800444e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	e007      	b.n	800444e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000
 8004470:	40001800 	.word	0x40001800

08004474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800448a:	2302      	movs	r3, #2
 800448c:	e0ac      	b.n	80045e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	f200 809f 	bhi.w	80045dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080045dd 	.word	0x080045dd
 80044ac:	080045dd 	.word	0x080045dd
 80044b0:	080045dd 	.word	0x080045dd
 80044b4:	08004519 	.word	0x08004519
 80044b8:	080045dd 	.word	0x080045dd
 80044bc:	080045dd 	.word	0x080045dd
 80044c0:	080045dd 	.word	0x080045dd
 80044c4:	0800455b 	.word	0x0800455b
 80044c8:	080045dd 	.word	0x080045dd
 80044cc:	080045dd 	.word	0x080045dd
 80044d0:	080045dd 	.word	0x080045dd
 80044d4:	0800459b 	.word	0x0800459b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f9ea 	bl	80048b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0208 	orr.w	r2, r2, #8
 80044f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0204 	bic.w	r2, r2, #4
 8004502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	619a      	str	r2, [r3, #24]
      break;
 8004516:	e062      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa3a 	bl	8004998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      break;
 8004558:	e041      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fa8f 	bl	8004a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0204 	bic.w	r2, r2, #4
 8004584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69d9      	ldr	r1, [r3, #28]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
      break;
 8004598:	e021      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fae3 	bl	8004b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69d9      	ldr	r1, [r3, #28]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	021a      	lsls	r2, r3, #8
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	61da      	str	r2, [r3, #28]
      break;
 80045da:	e000      	b.n	80045de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80045dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e0b3      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x180>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800462e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004640:	d03e      	beq.n	80046c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f200 8087 	bhi.w	8004758 <HAL_TIM_ConfigClockSource+0x168>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	f000 8085 	beq.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004656:	d87f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004658:	2b70      	cmp	r3, #112	; 0x70
 800465a:	d01a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xa2>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d87b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d050      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x116>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d877      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004668:	2b50      	cmp	r3, #80	; 0x50
 800466a:	d03c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xf6>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d873      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d058      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x136>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d86f      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004678:	2b30      	cmp	r3, #48	; 0x30
 800467a:	d064      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d86b      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d060      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d867      	bhi.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05c      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
 800468c:	2b10      	cmp	r3, #16
 800468e:	d05a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004690:	e062      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6899      	ldr	r1, [r3, #8]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f000 fb33 	bl	8004d0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	609a      	str	r2, [r3, #8]
      break;
 80046be:	e04e      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f000 fb1c 	bl	8004d0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e2:	609a      	str	r2, [r3, #8]
      break;
 80046e4:	e03b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f000 fa90 	bl	8004c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2150      	movs	r1, #80	; 0x50
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fae9 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004704:	e02b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	461a      	mov	r2, r3
 8004714:	f000 faaf 	bl	8004c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2160      	movs	r1, #96	; 0x60
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fad9 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004724:	e01b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fa70 	bl	8004c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fac9 	bl	8004cd6 <TIM_ITRx_SetConfig>
      break;
 8004744:	e00b      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 fac0 	bl	8004cd6 <TIM_ITRx_SetConfig>
        break;
 8004756:	e002      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004758:	bf00      	nop
 800475a:	e000      	b.n	800475e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800475c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a40      	ldr	r2, [pc, #256]	; (800488c <TIM_Base_SetConfig+0x114>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d00f      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3d      	ldr	r2, [pc, #244]	; (8004890 <TIM_Base_SetConfig+0x118>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <TIM_Base_SetConfig+0x11c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3b      	ldr	r2, [pc, #236]	; (8004898 <TIM_Base_SetConfig+0x120>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3a      	ldr	r2, [pc, #232]	; (800489c <TIM_Base_SetConfig+0x124>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2f      	ldr	r2, [pc, #188]	; (800488c <TIM_Base_SetConfig+0x114>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d02b      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d027      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <TIM_Base_SetConfig+0x118>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d023      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2b      	ldr	r2, [pc, #172]	; (8004894 <TIM_Base_SetConfig+0x11c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01f      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2a      	ldr	r2, [pc, #168]	; (8004898 <TIM_Base_SetConfig+0x120>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01b      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a29      	ldr	r2, [pc, #164]	; (800489c <TIM_Base_SetConfig+0x124>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d017      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a28      	ldr	r2, [pc, #160]	; (80048a0 <TIM_Base_SetConfig+0x128>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a27      	ldr	r2, [pc, #156]	; (80048a4 <TIM_Base_SetConfig+0x12c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00f      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <TIM_Base_SetConfig+0x130>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <TIM_Base_SetConfig+0x134>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <TIM_Base_SetConfig+0x138>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <TIM_Base_SetConfig+0x13c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d108      	bne.n	800483c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <TIM_Base_SetConfig+0x114>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0xf8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a0c      	ldr	r2, [pc, #48]	; (800489c <TIM_Base_SetConfig+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d103      	bne.n	8004878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	615a      	str	r2, [r3, #20]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800
 80048ac:	40001800 	.word	0x40001800
 80048b0:	40001c00 	.word	0x40001c00
 80048b4:	40002000 	.word	0x40002000

080048b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0201 	bic.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 0302 	bic.w	r3, r3, #2
 8004900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <TIM_OC1_SetConfig+0xd8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_OC1_SetConfig+0x64>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <TIM_OC1_SetConfig+0xdc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10c      	bne.n	8004936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0308 	bic.w	r3, r3, #8
 8004922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a15      	ldr	r2, [pc, #84]	; (8004990 <TIM_OC1_SetConfig+0xd8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_OC1_SetConfig+0x8e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <TIM_OC1_SetConfig+0xdc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40010000 	.word	0x40010000
 8004994:	40010400 	.word	0x40010400

08004998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0210 	bic.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0320 	bic.w	r3, r3, #32
 80049e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <TIM_OC2_SetConfig+0xe4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC2_SetConfig+0x68>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <TIM_OC2_SetConfig+0xe8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <TIM_OC2_SetConfig+0xe4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC2_SetConfig+0x94>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a16      	ldr	r2, [pc, #88]	; (8004a80 <TIM_OC2_SetConfig+0xe8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d113      	bne.n	8004a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40010400 	.word	0x40010400

08004a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <TIM_OC3_SetConfig+0xe0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_OC3_SetConfig+0x66>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <TIM_OC3_SetConfig+0xe4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10d      	bne.n	8004b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <TIM_OC3_SetConfig+0xe0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC3_SetConfig+0x92>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <TIM_OC3_SetConfig+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d113      	bne.n	8004b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40010400 	.word	0x40010400

08004b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	031b      	lsls	r3, r3, #12
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <TIM_OC4_SetConfig+0xa4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC4_SetConfig+0x68>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <TIM_OC4_SetConfig+0xa8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d109      	bne.n	8004be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	019b      	lsls	r3, r3, #6
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40010400 	.word	0x40010400

08004c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0201 	bic.w	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 030a 	bic.w	r3, r3, #10
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b087      	sub	sp, #28
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0210 	bic.w	r2, r3, #16
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	031b      	lsls	r3, r3, #12
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f043 0307 	orr.w	r3, r3, #7
 8004cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2201      	movs	r2, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	fa01 f303 	lsl.w	r3, r1, r3
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e05a      	b.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d01d      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10c      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40010400 	.word	0x40010400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40001800 	.word	0x40001800

08004e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e03d      	b.n	8004f28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e03f      	b.n	8004fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc ff36 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	; 0x24
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fc1b 	bl	80057b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695a      	ldr	r2, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08a      	sub	sp, #40	; 0x28
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d17c      	bne.n	80050e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_UART_Transmit+0x2c>
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e075      	b.n	80050ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_UART_Transmit+0x3e>
 8005008:	2302      	movs	r3, #2
 800500a:	e06e      	b.n	80050ea <HAL_UART_Transmit+0x11c>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2221      	movs	r2, #33	; 0x21
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005022:	f7fc ffb3 	bl	8001f8c <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d108      	bne.n	8005050 <HAL_UART_Transmit+0x82>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e003      	b.n	8005058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005060:	e02a      	b.n	80050b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fa17 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e036      	b.n	80050ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e007      	b.n	80050aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1cf      	bne.n	8005062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2140      	movs	r1, #64	; 0x40
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f9e7 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005114:	2300      	movs	r3, #0
 8005116:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10d      	bne.n	8005146 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_UART_IRQHandler+0x52>
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 faa1 	bl	8005686 <UART_Receive_IT>
      return;
 8005144:	e17c      	b.n	8005440 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80b1 	beq.w	80052b0 <HAL_UART_IRQHandler+0x1bc>
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_UART_IRQHandler+0x70>
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80a6 	beq.w	80052b0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_UART_IRQHandler+0x90>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	f043 0201 	orr.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_UART_IRQHandler+0xb0>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	f043 0202 	orr.w	r2, r3, #2
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_UART_IRQHandler+0xd0>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f043 0204 	orr.w	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00f      	beq.n	80051ee <HAL_UART_IRQHandler+0xfa>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_UART_IRQHandler+0xee>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0208 	orr.w	r2, r3, #8
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 811f 	beq.w	8005436 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_UART_IRQHandler+0x11e>
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa3a 	bl	8005686 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <HAL_UART_IRQHandler+0x146>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d031      	beq.n	800529e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f97a 	bl	8005534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d123      	bne.n	8005296 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d013      	beq.n	800528e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	4a77      	ldr	r2, [pc, #476]	; (8005448 <HAL_UART_IRQHandler+0x354>)
 800526c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	4618      	mov	r0, r3
 8005274:	f7fd fea8 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	e00e      	b.n	80052ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8f0 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	e00a      	b.n	80052ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8ec 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529c:	e006      	b.n	80052ac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8e8 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052aa:	e0c4      	b.n	8005436 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ac:	bf00      	nop
    return;
 80052ae:	e0c2      	b.n	8005436 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 80a2 	bne.w	80053fe <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 809c 	beq.w	80053fe <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8096 	beq.w	80053fe <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d14f      	bne.n	8005396 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005300:	8a3b      	ldrh	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8099 	beq.w	800543a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800530c:	8a3a      	ldrh	r2, [r7, #16]
 800530e:	429a      	cmp	r2, r3
 8005310:	f080 8093 	bcs.w	800543a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8a3a      	ldrh	r2, [r7, #16]
 8005318:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d02b      	beq.n	800537e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005334:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0210 	bic.w	r2, r2, #16
 8005372:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	4618      	mov	r0, r3
 800537a:	f7fd fdb5 	bl	8002ee8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005386:	b29b      	uxth	r3, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	b29b      	uxth	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f87a 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005394:	e051      	b.n	800543a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800539e:	b29b      	uxth	r3, r3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d047      	beq.n	800543e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80053ae:	8a7b      	ldrh	r3, [r7, #18]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d044      	beq.n	800543e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053c2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0210 	bic.w	r2, r2, #16
 80053f0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053f2:	8a7b      	ldrh	r3, [r7, #18]
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f846 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053fc:	e01f      	b.n	800543e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_UART_IRQHandler+0x326>
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8cf 	bl	80055b6 <UART_Transmit_IT>
    return;
 8005418:	e012      	b.n	8005440 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <HAL_UART_IRQHandler+0x34c>
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f911 	bl	8005656 <UART_EndTransmit_IT>
    return;
 8005434:	e004      	b.n	8005440 <HAL_UART_IRQHandler+0x34c>
    return;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_UART_IRQHandler+0x34c>
      return;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_UART_IRQHandler+0x34c>
      return;
 800543e:	bf00      	nop
  }
}
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	0800558f 	.word	0x0800558f

0800544c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e02c      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d028      	beq.n	800550c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054c0:	f7fc fd64 	bl	8001f8c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d21d      	bcs.n	800550c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e00f      	b.n	800552c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4013      	ands	r3, r2
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	429a      	cmp	r2, r3
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	429a      	cmp	r2, r3
 8005528:	d0c3      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800554a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0210 	bic.w	r2, r2, #16
 8005572:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff ff63 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b21      	cmp	r3, #33	; 0x21
 80055c8:	d13e      	bne.n	8005648 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d114      	bne.n	80055fe <UART_Transmit_IT+0x48>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	621a      	str	r2, [r3, #32]
 80055fc:	e008      	b.n	8005610 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	1c59      	adds	r1, r3, #1
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6211      	str	r1, [r2, #32]
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29b      	uxth	r3, r3
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4619      	mov	r1, r3
 800561e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10f      	bne.n	8005644 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005632:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005642:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fee8 	bl	800544c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b22      	cmp	r3, #34	; 0x22
 8005698:	f040 8087 	bne.w	80057aa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d117      	bne.n	80056d6 <UART_Receive_IT+0x50>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d113      	bne.n	80056d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
 80056d4:	e026      	b.n	8005724 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	d007      	beq.n	80056fa <UART_Receive_IT+0x74>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <UART_Receive_IT+0x82>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e008      	b.n	800571a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29b      	uxth	r3, r3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4619      	mov	r1, r3
 8005732:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005734:	2b00      	cmp	r3, #0
 8005736:	d136      	bne.n	80057a6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0220 	bic.w	r2, r2, #32
 8005746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0201 	bic.w	r2, r2, #1
 8005766:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10e      	bne.n	8005796 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0210 	bic.w	r2, r2, #16
 8005786:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fe7a 	bl	8005488 <HAL_UARTEx_RxEventCallback>
 8005794:	e002      	b.n	800579c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fe62 	bl	8005460 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e002      	b.n	80057ac <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e000      	b.n	80057ac <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
  }
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	b09f      	sub	sp, #124	; 0x7c
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ca:	68d9      	ldr	r1, [r3, #12]
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	ea40 0301 	orr.w	r3, r0, r1
 80057d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	431a      	orrs	r2, r3
 80057e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057f8:	f021 010c 	bic.w	r1, r1, #12
 80057fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005802:	430b      	orrs	r3, r1
 8005804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	ea40 0301 	orr.w	r3, r0, r1
 800581c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4bc5      	ldr	r3, [pc, #788]	; (8005b38 <UART_SetConfig+0x384>)
 8005824:	429a      	cmp	r2, r3
 8005826:	d004      	beq.n	8005832 <UART_SetConfig+0x7e>
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4bc3      	ldr	r3, [pc, #780]	; (8005b3c <UART_SetConfig+0x388>)
 800582e:	429a      	cmp	r2, r3
 8005830:	d103      	bne.n	800583a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005832:	f7fe fc9b 	bl	800416c <HAL_RCC_GetPCLK2Freq>
 8005836:	6778      	str	r0, [r7, #116]	; 0x74
 8005838:	e002      	b.n	8005840 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800583a:	f7fe fc83 	bl	8004144 <HAL_RCC_GetPCLK1Freq>
 800583e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	f040 80b6 	bne.w	80059b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800584c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584e:	461c      	mov	r4, r3
 8005850:	f04f 0500 	mov.w	r5, #0
 8005854:	4622      	mov	r2, r4
 8005856:	462b      	mov	r3, r5
 8005858:	1891      	adds	r1, r2, r2
 800585a:	6439      	str	r1, [r7, #64]	; 0x40
 800585c:	415b      	adcs	r3, r3
 800585e:	647b      	str	r3, [r7, #68]	; 0x44
 8005860:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005864:	1912      	adds	r2, r2, r4
 8005866:	eb45 0303 	adc.w	r3, r5, r3
 800586a:	f04f 0000 	mov.w	r0, #0
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	00d9      	lsls	r1, r3, #3
 8005874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005878:	00d0      	lsls	r0, r2, #3
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	1911      	adds	r1, r2, r4
 8005880:	6639      	str	r1, [r7, #96]	; 0x60
 8005882:	416b      	adcs	r3, r5
 8005884:	667b      	str	r3, [r7, #100]	; 0x64
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	461a      	mov	r2, r3
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	1891      	adds	r1, r2, r2
 8005892:	63b9      	str	r1, [r7, #56]	; 0x38
 8005894:	415b      	adcs	r3, r3
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800589c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058a0:	f7fb f982 	bl	8000ba8 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4ba5      	ldr	r3, [pc, #660]	; (8005b40 <UART_SetConfig+0x38c>)
 80058aa:	fba3 2302 	umull	r2, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	011e      	lsls	r6, r3, #4
 80058b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b4:	461c      	mov	r4, r3
 80058b6:	f04f 0500 	mov.w	r5, #0
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	1891      	adds	r1, r2, r2
 80058c0:	6339      	str	r1, [r7, #48]	; 0x30
 80058c2:	415b      	adcs	r3, r3
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058ca:	1912      	adds	r2, r2, r4
 80058cc:	eb45 0303 	adc.w	r3, r5, r3
 80058d0:	f04f 0000 	mov.w	r0, #0
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	00d9      	lsls	r1, r3, #3
 80058da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058de:	00d0      	lsls	r0, r2, #3
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	1911      	adds	r1, r2, r4
 80058e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80058e8:	416b      	adcs	r3, r5
 80058ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	461a      	mov	r2, r3
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80058fa:	415b      	adcs	r3, r3
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005902:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005906:	f7fb f94f 	bl	8000ba8 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b8c      	ldr	r3, [pc, #560]	; (8005b40 <UART_SetConfig+0x38c>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	; 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3332      	adds	r3, #50	; 0x32
 8005922:	4a87      	ldr	r2, [pc, #540]	; (8005b40 <UART_SetConfig+0x38c>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005930:	441e      	add	r6, r3
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	4618      	mov	r0, r3
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	1894      	adds	r4, r2, r2
 8005940:	623c      	str	r4, [r7, #32]
 8005942:	415b      	adcs	r3, r3
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800594a:	1812      	adds	r2, r2, r0
 800594c:	eb41 0303 	adc.w	r3, r1, r3
 8005950:	f04f 0400 	mov.w	r4, #0
 8005954:	f04f 0500 	mov.w	r5, #0
 8005958:	00dd      	lsls	r5, r3, #3
 800595a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800595e:	00d4      	lsls	r4, r2, #3
 8005960:	4622      	mov	r2, r4
 8005962:	462b      	mov	r3, r5
 8005964:	1814      	adds	r4, r2, r0
 8005966:	653c      	str	r4, [r7, #80]	; 0x50
 8005968:	414b      	adcs	r3, r1
 800596a:	657b      	str	r3, [r7, #84]	; 0x54
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	461a      	mov	r2, r3
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	1891      	adds	r1, r2, r2
 8005978:	61b9      	str	r1, [r7, #24]
 800597a:	415b      	adcs	r3, r3
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005982:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005986:	f7fb f90f 	bl	8000ba8 <__aeabi_uldivmod>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4b6c      	ldr	r3, [pc, #432]	; (8005b40 <UART_SetConfig+0x38c>)
 8005990:	fba3 1302 	umull	r1, r3, r3, r2
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	2164      	movs	r1, #100	; 0x64
 8005998:	fb01 f303 	mul.w	r3, r1, r3
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	3332      	adds	r3, #50	; 0x32
 80059a2:	4a67      	ldr	r2, [pc, #412]	; (8005b40 <UART_SetConfig+0x38c>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	f003 0207 	and.w	r2, r3, #7
 80059ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4432      	add	r2, r6
 80059b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059b6:	e0b9      	b.n	8005b2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ba:	461c      	mov	r4, r3
 80059bc:	f04f 0500 	mov.w	r5, #0
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	1891      	adds	r1, r2, r2
 80059c6:	6139      	str	r1, [r7, #16]
 80059c8:	415b      	adcs	r3, r3
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059d0:	1912      	adds	r2, r2, r4
 80059d2:	eb45 0303 	adc.w	r3, r5, r3
 80059d6:	f04f 0000 	mov.w	r0, #0
 80059da:	f04f 0100 	mov.w	r1, #0
 80059de:	00d9      	lsls	r1, r3, #3
 80059e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059e4:	00d0      	lsls	r0, r2, #3
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	eb12 0804 	adds.w	r8, r2, r4
 80059ee:	eb43 0905 	adc.w	r9, r3, r5
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f04f 0100 	mov.w	r1, #0
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	008b      	lsls	r3, r1, #2
 8005a06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a0a:	0082      	lsls	r2, r0, #2
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fb f8ca 	bl	8000ba8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <UART_SetConfig+0x38c>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011e      	lsls	r6, r3, #4
 8005a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a24:	4618      	mov	r0, r3
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	1894      	adds	r4, r2, r2
 8005a30:	60bc      	str	r4, [r7, #8]
 8005a32:	415b      	adcs	r3, r3
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a3a:	1812      	adds	r2, r2, r0
 8005a3c:	eb41 0303 	adc.w	r3, r1, r3
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	f04f 0500 	mov.w	r5, #0
 8005a48:	00dd      	lsls	r5, r3, #3
 8005a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a4e:	00d4      	lsls	r4, r2, #3
 8005a50:	4622      	mov	r2, r4
 8005a52:	462b      	mov	r3, r5
 8005a54:	1814      	adds	r4, r2, r0
 8005a56:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a58:	414b      	adcs	r3, r1
 8005a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	008b      	lsls	r3, r1, #2
 8005a70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a74:	0082      	lsls	r2, r0, #2
 8005a76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a7a:	f7fb f895 	bl	8000ba8 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <UART_SetConfig+0x38c>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	; 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	3332      	adds	r3, #50	; 0x32
 8005a96:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <UART_SetConfig+0x38c>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa2:	441e      	add	r6, r3
 8005aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	1894      	adds	r4, r2, r2
 8005ab2:	603c      	str	r4, [r7, #0]
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abc:	1812      	adds	r2, r2, r0
 8005abe:	eb41 0303 	adc.w	r3, r1, r3
 8005ac2:	f04f 0400 	mov.w	r4, #0
 8005ac6:	f04f 0500 	mov.w	r5, #0
 8005aca:	00dd      	lsls	r5, r3, #3
 8005acc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ad0:	00d4      	lsls	r4, r2, #3
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	eb12 0a00 	adds.w	sl, r2, r0
 8005ada:	eb43 0b01 	adc.w	fp, r3, r1
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	008b      	lsls	r3, r1, #2
 8005af2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005af6:	0082      	lsls	r2, r0, #2
 8005af8:	4650      	mov	r0, sl
 8005afa:	4659      	mov	r1, fp
 8005afc:	f7fb f854 	bl	8000ba8 <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <UART_SetConfig+0x38c>)
 8005b06:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	2164      	movs	r1, #100	; 0x64
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	3332      	adds	r3, #50	; 0x32
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <UART_SetConfig+0x38c>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f003 020f 	and.w	r2, r3, #15
 8005b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4432      	add	r2, r6
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	377c      	adds	r7, #124	; 0x7c
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b36:	bf00      	nop
 8005b38:	40011000 	.word	0x40011000
 8005b3c:	40011400 	.word	0x40011400
 8005b40:	51eb851f 	.word	0x51eb851f

08005b44 <__errno>:
 8005b44:	4b01      	ldr	r3, [pc, #4]	; (8005b4c <__errno+0x8>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	2000000c 	.word	0x2000000c

08005b50 <__libc_init_array>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4d0d      	ldr	r5, [pc, #52]	; (8005b88 <__libc_init_array+0x38>)
 8005b54:	4c0d      	ldr	r4, [pc, #52]	; (8005b8c <__libc_init_array+0x3c>)
 8005b56:	1b64      	subs	r4, r4, r5
 8005b58:	10a4      	asrs	r4, r4, #2
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	42a6      	cmp	r6, r4
 8005b5e:	d109      	bne.n	8005b74 <__libc_init_array+0x24>
 8005b60:	4d0b      	ldr	r5, [pc, #44]	; (8005b90 <__libc_init_array+0x40>)
 8005b62:	4c0c      	ldr	r4, [pc, #48]	; (8005b94 <__libc_init_array+0x44>)
 8005b64:	f002 fd0a 	bl	800857c <_init>
 8005b68:	1b64      	subs	r4, r4, r5
 8005b6a:	10a4      	asrs	r4, r4, #2
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	42a6      	cmp	r6, r4
 8005b70:	d105      	bne.n	8005b7e <__libc_init_array+0x2e>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b78:	4798      	blx	r3
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	e7ee      	b.n	8005b5c <__libc_init_array+0xc>
 8005b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b82:	4798      	blx	r3
 8005b84:	3601      	adds	r6, #1
 8005b86:	e7f2      	b.n	8005b6e <__libc_init_array+0x1e>
 8005b88:	080089b4 	.word	0x080089b4
 8005b8c:	080089b4 	.word	0x080089b4
 8005b90:	080089b4 	.word	0x080089b4
 8005b94:	080089b8 	.word	0x080089b8

08005b98 <memset>:
 8005b98:	4402      	add	r2, r0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <memset+0xa>
 8005ba0:	4770      	bx	lr
 8005ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba6:	e7f9      	b.n	8005b9c <memset+0x4>

08005ba8 <__cvt>:
 8005ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	ec55 4b10 	vmov	r4, r5, d0
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	460e      	mov	r6, r1
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	bfbb      	ittet	lt
 8005bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bbe:	461d      	movlt	r5, r3
 8005bc0:	2300      	movge	r3, #0
 8005bc2:	232d      	movlt	r3, #45	; 0x2d
 8005bc4:	700b      	strb	r3, [r1, #0]
 8005bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005bcc:	4691      	mov	r9, r2
 8005bce:	f023 0820 	bic.w	r8, r3, #32
 8005bd2:	bfbc      	itt	lt
 8005bd4:	4622      	movlt	r2, r4
 8005bd6:	4614      	movlt	r4, r2
 8005bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bdc:	d005      	beq.n	8005bea <__cvt+0x42>
 8005bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005be2:	d100      	bne.n	8005be6 <__cvt+0x3e>
 8005be4:	3601      	adds	r6, #1
 8005be6:	2102      	movs	r1, #2
 8005be8:	e000      	b.n	8005bec <__cvt+0x44>
 8005bea:	2103      	movs	r1, #3
 8005bec:	ab03      	add	r3, sp, #12
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	ab02      	add	r3, sp, #8
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	ec45 4b10 	vmov	d0, r4, r5
 8005bf8:	4653      	mov	r3, sl
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	f000 fce4 	bl	80065c8 <_dtoa_r>
 8005c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c04:	4607      	mov	r7, r0
 8005c06:	d102      	bne.n	8005c0e <__cvt+0x66>
 8005c08:	f019 0f01 	tst.w	r9, #1
 8005c0c:	d022      	beq.n	8005c54 <__cvt+0xac>
 8005c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c12:	eb07 0906 	add.w	r9, r7, r6
 8005c16:	d110      	bne.n	8005c3a <__cvt+0x92>
 8005c18:	783b      	ldrb	r3, [r7, #0]
 8005c1a:	2b30      	cmp	r3, #48	; 0x30
 8005c1c:	d10a      	bne.n	8005c34 <__cvt+0x8c>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2300      	movs	r3, #0
 8005c22:	4620      	mov	r0, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	f7fa ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c2a:	b918      	cbnz	r0, 8005c34 <__cvt+0x8c>
 8005c2c:	f1c6 0601 	rsb	r6, r6, #1
 8005c30:	f8ca 6000 	str.w	r6, [sl]
 8005c34:	f8da 3000 	ldr.w	r3, [sl]
 8005c38:	4499      	add	r9, r3
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7fa ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c46:	b108      	cbz	r0, 8005c4c <__cvt+0xa4>
 8005c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c4c:	2230      	movs	r2, #48	; 0x30
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	454b      	cmp	r3, r9
 8005c52:	d307      	bcc.n	8005c64 <__cvt+0xbc>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c58:	1bdb      	subs	r3, r3, r7
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	b004      	add	sp, #16
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	9103      	str	r1, [sp, #12]
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e7f0      	b.n	8005c4e <__cvt+0xa6>

08005c6c <__exponent>:
 8005c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2900      	cmp	r1, #0
 8005c72:	bfb8      	it	lt
 8005c74:	4249      	neglt	r1, r1
 8005c76:	f803 2b02 	strb.w	r2, [r3], #2
 8005c7a:	bfb4      	ite	lt
 8005c7c:	222d      	movlt	r2, #45	; 0x2d
 8005c7e:	222b      	movge	r2, #43	; 0x2b
 8005c80:	2909      	cmp	r1, #9
 8005c82:	7042      	strb	r2, [r0, #1]
 8005c84:	dd2a      	ble.n	8005cdc <__exponent+0x70>
 8005c86:	f10d 0407 	add.w	r4, sp, #7
 8005c8a:	46a4      	mov	ip, r4
 8005c8c:	270a      	movs	r7, #10
 8005c8e:	46a6      	mov	lr, r4
 8005c90:	460a      	mov	r2, r1
 8005c92:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c96:	fb07 1516 	mls	r5, r7, r6, r1
 8005c9a:	3530      	adds	r5, #48	; 0x30
 8005c9c:	2a63      	cmp	r2, #99	; 0x63
 8005c9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ca2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	dcf1      	bgt.n	8005c8e <__exponent+0x22>
 8005caa:	3130      	adds	r1, #48	; 0x30
 8005cac:	f1ae 0502 	sub.w	r5, lr, #2
 8005cb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cb4:	1c44      	adds	r4, r0, #1
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4561      	cmp	r1, ip
 8005cba:	d30a      	bcc.n	8005cd2 <__exponent+0x66>
 8005cbc:	f10d 0209 	add.w	r2, sp, #9
 8005cc0:	eba2 020e 	sub.w	r2, r2, lr
 8005cc4:	4565      	cmp	r5, ip
 8005cc6:	bf88      	it	hi
 8005cc8:	2200      	movhi	r2, #0
 8005cca:	4413      	add	r3, r2
 8005ccc:	1a18      	subs	r0, r3, r0
 8005cce:	b003      	add	sp, #12
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cda:	e7ed      	b.n	8005cb8 <__exponent+0x4c>
 8005cdc:	2330      	movs	r3, #48	; 0x30
 8005cde:	3130      	adds	r1, #48	; 0x30
 8005ce0:	7083      	strb	r3, [r0, #2]
 8005ce2:	70c1      	strb	r1, [r0, #3]
 8005ce4:	1d03      	adds	r3, r0, #4
 8005ce6:	e7f1      	b.n	8005ccc <__exponent+0x60>

08005ce8 <_printf_float>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b02 	vpush	{d8}
 8005cf0:	b08d      	sub	sp, #52	; 0x34
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	461f      	mov	r7, r3
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	f001 fb45 	bl	800738c <_localeconv_r>
 8005d02:	f8d0 a000 	ldr.w	sl, [r0]
 8005d06:	4650      	mov	r0, sl
 8005d08:	f7fa fa62 	bl	80001d0 <strlen>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	f8d8 3000 	ldr.w	r3, [r8]
 8005d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d1c:	3307      	adds	r3, #7
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	f103 0208 	add.w	r2, r3, #8
 8005d26:	f8c8 2000 	str.w	r2, [r8]
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d40:	ee08 0a10 	vmov	s16, r0
 8005d44:	4b9f      	ldr	r3, [pc, #636]	; (8005fc4 <_printf_float+0x2dc>)
 8005d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	f7fa feed 	bl	8000b2c <__aeabi_dcmpun>
 8005d52:	bb88      	cbnz	r0, 8005db8 <_printf_float+0xd0>
 8005d54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d58:	4b9a      	ldr	r3, [pc, #616]	; (8005fc4 <_printf_float+0x2dc>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	f7fa fec7 	bl	8000af0 <__aeabi_dcmple>
 8005d62:	bb48      	cbnz	r0, 8005db8 <_printf_float+0xd0>
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	4640      	mov	r0, r8
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f7fa feb6 	bl	8000adc <__aeabi_dcmplt>
 8005d70:	b110      	cbz	r0, 8005d78 <_printf_float+0x90>
 8005d72:	232d      	movs	r3, #45	; 0x2d
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d78:	4b93      	ldr	r3, [pc, #588]	; (8005fc8 <_printf_float+0x2e0>)
 8005d7a:	4894      	ldr	r0, [pc, #592]	; (8005fcc <_printf_float+0x2e4>)
 8005d7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d80:	bf94      	ite	ls
 8005d82:	4698      	movls	r8, r3
 8005d84:	4680      	movhi	r8, r0
 8005d86:	2303      	movs	r3, #3
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	9b05      	ldr	r3, [sp, #20]
 8005d8c:	f023 0204 	bic.w	r2, r3, #4
 8005d90:	6022      	str	r2, [r4, #0]
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	9700      	str	r7, [sp, #0]
 8005d98:	4633      	mov	r3, r6
 8005d9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 f9d8 	bl	8006154 <_printf_common>
 8005da4:	3001      	adds	r0, #1
 8005da6:	f040 8090 	bne.w	8005eca <_printf_float+0x1e2>
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dae:	b00d      	add	sp, #52	; 0x34
 8005db0:	ecbd 8b02 	vpop	{d8}
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa feb4 	bl	8000b2c <__aeabi_dcmpun>
 8005dc4:	b140      	cbz	r0, 8005dd8 <_printf_float+0xf0>
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bfbc      	itt	lt
 8005dcc:	232d      	movlt	r3, #45	; 0x2d
 8005dce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dd2:	487f      	ldr	r0, [pc, #508]	; (8005fd0 <_printf_float+0x2e8>)
 8005dd4:	4b7f      	ldr	r3, [pc, #508]	; (8005fd4 <_printf_float+0x2ec>)
 8005dd6:	e7d1      	b.n	8005d7c <_printf_float+0x94>
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005dde:	9206      	str	r2, [sp, #24]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	d13f      	bne.n	8005e64 <_printf_float+0x17c>
 8005de4:	2306      	movs	r3, #6
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	9b05      	ldr	r3, [sp, #20]
 8005dea:	6861      	ldr	r1, [r4, #4]
 8005dec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005df0:	2300      	movs	r3, #0
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	ab0a      	add	r3, sp, #40	; 0x28
 8005df6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005dfa:	ab09      	add	r3, sp, #36	; 0x24
 8005dfc:	ec49 8b10 	vmov	d0, r8, r9
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f7ff fecd 	bl	8005ba8 <__cvt>
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e12:	2b47      	cmp	r3, #71	; 0x47
 8005e14:	4680      	mov	r8, r0
 8005e16:	d108      	bne.n	8005e2a <_printf_float+0x142>
 8005e18:	1cc8      	adds	r0, r1, #3
 8005e1a:	db02      	blt.n	8005e22 <_printf_float+0x13a>
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	4299      	cmp	r1, r3
 8005e20:	dd41      	ble.n	8005ea6 <_printf_float+0x1be>
 8005e22:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e26:	fa5f fb8b 	uxtb.w	fp, fp
 8005e2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e2e:	d820      	bhi.n	8005e72 <_printf_float+0x18a>
 8005e30:	3901      	subs	r1, #1
 8005e32:	465a      	mov	r2, fp
 8005e34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e38:	9109      	str	r1, [sp, #36]	; 0x24
 8005e3a:	f7ff ff17 	bl	8005c6c <__exponent>
 8005e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e40:	1813      	adds	r3, r2, r0
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	4681      	mov	r9, r0
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	dc02      	bgt.n	8005e50 <_printf_float+0x168>
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	07d2      	lsls	r2, r2, #31
 8005e4e:	d501      	bpl.n	8005e54 <_printf_float+0x16c>
 8005e50:	3301      	adds	r3, #1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d09c      	beq.n	8005d96 <_printf_float+0xae>
 8005e5c:	232d      	movs	r3, #45	; 0x2d
 8005e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e62:	e798      	b.n	8005d96 <_printf_float+0xae>
 8005e64:	9a06      	ldr	r2, [sp, #24]
 8005e66:	2a47      	cmp	r2, #71	; 0x47
 8005e68:	d1be      	bne.n	8005de8 <_printf_float+0x100>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1bc      	bne.n	8005de8 <_printf_float+0x100>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7b9      	b.n	8005de6 <_printf_float+0xfe>
 8005e72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e76:	d118      	bne.n	8005eaa <_printf_float+0x1c2>
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	dd0b      	ble.n	8005e96 <_printf_float+0x1ae>
 8005e7e:	6121      	str	r1, [r4, #16]
 8005e80:	b913      	cbnz	r3, 8005e88 <_printf_float+0x1a0>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	07d0      	lsls	r0, r2, #31
 8005e86:	d502      	bpl.n	8005e8e <_printf_float+0x1a6>
 8005e88:	3301      	adds	r3, #1
 8005e8a:	440b      	add	r3, r1
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e90:	f04f 0900 	mov.w	r9, #0
 8005e94:	e7de      	b.n	8005e54 <_printf_float+0x16c>
 8005e96:	b913      	cbnz	r3, 8005e9e <_printf_float+0x1b6>
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	07d2      	lsls	r2, r2, #31
 8005e9c:	d501      	bpl.n	8005ea2 <_printf_float+0x1ba>
 8005e9e:	3302      	adds	r3, #2
 8005ea0:	e7f4      	b.n	8005e8c <_printf_float+0x1a4>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e7f2      	b.n	8005e8c <_printf_float+0x1a4>
 8005ea6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eac:	4299      	cmp	r1, r3
 8005eae:	db05      	blt.n	8005ebc <_printf_float+0x1d4>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6121      	str	r1, [r4, #16]
 8005eb4:	07d8      	lsls	r0, r3, #31
 8005eb6:	d5ea      	bpl.n	8005e8e <_printf_float+0x1a6>
 8005eb8:	1c4b      	adds	r3, r1, #1
 8005eba:	e7e7      	b.n	8005e8c <_printf_float+0x1a4>
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	bfd4      	ite	le
 8005ec0:	f1c1 0202 	rsble	r2, r1, #2
 8005ec4:	2201      	movgt	r2, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	e7e0      	b.n	8005e8c <_printf_float+0x1a4>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	055a      	lsls	r2, r3, #21
 8005ece:	d407      	bmi.n	8005ee0 <_printf_float+0x1f8>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	d12c      	bne.n	8005f38 <_printf_float+0x250>
 8005ede:	e764      	b.n	8005daa <_printf_float+0xc2>
 8005ee0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ee4:	f240 80e0 	bls.w	80060a8 <_printf_float+0x3c0>
 8005ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f7fa fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d034      	beq.n	8005f62 <_printf_float+0x27a>
 8005ef8:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <_printf_float+0x2f0>)
 8005efa:	2301      	movs	r3, #1
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f af51 	beq.w	8005daa <_printf_float+0xc2>
 8005f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	db02      	blt.n	8005f16 <_printf_float+0x22e>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07d8      	lsls	r0, r3, #31
 8005f14:	d510      	bpl.n	8005f38 <_printf_float+0x250>
 8005f16:	ee18 3a10 	vmov	r3, s16
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f af41 	beq.w	8005daa <_printf_float+0xc2>
 8005f28:	f04f 0800 	mov.w	r8, #0
 8005f2c:	f104 091a 	add.w	r9, r4, #26
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	4543      	cmp	r3, r8
 8005f36:	dc09      	bgt.n	8005f4c <_printf_float+0x264>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	f100 8105 	bmi.w	800614a <_printf_float+0x462>
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f44:	4298      	cmp	r0, r3
 8005f46:	bfb8      	it	lt
 8005f48:	4618      	movlt	r0, r3
 8005f4a:	e730      	b.n	8005dae <_printf_float+0xc6>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	464a      	mov	r2, r9
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af27 	beq.w	8005daa <_printf_float+0xc2>
 8005f5c:	f108 0801 	add.w	r8, r8, #1
 8005f60:	e7e6      	b.n	8005f30 <_printf_float+0x248>
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc39      	bgt.n	8005fdc <_printf_float+0x2f4>
 8005f68:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <_printf_float+0x2f0>)
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f af19 	beq.w	8005daa <_printf_float+0xc2>
 8005f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d102      	bne.n	8005f86 <_printf_float+0x29e>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	d5d8      	bpl.n	8005f38 <_printf_float+0x250>
 8005f86:	ee18 3a10 	vmov	r3, s16
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f af09 	beq.w	8005daa <_printf_float+0xc2>
 8005f98:	f04f 0900 	mov.w	r9, #0
 8005f9c:	f104 0a1a 	add.w	sl, r4, #26
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	425b      	negs	r3, r3
 8005fa4:	454b      	cmp	r3, r9
 8005fa6:	dc01      	bgt.n	8005fac <_printf_float+0x2c4>
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	e792      	b.n	8005ed2 <_printf_float+0x1ea>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4652      	mov	r2, sl
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f43f aef7 	beq.w	8005daa <_printf_float+0xc2>
 8005fbc:	f109 0901 	add.w	r9, r9, #1
 8005fc0:	e7ee      	b.n	8005fa0 <_printf_float+0x2b8>
 8005fc2:	bf00      	nop
 8005fc4:	7fefffff 	.word	0x7fefffff
 8005fc8:	080085cc 	.word	0x080085cc
 8005fcc:	080085d0 	.word	0x080085d0
 8005fd0:	080085d8 	.word	0x080085d8
 8005fd4:	080085d4 	.word	0x080085d4
 8005fd8:	080085dc 	.word	0x080085dc
 8005fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bfa8      	it	ge
 8005fe4:	461a      	movge	r2, r3
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	4691      	mov	r9, r2
 8005fea:	dc37      	bgt.n	800605c <_printf_float+0x374>
 8005fec:	f04f 0b00 	mov.w	fp, #0
 8005ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ff4:	f104 021a 	add.w	r2, r4, #26
 8005ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	eba3 0309 	sub.w	r3, r3, r9
 8006000:	455b      	cmp	r3, fp
 8006002:	dc33      	bgt.n	800606c <_printf_float+0x384>
 8006004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006008:	429a      	cmp	r2, r3
 800600a:	db3b      	blt.n	8006084 <_printf_float+0x39c>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	07da      	lsls	r2, r3, #31
 8006010:	d438      	bmi.n	8006084 <_printf_float+0x39c>
 8006012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006014:	9b05      	ldr	r3, [sp, #20]
 8006016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	eba2 0901 	sub.w	r9, r2, r1
 800601e:	4599      	cmp	r9, r3
 8006020:	bfa8      	it	ge
 8006022:	4699      	movge	r9, r3
 8006024:	f1b9 0f00 	cmp.w	r9, #0
 8006028:	dc35      	bgt.n	8006096 <_printf_float+0x3ae>
 800602a:	f04f 0800 	mov.w	r8, #0
 800602e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006032:	f104 0a1a 	add.w	sl, r4, #26
 8006036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	eba3 0309 	sub.w	r3, r3, r9
 8006040:	4543      	cmp	r3, r8
 8006042:	f77f af79 	ble.w	8005f38 <_printf_float+0x250>
 8006046:	2301      	movs	r3, #1
 8006048:	4652      	mov	r2, sl
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f aeaa 	beq.w	8005daa <_printf_float+0xc2>
 8006056:	f108 0801 	add.w	r8, r8, #1
 800605a:	e7ec      	b.n	8006036 <_printf_float+0x34e>
 800605c:	4613      	mov	r3, r2
 800605e:	4631      	mov	r1, r6
 8006060:	4642      	mov	r2, r8
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	d1c0      	bne.n	8005fec <_printf_float+0x304>
 800606a:	e69e      	b.n	8005daa <_printf_float+0xc2>
 800606c:	2301      	movs	r3, #1
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	9205      	str	r2, [sp, #20]
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f ae97 	beq.w	8005daa <_printf_float+0xc2>
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	f10b 0b01 	add.w	fp, fp, #1
 8006082:	e7b9      	b.n	8005ff8 <_printf_float+0x310>
 8006084:	ee18 3a10 	vmov	r3, s16
 8006088:	4652      	mov	r2, sl
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	d1be      	bne.n	8006012 <_printf_float+0x32a>
 8006094:	e689      	b.n	8005daa <_printf_float+0xc2>
 8006096:	9a05      	ldr	r2, [sp, #20]
 8006098:	464b      	mov	r3, r9
 800609a:	4442      	add	r2, r8
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	d1c1      	bne.n	800602a <_printf_float+0x342>
 80060a6:	e680      	b.n	8005daa <_printf_float+0xc2>
 80060a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060aa:	2a01      	cmp	r2, #1
 80060ac:	dc01      	bgt.n	80060b2 <_printf_float+0x3ca>
 80060ae:	07db      	lsls	r3, r3, #31
 80060b0:	d538      	bpl.n	8006124 <_printf_float+0x43c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4642      	mov	r2, r8
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae74 	beq.w	8005daa <_printf_float+0xc2>
 80060c2:	ee18 3a10 	vmov	r3, s16
 80060c6:	4652      	mov	r2, sl
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f ae6b 	beq.w	8005daa <_printf_float+0xc2>
 80060d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060d8:	2200      	movs	r2, #0
 80060da:	2300      	movs	r3, #0
 80060dc:	f7fa fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80060e0:	b9d8      	cbnz	r0, 800611a <_printf_float+0x432>
 80060e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e4:	f108 0201 	add.w	r2, r8, #1
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	d10e      	bne.n	8006112 <_printf_float+0x42a>
 80060f4:	e659      	b.n	8005daa <_printf_float+0xc2>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4652      	mov	r2, sl
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	f43f ae52 	beq.w	8005daa <_printf_float+0xc2>
 8006106:	f108 0801 	add.w	r8, r8, #1
 800610a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610c:	3b01      	subs	r3, #1
 800610e:	4543      	cmp	r3, r8
 8006110:	dcf1      	bgt.n	80060f6 <_printf_float+0x40e>
 8006112:	464b      	mov	r3, r9
 8006114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006118:	e6dc      	b.n	8005ed4 <_printf_float+0x1ec>
 800611a:	f04f 0800 	mov.w	r8, #0
 800611e:	f104 0a1a 	add.w	sl, r4, #26
 8006122:	e7f2      	b.n	800610a <_printf_float+0x422>
 8006124:	2301      	movs	r3, #1
 8006126:	4642      	mov	r2, r8
 8006128:	e7df      	b.n	80060ea <_printf_float+0x402>
 800612a:	2301      	movs	r3, #1
 800612c:	464a      	mov	r2, r9
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f ae38 	beq.w	8005daa <_printf_float+0xc2>
 800613a:	f108 0801 	add.w	r8, r8, #1
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	4543      	cmp	r3, r8
 8006146:	dcf0      	bgt.n	800612a <_printf_float+0x442>
 8006148:	e6fa      	b.n	8005f40 <_printf_float+0x258>
 800614a:	f04f 0800 	mov.w	r8, #0
 800614e:	f104 0919 	add.w	r9, r4, #25
 8006152:	e7f4      	b.n	800613e <_printf_float+0x456>

08006154 <_printf_common>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	4616      	mov	r6, r2
 800615a:	4699      	mov	r9, r3
 800615c:	688a      	ldr	r2, [r1, #8]
 800615e:	690b      	ldr	r3, [r1, #16]
 8006160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006164:	4293      	cmp	r3, r2
 8006166:	bfb8      	it	lt
 8006168:	4613      	movlt	r3, r2
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006170:	4607      	mov	r7, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b10a      	cbz	r2, 800617a <_printf_common+0x26>
 8006176:	3301      	adds	r3, #1
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	0699      	lsls	r1, r3, #26
 800617e:	bf42      	ittt	mi
 8006180:	6833      	ldrmi	r3, [r6, #0]
 8006182:	3302      	addmi	r3, #2
 8006184:	6033      	strmi	r3, [r6, #0]
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	f015 0506 	ands.w	r5, r5, #6
 800618c:	d106      	bne.n	800619c <_printf_common+0x48>
 800618e:	f104 0a19 	add.w	sl, r4, #25
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	6832      	ldr	r2, [r6, #0]
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	42ab      	cmp	r3, r5
 800619a:	dc26      	bgt.n	80061ea <_printf_common+0x96>
 800619c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a0:	1e13      	subs	r3, r2, #0
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	bf18      	it	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	0692      	lsls	r2, r2, #26
 80061aa:	d42b      	bmi.n	8006204 <_printf_common+0xb0>
 80061ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b0:	4649      	mov	r1, r9
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c0      	blx	r8
 80061b6:	3001      	adds	r0, #1
 80061b8:	d01e      	beq.n	80061f8 <_printf_common+0xa4>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	68e5      	ldr	r5, [r4, #12]
 80061be:	6832      	ldr	r2, [r6, #0]
 80061c0:	f003 0306 	and.w	r3, r3, #6
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	bf08      	it	eq
 80061c8:	1aad      	subeq	r5, r5, r2
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	bf0c      	ite	eq
 80061d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d4:	2500      	movne	r5, #0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bfc4      	itt	gt
 80061da:	1a9b      	subgt	r3, r3, r2
 80061dc:	18ed      	addgt	r5, r5, r3
 80061de:	2600      	movs	r6, #0
 80061e0:	341a      	adds	r4, #26
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d11a      	bne.n	800621c <_printf_common+0xc8>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e008      	b.n	80061fc <_printf_common+0xa8>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4652      	mov	r2, sl
 80061ee:	4649      	mov	r1, r9
 80061f0:	4638      	mov	r0, r7
 80061f2:	47c0      	blx	r8
 80061f4:	3001      	adds	r0, #1
 80061f6:	d103      	bne.n	8006200 <_printf_common+0xac>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	3501      	adds	r5, #1
 8006202:	e7c6      	b.n	8006192 <_printf_common+0x3e>
 8006204:	18e1      	adds	r1, r4, r3
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	2030      	movs	r0, #48	; 0x30
 800620a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800620e:	4422      	add	r2, r4
 8006210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006218:	3302      	adds	r3, #2
 800621a:	e7c7      	b.n	80061ac <_printf_common+0x58>
 800621c:	2301      	movs	r3, #1
 800621e:	4622      	mov	r2, r4
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	3001      	adds	r0, #1
 8006228:	d0e6      	beq.n	80061f8 <_printf_common+0xa4>
 800622a:	3601      	adds	r6, #1
 800622c:	e7d9      	b.n	80061e2 <_printf_common+0x8e>
	...

08006230 <_printf_i>:
 8006230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	460c      	mov	r4, r1
 8006236:	4691      	mov	r9, r2
 8006238:	7e27      	ldrb	r7, [r4, #24]
 800623a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800623c:	2f78      	cmp	r7, #120	; 0x78
 800623e:	4680      	mov	r8, r0
 8006240:	469a      	mov	sl, r3
 8006242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006246:	d807      	bhi.n	8006258 <_printf_i+0x28>
 8006248:	2f62      	cmp	r7, #98	; 0x62
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x32>
 800624c:	2f00      	cmp	r7, #0
 800624e:	f000 80d8 	beq.w	8006402 <_printf_i+0x1d2>
 8006252:	2f58      	cmp	r7, #88	; 0x58
 8006254:	f000 80a3 	beq.w	800639e <_printf_i+0x16e>
 8006258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800625c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006260:	e03a      	b.n	80062d8 <_printf_i+0xa8>
 8006262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006266:	2b15      	cmp	r3, #21
 8006268:	d8f6      	bhi.n	8006258 <_printf_i+0x28>
 800626a:	a001      	add	r0, pc, #4	; (adr r0, 8006270 <_printf_i+0x40>)
 800626c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062dd 	.word	0x080062dd
 8006278:	08006259 	.word	0x08006259
 800627c:	08006259 	.word	0x08006259
 8006280:	08006259 	.word	0x08006259
 8006284:	08006259 	.word	0x08006259
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006259 	.word	0x08006259
 8006290:	08006259 	.word	0x08006259
 8006294:	08006259 	.word	0x08006259
 8006298:	08006259 	.word	0x08006259
 800629c:	080063e9 	.word	0x080063e9
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	080063cb 	.word	0x080063cb
 80062a8:	08006259 	.word	0x08006259
 80062ac:	08006259 	.word	0x08006259
 80062b0:	0800640b 	.word	0x0800640b
 80062b4:	08006259 	.word	0x08006259
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	08006259 	.word	0x08006259
 80062c0:	08006259 	.word	0x08006259
 80062c4:	080063d3 	.word	0x080063d3
 80062c8:	680b      	ldr	r3, [r1, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	600a      	str	r2, [r1, #0]
 80062d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d8:	2301      	movs	r3, #1
 80062da:	e0a3      	b.n	8006424 <_printf_i+0x1f4>
 80062dc:	6825      	ldr	r5, [r4, #0]
 80062de:	6808      	ldr	r0, [r1, #0]
 80062e0:	062e      	lsls	r6, r5, #24
 80062e2:	f100 0304 	add.w	r3, r0, #4
 80062e6:	d50a      	bpl.n	80062fe <_printf_i+0xce>
 80062e8:	6805      	ldr	r5, [r0, #0]
 80062ea:	600b      	str	r3, [r1, #0]
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	da03      	bge.n	80062f8 <_printf_i+0xc8>
 80062f0:	232d      	movs	r3, #45	; 0x2d
 80062f2:	426d      	negs	r5, r5
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	485e      	ldr	r0, [pc, #376]	; (8006474 <_printf_i+0x244>)
 80062fa:	230a      	movs	r3, #10
 80062fc:	e019      	b.n	8006332 <_printf_i+0x102>
 80062fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006302:	6805      	ldr	r5, [r0, #0]
 8006304:	600b      	str	r3, [r1, #0]
 8006306:	bf18      	it	ne
 8006308:	b22d      	sxthne	r5, r5
 800630a:	e7ef      	b.n	80062ec <_printf_i+0xbc>
 800630c:	680b      	ldr	r3, [r1, #0]
 800630e:	6825      	ldr	r5, [r4, #0]
 8006310:	1d18      	adds	r0, r3, #4
 8006312:	6008      	str	r0, [r1, #0]
 8006314:	0628      	lsls	r0, r5, #24
 8006316:	d501      	bpl.n	800631c <_printf_i+0xec>
 8006318:	681d      	ldr	r5, [r3, #0]
 800631a:	e002      	b.n	8006322 <_printf_i+0xf2>
 800631c:	0669      	lsls	r1, r5, #25
 800631e:	d5fb      	bpl.n	8006318 <_printf_i+0xe8>
 8006320:	881d      	ldrh	r5, [r3, #0]
 8006322:	4854      	ldr	r0, [pc, #336]	; (8006474 <_printf_i+0x244>)
 8006324:	2f6f      	cmp	r7, #111	; 0x6f
 8006326:	bf0c      	ite	eq
 8006328:	2308      	moveq	r3, #8
 800632a:	230a      	movne	r3, #10
 800632c:	2100      	movs	r1, #0
 800632e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006332:	6866      	ldr	r6, [r4, #4]
 8006334:	60a6      	str	r6, [r4, #8]
 8006336:	2e00      	cmp	r6, #0
 8006338:	bfa2      	ittt	ge
 800633a:	6821      	ldrge	r1, [r4, #0]
 800633c:	f021 0104 	bicge.w	r1, r1, #4
 8006340:	6021      	strge	r1, [r4, #0]
 8006342:	b90d      	cbnz	r5, 8006348 <_printf_i+0x118>
 8006344:	2e00      	cmp	r6, #0
 8006346:	d04d      	beq.n	80063e4 <_printf_i+0x1b4>
 8006348:	4616      	mov	r6, r2
 800634a:	fbb5 f1f3 	udiv	r1, r5, r3
 800634e:	fb03 5711 	mls	r7, r3, r1, r5
 8006352:	5dc7      	ldrb	r7, [r0, r7]
 8006354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006358:	462f      	mov	r7, r5
 800635a:	42bb      	cmp	r3, r7
 800635c:	460d      	mov	r5, r1
 800635e:	d9f4      	bls.n	800634a <_printf_i+0x11a>
 8006360:	2b08      	cmp	r3, #8
 8006362:	d10b      	bne.n	800637c <_printf_i+0x14c>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	07df      	lsls	r7, r3, #31
 8006368:	d508      	bpl.n	800637c <_printf_i+0x14c>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	6861      	ldr	r1, [r4, #4]
 800636e:	4299      	cmp	r1, r3
 8006370:	bfde      	ittt	le
 8006372:	2330      	movle	r3, #48	; 0x30
 8006374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800637c:	1b92      	subs	r2, r2, r6
 800637e:	6122      	str	r2, [r4, #16]
 8006380:	f8cd a000 	str.w	sl, [sp]
 8006384:	464b      	mov	r3, r9
 8006386:	aa03      	add	r2, sp, #12
 8006388:	4621      	mov	r1, r4
 800638a:	4640      	mov	r0, r8
 800638c:	f7ff fee2 	bl	8006154 <_printf_common>
 8006390:	3001      	adds	r0, #1
 8006392:	d14c      	bne.n	800642e <_printf_i+0x1fe>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	b004      	add	sp, #16
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	4835      	ldr	r0, [pc, #212]	; (8006474 <_printf_i+0x244>)
 80063a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	680e      	ldr	r6, [r1, #0]
 80063a8:	061f      	lsls	r7, r3, #24
 80063aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80063ae:	600e      	str	r6, [r1, #0]
 80063b0:	d514      	bpl.n	80063dc <_printf_i+0x1ac>
 80063b2:	07d9      	lsls	r1, r3, #31
 80063b4:	bf44      	itt	mi
 80063b6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ba:	6023      	strmi	r3, [r4, #0]
 80063bc:	b91d      	cbnz	r5, 80063c6 <_printf_i+0x196>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	f023 0320 	bic.w	r3, r3, #32
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	2310      	movs	r3, #16
 80063c8:	e7b0      	b.n	800632c <_printf_i+0xfc>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f043 0320 	orr.w	r3, r3, #32
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	2378      	movs	r3, #120	; 0x78
 80063d4:	4828      	ldr	r0, [pc, #160]	; (8006478 <_printf_i+0x248>)
 80063d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063da:	e7e3      	b.n	80063a4 <_printf_i+0x174>
 80063dc:	065e      	lsls	r6, r3, #25
 80063de:	bf48      	it	mi
 80063e0:	b2ad      	uxthmi	r5, r5
 80063e2:	e7e6      	b.n	80063b2 <_printf_i+0x182>
 80063e4:	4616      	mov	r6, r2
 80063e6:	e7bb      	b.n	8006360 <_printf_i+0x130>
 80063e8:	680b      	ldr	r3, [r1, #0]
 80063ea:	6826      	ldr	r6, [r4, #0]
 80063ec:	6960      	ldr	r0, [r4, #20]
 80063ee:	1d1d      	adds	r5, r3, #4
 80063f0:	600d      	str	r5, [r1, #0]
 80063f2:	0635      	lsls	r5, r6, #24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0x1cc>
 80063f8:	6018      	str	r0, [r3, #0]
 80063fa:	e002      	b.n	8006402 <_printf_i+0x1d2>
 80063fc:	0671      	lsls	r1, r6, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0x1c8>
 8006400:	8018      	strh	r0, [r3, #0]
 8006402:	2300      	movs	r3, #0
 8006404:	6123      	str	r3, [r4, #16]
 8006406:	4616      	mov	r6, r2
 8006408:	e7ba      	b.n	8006380 <_printf_i+0x150>
 800640a:	680b      	ldr	r3, [r1, #0]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	600a      	str	r2, [r1, #0]
 8006410:	681e      	ldr	r6, [r3, #0]
 8006412:	6862      	ldr	r2, [r4, #4]
 8006414:	2100      	movs	r1, #0
 8006416:	4630      	mov	r0, r6
 8006418:	f7f9 fee2 	bl	80001e0 <memchr>
 800641c:	b108      	cbz	r0, 8006422 <_printf_i+0x1f2>
 800641e:	1b80      	subs	r0, r0, r6
 8006420:	6060      	str	r0, [r4, #4]
 8006422:	6863      	ldr	r3, [r4, #4]
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	2300      	movs	r3, #0
 8006428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800642c:	e7a8      	b.n	8006380 <_printf_i+0x150>
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	4632      	mov	r2, r6
 8006432:	4649      	mov	r1, r9
 8006434:	4640      	mov	r0, r8
 8006436:	47d0      	blx	sl
 8006438:	3001      	adds	r0, #1
 800643a:	d0ab      	beq.n	8006394 <_printf_i+0x164>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	079b      	lsls	r3, r3, #30
 8006440:	d413      	bmi.n	800646a <_printf_i+0x23a>
 8006442:	68e0      	ldr	r0, [r4, #12]
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	4298      	cmp	r0, r3
 8006448:	bfb8      	it	lt
 800644a:	4618      	movlt	r0, r3
 800644c:	e7a4      	b.n	8006398 <_printf_i+0x168>
 800644e:	2301      	movs	r3, #1
 8006450:	4632      	mov	r2, r6
 8006452:	4649      	mov	r1, r9
 8006454:	4640      	mov	r0, r8
 8006456:	47d0      	blx	sl
 8006458:	3001      	adds	r0, #1
 800645a:	d09b      	beq.n	8006394 <_printf_i+0x164>
 800645c:	3501      	adds	r5, #1
 800645e:	68e3      	ldr	r3, [r4, #12]
 8006460:	9903      	ldr	r1, [sp, #12]
 8006462:	1a5b      	subs	r3, r3, r1
 8006464:	42ab      	cmp	r3, r5
 8006466:	dcf2      	bgt.n	800644e <_printf_i+0x21e>
 8006468:	e7eb      	b.n	8006442 <_printf_i+0x212>
 800646a:	2500      	movs	r5, #0
 800646c:	f104 0619 	add.w	r6, r4, #25
 8006470:	e7f5      	b.n	800645e <_printf_i+0x22e>
 8006472:	bf00      	nop
 8006474:	080085de 	.word	0x080085de
 8006478:	080085ef 	.word	0x080085ef

0800647c <iprintf>:
 800647c:	b40f      	push	{r0, r1, r2, r3}
 800647e:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <iprintf+0x2c>)
 8006480:	b513      	push	{r0, r1, r4, lr}
 8006482:	681c      	ldr	r4, [r3, #0]
 8006484:	b124      	cbz	r4, 8006490 <iprintf+0x14>
 8006486:	69a3      	ldr	r3, [r4, #24]
 8006488:	b913      	cbnz	r3, 8006490 <iprintf+0x14>
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fee0 	bl	8007250 <__sinit>
 8006490:	ab05      	add	r3, sp, #20
 8006492:	9a04      	ldr	r2, [sp, #16]
 8006494:	68a1      	ldr	r1, [r4, #8]
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	4620      	mov	r0, r4
 800649a:	f001 fbf7 	bl	8007c8c <_vfiprintf_r>
 800649e:	b002      	add	sp, #8
 80064a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a4:	b004      	add	sp, #16
 80064a6:	4770      	bx	lr
 80064a8:	2000000c 	.word	0x2000000c

080064ac <quorem>:
 80064ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	6903      	ldr	r3, [r0, #16]
 80064b2:	690c      	ldr	r4, [r1, #16]
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	4607      	mov	r7, r0
 80064b8:	f2c0 8081 	blt.w	80065be <quorem+0x112>
 80064bc:	3c01      	subs	r4, #1
 80064be:	f101 0814 	add.w	r8, r1, #20
 80064c2:	f100 0514 	add.w	r5, r0, #20
 80064c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d4:	3301      	adds	r3, #1
 80064d6:	429a      	cmp	r2, r3
 80064d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064e4:	d331      	bcc.n	800654a <quorem+0x9e>
 80064e6:	f04f 0e00 	mov.w	lr, #0
 80064ea:	4640      	mov	r0, r8
 80064ec:	46ac      	mov	ip, r5
 80064ee:	46f2      	mov	sl, lr
 80064f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064f4:	b293      	uxth	r3, r2
 80064f6:	fb06 e303 	mla	r3, r6, r3, lr
 80064fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ebaa 0303 	sub.w	r3, sl, r3
 8006504:	0c12      	lsrs	r2, r2, #16
 8006506:	f8dc a000 	ldr.w	sl, [ip]
 800650a:	fb06 e202 	mla	r2, r6, r2, lr
 800650e:	fa13 f38a 	uxtah	r3, r3, sl
 8006512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006516:	fa1f fa82 	uxth.w	sl, r2
 800651a:	f8dc 2000 	ldr.w	r2, [ip]
 800651e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006522:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652c:	4581      	cmp	r9, r0
 800652e:	f84c 3b04 	str.w	r3, [ip], #4
 8006532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006536:	d2db      	bcs.n	80064f0 <quorem+0x44>
 8006538:	f855 300b 	ldr.w	r3, [r5, fp]
 800653c:	b92b      	cbnz	r3, 800654a <quorem+0x9e>
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	3b04      	subs	r3, #4
 8006542:	429d      	cmp	r5, r3
 8006544:	461a      	mov	r2, r3
 8006546:	d32e      	bcc.n	80065a6 <quorem+0xfa>
 8006548:	613c      	str	r4, [r7, #16]
 800654a:	4638      	mov	r0, r7
 800654c:	f001 f9ba 	bl	80078c4 <__mcmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	db24      	blt.n	800659e <quorem+0xf2>
 8006554:	3601      	adds	r6, #1
 8006556:	4628      	mov	r0, r5
 8006558:	f04f 0c00 	mov.w	ip, #0
 800655c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006560:	f8d0 e000 	ldr.w	lr, [r0]
 8006564:	b293      	uxth	r3, r2
 8006566:	ebac 0303 	sub.w	r3, ip, r3
 800656a:	0c12      	lsrs	r2, r2, #16
 800656c:	fa13 f38e 	uxtah	r3, r3, lr
 8006570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657e:	45c1      	cmp	r9, r8
 8006580:	f840 3b04 	str.w	r3, [r0], #4
 8006584:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006588:	d2e8      	bcs.n	800655c <quorem+0xb0>
 800658a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800658e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006592:	b922      	cbnz	r2, 800659e <quorem+0xf2>
 8006594:	3b04      	subs	r3, #4
 8006596:	429d      	cmp	r5, r3
 8006598:	461a      	mov	r2, r3
 800659a:	d30a      	bcc.n	80065b2 <quorem+0x106>
 800659c:	613c      	str	r4, [r7, #16]
 800659e:	4630      	mov	r0, r6
 80065a0:	b003      	add	sp, #12
 80065a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d1cc      	bne.n	8006548 <quorem+0x9c>
 80065ae:	3c01      	subs	r4, #1
 80065b0:	e7c7      	b.n	8006542 <quorem+0x96>
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	d1f0      	bne.n	800659c <quorem+0xf0>
 80065ba:	3c01      	subs	r4, #1
 80065bc:	e7eb      	b.n	8006596 <quorem+0xea>
 80065be:	2000      	movs	r0, #0
 80065c0:	e7ee      	b.n	80065a0 <quorem+0xf4>
 80065c2:	0000      	movs	r0, r0
 80065c4:	0000      	movs	r0, r0
	...

080065c8 <_dtoa_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	ed2d 8b02 	vpush	{d8}
 80065d0:	ec57 6b10 	vmov	r6, r7, d0
 80065d4:	b095      	sub	sp, #84	; 0x54
 80065d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065dc:	9105      	str	r1, [sp, #20]
 80065de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065e2:	4604      	mov	r4, r0
 80065e4:	9209      	str	r2, [sp, #36]	; 0x24
 80065e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065e8:	b975      	cbnz	r5, 8006608 <_dtoa_r+0x40>
 80065ea:	2010      	movs	r0, #16
 80065ec:	f000 fed6 	bl	800739c <malloc>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6260      	str	r0, [r4, #36]	; 0x24
 80065f4:	b920      	cbnz	r0, 8006600 <_dtoa_r+0x38>
 80065f6:	4bb2      	ldr	r3, [pc, #712]	; (80068c0 <_dtoa_r+0x2f8>)
 80065f8:	21ea      	movs	r1, #234	; 0xea
 80065fa:	48b2      	ldr	r0, [pc, #712]	; (80068c4 <_dtoa_r+0x2fc>)
 80065fc:	f001 fd9c 	bl	8008138 <__assert_func>
 8006600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006604:	6005      	str	r5, [r0, #0]
 8006606:	60c5      	str	r5, [r0, #12]
 8006608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660a:	6819      	ldr	r1, [r3, #0]
 800660c:	b151      	cbz	r1, 8006624 <_dtoa_r+0x5c>
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	604a      	str	r2, [r1, #4]
 8006612:	2301      	movs	r3, #1
 8006614:	4093      	lsls	r3, r2
 8006616:	608b      	str	r3, [r1, #8]
 8006618:	4620      	mov	r0, r4
 800661a:	f000 ff15 	bl	8007448 <_Bfree>
 800661e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	1e3b      	subs	r3, r7, #0
 8006626:	bfb9      	ittee	lt
 8006628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800662c:	9303      	strlt	r3, [sp, #12]
 800662e:	2300      	movge	r3, #0
 8006630:	f8c8 3000 	strge.w	r3, [r8]
 8006634:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006638:	4ba3      	ldr	r3, [pc, #652]	; (80068c8 <_dtoa_r+0x300>)
 800663a:	bfbc      	itt	lt
 800663c:	2201      	movlt	r2, #1
 800663e:	f8c8 2000 	strlt.w	r2, [r8]
 8006642:	ea33 0309 	bics.w	r3, r3, r9
 8006646:	d11b      	bne.n	8006680 <_dtoa_r+0xb8>
 8006648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800664a:	f242 730f 	movw	r3, #9999	; 0x270f
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006654:	4333      	orrs	r3, r6
 8006656:	f000 857a 	beq.w	800714e <_dtoa_r+0xb86>
 800665a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800665c:	b963      	cbnz	r3, 8006678 <_dtoa_r+0xb0>
 800665e:	4b9b      	ldr	r3, [pc, #620]	; (80068cc <_dtoa_r+0x304>)
 8006660:	e024      	b.n	80066ac <_dtoa_r+0xe4>
 8006662:	4b9b      	ldr	r3, [pc, #620]	; (80068d0 <_dtoa_r+0x308>)
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	9800      	ldr	r0, [sp, #0]
 800666e:	b015      	add	sp, #84	; 0x54
 8006670:	ecbd 8b02 	vpop	{d8}
 8006674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006678:	4b94      	ldr	r3, [pc, #592]	; (80068cc <_dtoa_r+0x304>)
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	3303      	adds	r3, #3
 800667e:	e7f3      	b.n	8006668 <_dtoa_r+0xa0>
 8006680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	ec51 0b17 	vmov	r0, r1, d7
 800668a:	2300      	movs	r3, #0
 800668c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006690:	f7fa fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006694:	4680      	mov	r8, r0
 8006696:	b158      	cbz	r0, 80066b0 <_dtoa_r+0xe8>
 8006698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800669a:	2301      	movs	r3, #1
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8551 	beq.w	8007148 <_dtoa_r+0xb80>
 80066a6:	488b      	ldr	r0, [pc, #556]	; (80068d4 <_dtoa_r+0x30c>)
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	1e43      	subs	r3, r0, #1
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	e7dd      	b.n	800666c <_dtoa_r+0xa4>
 80066b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80066b4:	aa12      	add	r2, sp, #72	; 0x48
 80066b6:	a913      	add	r1, sp, #76	; 0x4c
 80066b8:	4620      	mov	r0, r4
 80066ba:	f001 f9a7 	bl	8007a0c <__d2b>
 80066be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066c2:	4683      	mov	fp, r0
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	d07c      	beq.n	80067c2 <_dtoa_r+0x1fa>
 80066c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80066ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80066d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066e2:	4b7d      	ldr	r3, [pc, #500]	; (80068d8 <_dtoa_r+0x310>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7f9 fdcd 	bl	8000288 <__aeabi_dsub>
 80066ee:	a36e      	add	r3, pc, #440	; (adr r3, 80068a8 <_dtoa_r+0x2e0>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	a36d      	add	r3, pc, #436	; (adr r3, 80068b0 <_dtoa_r+0x2e8>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 fdc5 	bl	800028c <__adddf3>
 8006702:	4606      	mov	r6, r0
 8006704:	4628      	mov	r0, r5
 8006706:	460f      	mov	r7, r1
 8006708:	f7f9 ff0c 	bl	8000524 <__aeabi_i2d>
 800670c:	a36a      	add	r3, pc, #424	; (adr r3, 80068b8 <_dtoa_r+0x2f0>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 ff71 	bl	80005f8 <__aeabi_dmul>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4630      	mov	r0, r6
 800671c:	4639      	mov	r1, r7
 800671e:	f7f9 fdb5 	bl	800028c <__adddf3>
 8006722:	4606      	mov	r6, r0
 8006724:	460f      	mov	r7, r1
 8006726:	f7fa fa17 	bl	8000b58 <__aeabi_d2iz>
 800672a:	2200      	movs	r2, #0
 800672c:	4682      	mov	sl, r0
 800672e:	2300      	movs	r3, #0
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f7fa f9d2 	bl	8000adc <__aeabi_dcmplt>
 8006738:	b148      	cbz	r0, 800674e <_dtoa_r+0x186>
 800673a:	4650      	mov	r0, sl
 800673c:	f7f9 fef2 	bl	8000524 <__aeabi_i2d>
 8006740:	4632      	mov	r2, r6
 8006742:	463b      	mov	r3, r7
 8006744:	f7fa f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006748:	b908      	cbnz	r0, 800674e <_dtoa_r+0x186>
 800674a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800674e:	f1ba 0f16 	cmp.w	sl, #22
 8006752:	d854      	bhi.n	80067fe <_dtoa_r+0x236>
 8006754:	4b61      	ldr	r3, [pc, #388]	; (80068dc <_dtoa_r+0x314>)
 8006756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006762:	f7fa f9bb 	bl	8000adc <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d04b      	beq.n	8006802 <_dtoa_r+0x23a>
 800676a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800676e:	2300      	movs	r3, #0
 8006770:	930e      	str	r3, [sp, #56]	; 0x38
 8006772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006774:	1b5d      	subs	r5, r3, r5
 8006776:	1e6b      	subs	r3, r5, #1
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	bf43      	ittte	mi
 800677c:	2300      	movmi	r3, #0
 800677e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006782:	9304      	strmi	r3, [sp, #16]
 8006784:	f04f 0800 	movpl.w	r8, #0
 8006788:	f1ba 0f00 	cmp.w	sl, #0
 800678c:	db3b      	blt.n	8006806 <_dtoa_r+0x23e>
 800678e:	9b04      	ldr	r3, [sp, #16]
 8006790:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006794:	4453      	add	r3, sl
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	2300      	movs	r3, #0
 800679a:	9306      	str	r3, [sp, #24]
 800679c:	9b05      	ldr	r3, [sp, #20]
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d869      	bhi.n	8006876 <_dtoa_r+0x2ae>
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	bfc4      	itt	gt
 80067a6:	3b04      	subgt	r3, #4
 80067a8:	9305      	strgt	r3, [sp, #20]
 80067aa:	9b05      	ldr	r3, [sp, #20]
 80067ac:	f1a3 0302 	sub.w	r3, r3, #2
 80067b0:	bfcc      	ite	gt
 80067b2:	2500      	movgt	r5, #0
 80067b4:	2501      	movle	r5, #1
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d869      	bhi.n	800688e <_dtoa_r+0x2c6>
 80067ba:	e8df f003 	tbb	[pc, r3]
 80067be:	4e2c      	.short	0x4e2c
 80067c0:	5a4c      	.short	0x5a4c
 80067c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067c6:	441d      	add	r5, r3
 80067c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	bfc1      	itttt	gt
 80067d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80067dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067e0:	bfda      	itte	le
 80067e2:	f1c3 0320 	rsble	r3, r3, #32
 80067e6:	fa06 f003 	lslle.w	r0, r6, r3
 80067ea:	4318      	orrgt	r0, r3
 80067ec:	f7f9 fe8a 	bl	8000504 <__aeabi_ui2d>
 80067f0:	2301      	movs	r3, #1
 80067f2:	4606      	mov	r6, r0
 80067f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067f8:	3d01      	subs	r5, #1
 80067fa:	9310      	str	r3, [sp, #64]	; 0x40
 80067fc:	e771      	b.n	80066e2 <_dtoa_r+0x11a>
 80067fe:	2301      	movs	r3, #1
 8006800:	e7b6      	b.n	8006770 <_dtoa_r+0x1a8>
 8006802:	900e      	str	r0, [sp, #56]	; 0x38
 8006804:	e7b5      	b.n	8006772 <_dtoa_r+0x1aa>
 8006806:	f1ca 0300 	rsb	r3, sl, #0
 800680a:	9306      	str	r3, [sp, #24]
 800680c:	2300      	movs	r3, #0
 800680e:	eba8 080a 	sub.w	r8, r8, sl
 8006812:	930d      	str	r3, [sp, #52]	; 0x34
 8006814:	e7c2      	b.n	800679c <_dtoa_r+0x1d4>
 8006816:	2300      	movs	r3, #0
 8006818:	9308      	str	r3, [sp, #32]
 800681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc39      	bgt.n	8006894 <_dtoa_r+0x2cc>
 8006820:	f04f 0901 	mov.w	r9, #1
 8006824:	f8cd 9004 	str.w	r9, [sp, #4]
 8006828:	464b      	mov	r3, r9
 800682a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800682e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006830:	2200      	movs	r2, #0
 8006832:	6042      	str	r2, [r0, #4]
 8006834:	2204      	movs	r2, #4
 8006836:	f102 0614 	add.w	r6, r2, #20
 800683a:	429e      	cmp	r6, r3
 800683c:	6841      	ldr	r1, [r0, #4]
 800683e:	d92f      	bls.n	80068a0 <_dtoa_r+0x2d8>
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fdc1 	bl	80073c8 <_Balloc>
 8006846:	9000      	str	r0, [sp, #0]
 8006848:	2800      	cmp	r0, #0
 800684a:	d14b      	bne.n	80068e4 <_dtoa_r+0x31c>
 800684c:	4b24      	ldr	r3, [pc, #144]	; (80068e0 <_dtoa_r+0x318>)
 800684e:	4602      	mov	r2, r0
 8006850:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006854:	e6d1      	b.n	80065fa <_dtoa_r+0x32>
 8006856:	2301      	movs	r3, #1
 8006858:	e7de      	b.n	8006818 <_dtoa_r+0x250>
 800685a:	2300      	movs	r3, #0
 800685c:	9308      	str	r3, [sp, #32]
 800685e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006860:	eb0a 0903 	add.w	r9, sl, r3
 8006864:	f109 0301 	add.w	r3, r9, #1
 8006868:	2b01      	cmp	r3, #1
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	bfb8      	it	lt
 800686e:	2301      	movlt	r3, #1
 8006870:	e7dd      	b.n	800682e <_dtoa_r+0x266>
 8006872:	2301      	movs	r3, #1
 8006874:	e7f2      	b.n	800685c <_dtoa_r+0x294>
 8006876:	2501      	movs	r5, #1
 8006878:	2300      	movs	r3, #0
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	9508      	str	r5, [sp, #32]
 800687e:	f04f 39ff 	mov.w	r9, #4294967295
 8006882:	2200      	movs	r2, #0
 8006884:	f8cd 9004 	str.w	r9, [sp, #4]
 8006888:	2312      	movs	r3, #18
 800688a:	9209      	str	r2, [sp, #36]	; 0x24
 800688c:	e7cf      	b.n	800682e <_dtoa_r+0x266>
 800688e:	2301      	movs	r3, #1
 8006890:	9308      	str	r3, [sp, #32]
 8006892:	e7f4      	b.n	800687e <_dtoa_r+0x2b6>
 8006894:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006898:	f8cd 9004 	str.w	r9, [sp, #4]
 800689c:	464b      	mov	r3, r9
 800689e:	e7c6      	b.n	800682e <_dtoa_r+0x266>
 80068a0:	3101      	adds	r1, #1
 80068a2:	6041      	str	r1, [r0, #4]
 80068a4:	0052      	lsls	r2, r2, #1
 80068a6:	e7c6      	b.n	8006836 <_dtoa_r+0x26e>
 80068a8:	636f4361 	.word	0x636f4361
 80068ac:	3fd287a7 	.word	0x3fd287a7
 80068b0:	8b60c8b3 	.word	0x8b60c8b3
 80068b4:	3fc68a28 	.word	0x3fc68a28
 80068b8:	509f79fb 	.word	0x509f79fb
 80068bc:	3fd34413 	.word	0x3fd34413
 80068c0:	0800860d 	.word	0x0800860d
 80068c4:	08008624 	.word	0x08008624
 80068c8:	7ff00000 	.word	0x7ff00000
 80068cc:	08008609 	.word	0x08008609
 80068d0:	08008600 	.word	0x08008600
 80068d4:	080085dd 	.word	0x080085dd
 80068d8:	3ff80000 	.word	0x3ff80000
 80068dc:	08008780 	.word	0x08008780
 80068e0:	08008683 	.word	0x08008683
 80068e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e6:	9a00      	ldr	r2, [sp, #0]
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	9b01      	ldr	r3, [sp, #4]
 80068ec:	2b0e      	cmp	r3, #14
 80068ee:	f200 80ad 	bhi.w	8006a4c <_dtoa_r+0x484>
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	f000 80aa 	beq.w	8006a4c <_dtoa_r+0x484>
 80068f8:	f1ba 0f00 	cmp.w	sl, #0
 80068fc:	dd36      	ble.n	800696c <_dtoa_r+0x3a4>
 80068fe:	4ac3      	ldr	r2, [pc, #780]	; (8006c0c <_dtoa_r+0x644>)
 8006900:	f00a 030f 	and.w	r3, sl, #15
 8006904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006908:	ed93 7b00 	vldr	d7, [r3]
 800690c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006910:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006914:	eeb0 8a47 	vmov.f32	s16, s14
 8006918:	eef0 8a67 	vmov.f32	s17, s15
 800691c:	d016      	beq.n	800694c <_dtoa_r+0x384>
 800691e:	4bbc      	ldr	r3, [pc, #752]	; (8006c10 <_dtoa_r+0x648>)
 8006920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006928:	f7f9 ff90 	bl	800084c <__aeabi_ddiv>
 800692c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006930:	f007 070f 	and.w	r7, r7, #15
 8006934:	2503      	movs	r5, #3
 8006936:	4eb6      	ldr	r6, [pc, #728]	; (8006c10 <_dtoa_r+0x648>)
 8006938:	b957      	cbnz	r7, 8006950 <_dtoa_r+0x388>
 800693a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693e:	ec53 2b18 	vmov	r2, r3, d8
 8006942:	f7f9 ff83 	bl	800084c <__aeabi_ddiv>
 8006946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800694a:	e029      	b.n	80069a0 <_dtoa_r+0x3d8>
 800694c:	2502      	movs	r5, #2
 800694e:	e7f2      	b.n	8006936 <_dtoa_r+0x36e>
 8006950:	07f9      	lsls	r1, r7, #31
 8006952:	d508      	bpl.n	8006966 <_dtoa_r+0x39e>
 8006954:	ec51 0b18 	vmov	r0, r1, d8
 8006958:	e9d6 2300 	ldrd	r2, r3, [r6]
 800695c:	f7f9 fe4c 	bl	80005f8 <__aeabi_dmul>
 8006960:	ec41 0b18 	vmov	d8, r0, r1
 8006964:	3501      	adds	r5, #1
 8006966:	107f      	asrs	r7, r7, #1
 8006968:	3608      	adds	r6, #8
 800696a:	e7e5      	b.n	8006938 <_dtoa_r+0x370>
 800696c:	f000 80a6 	beq.w	8006abc <_dtoa_r+0x4f4>
 8006970:	f1ca 0600 	rsb	r6, sl, #0
 8006974:	4ba5      	ldr	r3, [pc, #660]	; (8006c0c <_dtoa_r+0x644>)
 8006976:	4fa6      	ldr	r7, [pc, #664]	; (8006c10 <_dtoa_r+0x648>)
 8006978:	f006 020f 	and.w	r2, r6, #15
 800697c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006988:	f7f9 fe36 	bl	80005f8 <__aeabi_dmul>
 800698c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006990:	1136      	asrs	r6, r6, #4
 8006992:	2300      	movs	r3, #0
 8006994:	2502      	movs	r5, #2
 8006996:	2e00      	cmp	r6, #0
 8006998:	f040 8085 	bne.w	8006aa6 <_dtoa_r+0x4de>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1d2      	bne.n	8006946 <_dtoa_r+0x37e>
 80069a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 808c 	beq.w	8006ac0 <_dtoa_r+0x4f8>
 80069a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069ac:	4b99      	ldr	r3, [pc, #612]	; (8006c14 <_dtoa_r+0x64c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7fa f892 	bl	8000adc <__aeabi_dcmplt>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f000 8081 	beq.w	8006ac0 <_dtoa_r+0x4f8>
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d07d      	beq.n	8006ac0 <_dtoa_r+0x4f8>
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	dd3c      	ble.n	8006a44 <_dtoa_r+0x47c>
 80069ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	2200      	movs	r2, #0
 80069d2:	4b91      	ldr	r3, [pc, #580]	; (8006c18 <_dtoa_r+0x650>)
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e0:	3501      	adds	r5, #1
 80069e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80069e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069ea:	4628      	mov	r0, r5
 80069ec:	f7f9 fd9a 	bl	8000524 <__aeabi_i2d>
 80069f0:	4632      	mov	r2, r6
 80069f2:	463b      	mov	r3, r7
 80069f4:	f7f9 fe00 	bl	80005f8 <__aeabi_dmul>
 80069f8:	4b88      	ldr	r3, [pc, #544]	; (8006c1c <_dtoa_r+0x654>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	f7f9 fc46 	bl	800028c <__adddf3>
 8006a00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a08:	9303      	str	r3, [sp, #12]
 8006a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d15c      	bne.n	8006aca <_dtoa_r+0x502>
 8006a10:	4b83      	ldr	r3, [pc, #524]	; (8006c20 <_dtoa_r+0x658>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	4630      	mov	r0, r6
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7f9 fc36 	bl	8000288 <__aeabi_dsub>
 8006a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a20:	4606      	mov	r6, r0
 8006a22:	460f      	mov	r7, r1
 8006a24:	f7fa f878 	bl	8000b18 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f040 8296 	bne.w	8006f5a <_dtoa_r+0x992>
 8006a2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a32:	4630      	mov	r0, r6
 8006a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7fa f84f 	bl	8000adc <__aeabi_dcmplt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f040 8288 	bne.w	8006f54 <_dtoa_r+0x98c>
 8006a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f2c0 8158 	blt.w	8006d04 <_dtoa_r+0x73c>
 8006a54:	f1ba 0f0e 	cmp.w	sl, #14
 8006a58:	f300 8154 	bgt.w	8006d04 <_dtoa_r+0x73c>
 8006a5c:	4b6b      	ldr	r3, [pc, #428]	; (8006c0c <_dtoa_r+0x644>)
 8006a5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f280 80e3 	bge.w	8006c34 <_dtoa_r+0x66c>
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f300 80df 	bgt.w	8006c34 <_dtoa_r+0x66c>
 8006a76:	f040 826d 	bne.w	8006f54 <_dtoa_r+0x98c>
 8006a7a:	4b69      	ldr	r3, [pc, #420]	; (8006c20 <_dtoa_r+0x658>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4640      	mov	r0, r8
 8006a80:	4649      	mov	r1, r9
 8006a82:	f7f9 fdb9 	bl	80005f8 <__aeabi_dmul>
 8006a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a8a:	f7fa f83b 	bl	8000b04 <__aeabi_dcmpge>
 8006a8e:	9e01      	ldr	r6, [sp, #4]
 8006a90:	4637      	mov	r7, r6
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 8243 	bne.w	8006f1e <_dtoa_r+0x956>
 8006a98:	9d00      	ldr	r5, [sp, #0]
 8006a9a:	2331      	movs	r3, #49	; 0x31
 8006a9c:	f805 3b01 	strb.w	r3, [r5], #1
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	e23f      	b.n	8006f26 <_dtoa_r+0x95e>
 8006aa6:	07f2      	lsls	r2, r6, #31
 8006aa8:	d505      	bpl.n	8006ab6 <_dtoa_r+0x4ee>
 8006aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aae:	f7f9 fda3 	bl	80005f8 <__aeabi_dmul>
 8006ab2:	3501      	adds	r5, #1
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	1076      	asrs	r6, r6, #1
 8006ab8:	3708      	adds	r7, #8
 8006aba:	e76c      	b.n	8006996 <_dtoa_r+0x3ce>
 8006abc:	2502      	movs	r5, #2
 8006abe:	e76f      	b.n	80069a0 <_dtoa_r+0x3d8>
 8006ac0:	9b01      	ldr	r3, [sp, #4]
 8006ac2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac8:	e78d      	b.n	80069e6 <_dtoa_r+0x41e>
 8006aca:	9900      	ldr	r1, [sp, #0]
 8006acc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ad0:	4b4e      	ldr	r3, [pc, #312]	; (8006c0c <_dtoa_r+0x644>)
 8006ad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ad6:	4401      	add	r1, r0
 8006ad8:	9102      	str	r1, [sp, #8]
 8006ada:	9908      	ldr	r1, [sp, #32]
 8006adc:	eeb0 8a47 	vmov.f32	s16, s14
 8006ae0:	eef0 8a67 	vmov.f32	s17, s15
 8006ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aec:	2900      	cmp	r1, #0
 8006aee:	d045      	beq.n	8006b7c <_dtoa_r+0x5b4>
 8006af0:	494c      	ldr	r1, [pc, #304]	; (8006c24 <_dtoa_r+0x65c>)
 8006af2:	2000      	movs	r0, #0
 8006af4:	f7f9 feaa 	bl	800084c <__aeabi_ddiv>
 8006af8:	ec53 2b18 	vmov	r2, r3, d8
 8006afc:	f7f9 fbc4 	bl	8000288 <__aeabi_dsub>
 8006b00:	9d00      	ldr	r5, [sp, #0]
 8006b02:	ec41 0b18 	vmov	d8, r0, r1
 8006b06:	4639      	mov	r1, r7
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7fa f825 	bl	8000b58 <__aeabi_d2iz>
 8006b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8006b10:	f7f9 fd08 	bl	8000524 <__aeabi_i2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fbb4 	bl	8000288 <__aeabi_dsub>
 8006b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b22:	3330      	adds	r3, #48	; 0x30
 8006b24:	f805 3b01 	strb.w	r3, [r5], #1
 8006b28:	ec53 2b18 	vmov	r2, r3, d8
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	460f      	mov	r7, r1
 8006b30:	f7f9 ffd4 	bl	8000adc <__aeabi_dcmplt>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d165      	bne.n	8006c04 <_dtoa_r+0x63c>
 8006b38:	4632      	mov	r2, r6
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	4935      	ldr	r1, [pc, #212]	; (8006c14 <_dtoa_r+0x64c>)
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f7f9 fba2 	bl	8000288 <__aeabi_dsub>
 8006b44:	ec53 2b18 	vmov	r2, r3, d8
 8006b48:	f7f9 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	f040 80b9 	bne.w	8006cc4 <_dtoa_r+0x6fc>
 8006b52:	9b02      	ldr	r3, [sp, #8]
 8006b54:	429d      	cmp	r5, r3
 8006b56:	f43f af75 	beq.w	8006a44 <_dtoa_r+0x47c>
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <_dtoa_r+0x650>)
 8006b5c:	ec51 0b18 	vmov	r0, r1, d8
 8006b60:	2200      	movs	r2, #0
 8006b62:	f7f9 fd49 	bl	80005f8 <__aeabi_dmul>
 8006b66:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <_dtoa_r+0x650>)
 8006b68:	ec41 0b18 	vmov	d8, r0, r1
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4630      	mov	r0, r6
 8006b70:	4639      	mov	r1, r7
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	e7c4      	b.n	8006b06 <_dtoa_r+0x53e>
 8006b7c:	ec51 0b17 	vmov	r0, r1, d7
 8006b80:	f7f9 fd3a 	bl	80005f8 <__aeabi_dmul>
 8006b84:	9b02      	ldr	r3, [sp, #8]
 8006b86:	9d00      	ldr	r5, [sp, #0]
 8006b88:	930c      	str	r3, [sp, #48]	; 0x30
 8006b8a:	ec41 0b18 	vmov	d8, r0, r1
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7f9 ffe1 	bl	8000b58 <__aeabi_d2iz>
 8006b96:	9011      	str	r0, [sp, #68]	; 0x44
 8006b98:	f7f9 fcc4 	bl	8000524 <__aeabi_i2d>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 fb70 	bl	8000288 <__aeabi_dsub>
 8006ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006baa:	3330      	adds	r3, #48	; 0x30
 8006bac:	f805 3b01 	strb.w	r3, [r5], #1
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	429d      	cmp	r5, r3
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	460f      	mov	r7, r1
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	d134      	bne.n	8006c28 <_dtoa_r+0x660>
 8006bbe:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <_dtoa_r+0x65c>)
 8006bc0:	ec51 0b18 	vmov	r0, r1, d8
 8006bc4:	f7f9 fb62 	bl	800028c <__adddf3>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d175      	bne.n	8006cc4 <_dtoa_r+0x6fc>
 8006bd8:	ec53 2b18 	vmov	r2, r3, d8
 8006bdc:	4911      	ldr	r1, [pc, #68]	; (8006c24 <_dtoa_r+0x65c>)
 8006bde:	2000      	movs	r0, #0
 8006be0:	f7f9 fb52 	bl	8000288 <__aeabi_dsub>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4630      	mov	r0, r6
 8006bea:	4639      	mov	r1, r7
 8006bec:	f7f9 ff76 	bl	8000adc <__aeabi_dcmplt>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f43f af27 	beq.w	8006a44 <_dtoa_r+0x47c>
 8006bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf8:	1e6b      	subs	r3, r5, #1
 8006bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8006bfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d0f8      	beq.n	8006bf6 <_dtoa_r+0x62e>
 8006c04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c08:	e04a      	b.n	8006ca0 <_dtoa_r+0x6d8>
 8006c0a:	bf00      	nop
 8006c0c:	08008780 	.word	0x08008780
 8006c10:	08008758 	.word	0x08008758
 8006c14:	3ff00000 	.word	0x3ff00000
 8006c18:	40240000 	.word	0x40240000
 8006c1c:	401c0000 	.word	0x401c0000
 8006c20:	40140000 	.word	0x40140000
 8006c24:	3fe00000 	.word	0x3fe00000
 8006c28:	4baf      	ldr	r3, [pc, #700]	; (8006ee8 <_dtoa_r+0x920>)
 8006c2a:	f7f9 fce5 	bl	80005f8 <__aeabi_dmul>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460f      	mov	r7, r1
 8006c32:	e7ac      	b.n	8006b8e <_dtoa_r+0x5c6>
 8006c34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c38:	9d00      	ldr	r5, [sp, #0]
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4630      	mov	r0, r6
 8006c40:	4639      	mov	r1, r7
 8006c42:	f7f9 fe03 	bl	800084c <__aeabi_ddiv>
 8006c46:	f7f9 ff87 	bl	8000b58 <__aeabi_d2iz>
 8006c4a:	9002      	str	r0, [sp, #8]
 8006c4c:	f7f9 fc6a 	bl	8000524 <__aeabi_i2d>
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	f7f9 fcd0 	bl	80005f8 <__aeabi_dmul>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 fb12 	bl	8000288 <__aeabi_dsub>
 8006c64:	9e02      	ldr	r6, [sp, #8]
 8006c66:	9f01      	ldr	r7, [sp, #4]
 8006c68:	3630      	adds	r6, #48	; 0x30
 8006c6a:	f805 6b01 	strb.w	r6, [r5], #1
 8006c6e:	9e00      	ldr	r6, [sp, #0]
 8006c70:	1bae      	subs	r6, r5, r6
 8006c72:	42b7      	cmp	r7, r6
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	d137      	bne.n	8006cea <_dtoa_r+0x722>
 8006c7a:	f7f9 fb07 	bl	800028c <__adddf3>
 8006c7e:	4642      	mov	r2, r8
 8006c80:	464b      	mov	r3, r9
 8006c82:	4606      	mov	r6, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	f7f9 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8006c8a:	b9c8      	cbnz	r0, 8006cc0 <_dtoa_r+0x6f8>
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c98:	b110      	cbz	r0, 8006ca0 <_dtoa_r+0x6d8>
 8006c9a:	9b02      	ldr	r3, [sp, #8]
 8006c9c:	07d9      	lsls	r1, r3, #31
 8006c9e:	d40f      	bmi.n	8006cc0 <_dtoa_r+0x6f8>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	f000 fbd0 	bl	8007448 <_Bfree>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	702b      	strb	r3, [r5, #0]
 8006cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cae:	f10a 0001 	add.w	r0, sl, #1
 8006cb2:	6018      	str	r0, [r3, #0]
 8006cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f43f acd8 	beq.w	800666c <_dtoa_r+0xa4>
 8006cbc:	601d      	str	r5, [r3, #0]
 8006cbe:	e4d5      	b.n	800666c <_dtoa_r+0xa4>
 8006cc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ccc:	2a39      	cmp	r2, #57	; 0x39
 8006cce:	d108      	bne.n	8006ce2 <_dtoa_r+0x71a>
 8006cd0:	9a00      	ldr	r2, [sp, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d1f7      	bne.n	8006cc6 <_dtoa_r+0x6fe>
 8006cd6:	9a07      	ldr	r2, [sp, #28]
 8006cd8:	9900      	ldr	r1, [sp, #0]
 8006cda:	3201      	adds	r2, #1
 8006cdc:	9207      	str	r2, [sp, #28]
 8006cde:	2230      	movs	r2, #48	; 0x30
 8006ce0:	700a      	strb	r2, [r1, #0]
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e78c      	b.n	8006c04 <_dtoa_r+0x63c>
 8006cea:	4b7f      	ldr	r3, [pc, #508]	; (8006ee8 <_dtoa_r+0x920>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	f7f9 fc83 	bl	80005f8 <__aeabi_dmul>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	f7f9 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d09b      	beq.n	8006c3a <_dtoa_r+0x672>
 8006d02:	e7cd      	b.n	8006ca0 <_dtoa_r+0x6d8>
 8006d04:	9a08      	ldr	r2, [sp, #32]
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	f000 80c4 	beq.w	8006e94 <_dtoa_r+0x8cc>
 8006d0c:	9a05      	ldr	r2, [sp, #20]
 8006d0e:	2a01      	cmp	r2, #1
 8006d10:	f300 80a8 	bgt.w	8006e64 <_dtoa_r+0x89c>
 8006d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	f000 80a0 	beq.w	8006e5c <_dtoa_r+0x894>
 8006d1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d20:	9e06      	ldr	r6, [sp, #24]
 8006d22:	4645      	mov	r5, r8
 8006d24:	9a04      	ldr	r2, [sp, #16]
 8006d26:	2101      	movs	r1, #1
 8006d28:	441a      	add	r2, r3
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4498      	add	r8, r3
 8006d2e:	9204      	str	r2, [sp, #16]
 8006d30:	f000 fc46 	bl	80075c0 <__i2b>
 8006d34:	4607      	mov	r7, r0
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	dd0b      	ble.n	8006d52 <_dtoa_r+0x78a>
 8006d3a:	9b04      	ldr	r3, [sp, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd08      	ble.n	8006d52 <_dtoa_r+0x78a>
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	9a04      	ldr	r2, [sp, #16]
 8006d44:	bfa8      	it	ge
 8006d46:	462b      	movge	r3, r5
 8006d48:	eba8 0803 	sub.w	r8, r8, r3
 8006d4c:	1aed      	subs	r5, r5, r3
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	b1fb      	cbz	r3, 8006d96 <_dtoa_r+0x7ce>
 8006d56:	9b08      	ldr	r3, [sp, #32]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 809f 	beq.w	8006e9c <_dtoa_r+0x8d4>
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	dd11      	ble.n	8006d86 <_dtoa_r+0x7be>
 8006d62:	4639      	mov	r1, r7
 8006d64:	4632      	mov	r2, r6
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 fce6 	bl	8007738 <__pow5mult>
 8006d6c:	465a      	mov	r2, fp
 8006d6e:	4601      	mov	r1, r0
 8006d70:	4607      	mov	r7, r0
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fc3a 	bl	80075ec <__multiply>
 8006d78:	4659      	mov	r1, fp
 8006d7a:	9007      	str	r0, [sp, #28]
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fb63 	bl	8007448 <_Bfree>
 8006d82:	9b07      	ldr	r3, [sp, #28]
 8006d84:	469b      	mov	fp, r3
 8006d86:	9b06      	ldr	r3, [sp, #24]
 8006d88:	1b9a      	subs	r2, r3, r6
 8006d8a:	d004      	beq.n	8006d96 <_dtoa_r+0x7ce>
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 fcd2 	bl	8007738 <__pow5mult>
 8006d94:	4683      	mov	fp, r0
 8006d96:	2101      	movs	r1, #1
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fc11 	bl	80075c0 <__i2b>
 8006d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	4606      	mov	r6, r0
 8006da4:	dd7c      	ble.n	8006ea0 <_dtoa_r+0x8d8>
 8006da6:	461a      	mov	r2, r3
 8006da8:	4601      	mov	r1, r0
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fcc4 	bl	8007738 <__pow5mult>
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	4606      	mov	r6, r0
 8006db6:	dd76      	ble.n	8006ea6 <_dtoa_r+0x8de>
 8006db8:	2300      	movs	r3, #0
 8006dba:	9306      	str	r3, [sp, #24]
 8006dbc:	6933      	ldr	r3, [r6, #16]
 8006dbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dc2:	6918      	ldr	r0, [r3, #16]
 8006dc4:	f000 fbac 	bl	8007520 <__hi0bits>
 8006dc8:	f1c0 0020 	rsb	r0, r0, #32
 8006dcc:	9b04      	ldr	r3, [sp, #16]
 8006dce:	4418      	add	r0, r3
 8006dd0:	f010 001f 	ands.w	r0, r0, #31
 8006dd4:	f000 8086 	beq.w	8006ee4 <_dtoa_r+0x91c>
 8006dd8:	f1c0 0320 	rsb	r3, r0, #32
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	dd7f      	ble.n	8006ee0 <_dtoa_r+0x918>
 8006de0:	f1c0 001c 	rsb	r0, r0, #28
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	4403      	add	r3, r0
 8006de8:	4480      	add	r8, r0
 8006dea:	4405      	add	r5, r0
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	f1b8 0f00 	cmp.w	r8, #0
 8006df2:	dd05      	ble.n	8006e00 <_dtoa_r+0x838>
 8006df4:	4659      	mov	r1, fp
 8006df6:	4642      	mov	r2, r8
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fcf7 	bl	80077ec <__lshift>
 8006dfe:	4683      	mov	fp, r0
 8006e00:	9b04      	ldr	r3, [sp, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dd05      	ble.n	8006e12 <_dtoa_r+0x84a>
 8006e06:	4631      	mov	r1, r6
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 fcee 	bl	80077ec <__lshift>
 8006e10:	4606      	mov	r6, r0
 8006e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d069      	beq.n	8006eec <_dtoa_r+0x924>
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fd52 	bl	80078c4 <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	da63      	bge.n	8006eec <_dtoa_r+0x924>
 8006e24:	2300      	movs	r3, #0
 8006e26:	4659      	mov	r1, fp
 8006e28:	220a      	movs	r2, #10
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fb2e 	bl	800748c <__multadd>
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e36:	4683      	mov	fp, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 818f 	beq.w	800715c <_dtoa_r+0xb94>
 8006e3e:	4639      	mov	r1, r7
 8006e40:	2300      	movs	r3, #0
 8006e42:	220a      	movs	r2, #10
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fb21 	bl	800748c <__multadd>
 8006e4a:	f1b9 0f00 	cmp.w	r9, #0
 8006e4e:	4607      	mov	r7, r0
 8006e50:	f300 808e 	bgt.w	8006f70 <_dtoa_r+0x9a8>
 8006e54:	9b05      	ldr	r3, [sp, #20]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	dc50      	bgt.n	8006efc <_dtoa_r+0x934>
 8006e5a:	e089      	b.n	8006f70 <_dtoa_r+0x9a8>
 8006e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e62:	e75d      	b.n	8006d20 <_dtoa_r+0x758>
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	1e5e      	subs	r6, r3, #1
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	42b3      	cmp	r3, r6
 8006e6c:	bfbf      	itttt	lt
 8006e6e:	9b06      	ldrlt	r3, [sp, #24]
 8006e70:	9606      	strlt	r6, [sp, #24]
 8006e72:	1af2      	sublt	r2, r6, r3
 8006e74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006e76:	bfb6      	itet	lt
 8006e78:	189b      	addlt	r3, r3, r2
 8006e7a:	1b9e      	subge	r6, r3, r6
 8006e7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	bfb8      	it	lt
 8006e82:	2600      	movlt	r6, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bfb5      	itete	lt
 8006e88:	eba8 0503 	sublt.w	r5, r8, r3
 8006e8c:	9b01      	ldrge	r3, [sp, #4]
 8006e8e:	2300      	movlt	r3, #0
 8006e90:	4645      	movge	r5, r8
 8006e92:	e747      	b.n	8006d24 <_dtoa_r+0x75c>
 8006e94:	9e06      	ldr	r6, [sp, #24]
 8006e96:	9f08      	ldr	r7, [sp, #32]
 8006e98:	4645      	mov	r5, r8
 8006e9a:	e74c      	b.n	8006d36 <_dtoa_r+0x76e>
 8006e9c:	9a06      	ldr	r2, [sp, #24]
 8006e9e:	e775      	b.n	8006d8c <_dtoa_r+0x7c4>
 8006ea0:	9b05      	ldr	r3, [sp, #20]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	dc18      	bgt.n	8006ed8 <_dtoa_r+0x910>
 8006ea6:	9b02      	ldr	r3, [sp, #8]
 8006ea8:	b9b3      	cbnz	r3, 8006ed8 <_dtoa_r+0x910>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb0:	b9a3      	cbnz	r3, 8006edc <_dtoa_r+0x914>
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb8:	0d1b      	lsrs	r3, r3, #20
 8006eba:	051b      	lsls	r3, r3, #20
 8006ebc:	b12b      	cbz	r3, 8006eca <_dtoa_r+0x902>
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	f108 0801 	add.w	r8, r8, #1
 8006ec8:	2301      	movs	r3, #1
 8006eca:	9306      	str	r3, [sp, #24]
 8006ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f47f af74 	bne.w	8006dbc <_dtoa_r+0x7f4>
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	e779      	b.n	8006dcc <_dtoa_r+0x804>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e7f6      	b.n	8006eca <_dtoa_r+0x902>
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	e7f4      	b.n	8006eca <_dtoa_r+0x902>
 8006ee0:	d085      	beq.n	8006dee <_dtoa_r+0x826>
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	301c      	adds	r0, #28
 8006ee6:	e77d      	b.n	8006de4 <_dtoa_r+0x81c>
 8006ee8:	40240000 	.word	0x40240000
 8006eec:	9b01      	ldr	r3, [sp, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dc38      	bgt.n	8006f64 <_dtoa_r+0x99c>
 8006ef2:	9b05      	ldr	r3, [sp, #20]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	dd35      	ble.n	8006f64 <_dtoa_r+0x99c>
 8006ef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006efc:	f1b9 0f00 	cmp.w	r9, #0
 8006f00:	d10d      	bne.n	8006f1e <_dtoa_r+0x956>
 8006f02:	4631      	mov	r1, r6
 8006f04:	464b      	mov	r3, r9
 8006f06:	2205      	movs	r2, #5
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fabf 	bl	800748c <__multadd>
 8006f0e:	4601      	mov	r1, r0
 8006f10:	4606      	mov	r6, r0
 8006f12:	4658      	mov	r0, fp
 8006f14:	f000 fcd6 	bl	80078c4 <__mcmp>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f73f adbd 	bgt.w	8006a98 <_dtoa_r+0x4d0>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f20:	9d00      	ldr	r5, [sp, #0]
 8006f22:	ea6f 0a03 	mvn.w	sl, r3
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 fa8b 	bl	8007448 <_Bfree>
 8006f32:	2f00      	cmp	r7, #0
 8006f34:	f43f aeb4 	beq.w	8006ca0 <_dtoa_r+0x6d8>
 8006f38:	f1b8 0f00 	cmp.w	r8, #0
 8006f3c:	d005      	beq.n	8006f4a <_dtoa_r+0x982>
 8006f3e:	45b8      	cmp	r8, r7
 8006f40:	d003      	beq.n	8006f4a <_dtoa_r+0x982>
 8006f42:	4641      	mov	r1, r8
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 fa7f 	bl	8007448 <_Bfree>
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 fa7b 	bl	8007448 <_Bfree>
 8006f52:	e6a5      	b.n	8006ca0 <_dtoa_r+0x6d8>
 8006f54:	2600      	movs	r6, #0
 8006f56:	4637      	mov	r7, r6
 8006f58:	e7e1      	b.n	8006f1e <_dtoa_r+0x956>
 8006f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f60:	4637      	mov	r7, r6
 8006f62:	e599      	b.n	8006a98 <_dtoa_r+0x4d0>
 8006f64:	9b08      	ldr	r3, [sp, #32]
 8006f66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80fd 	beq.w	800716a <_dtoa_r+0xba2>
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	dd05      	ble.n	8006f80 <_dtoa_r+0x9b8>
 8006f74:	4639      	mov	r1, r7
 8006f76:	462a      	mov	r2, r5
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fc37 	bl	80077ec <__lshift>
 8006f7e:	4607      	mov	r7, r0
 8006f80:	9b06      	ldr	r3, [sp, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d05c      	beq.n	8007040 <_dtoa_r+0xa78>
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fa1d 	bl	80073c8 <_Balloc>
 8006f8e:	4605      	mov	r5, r0
 8006f90:	b928      	cbnz	r0, 8006f9e <_dtoa_r+0x9d6>
 8006f92:	4b80      	ldr	r3, [pc, #512]	; (8007194 <_dtoa_r+0xbcc>)
 8006f94:	4602      	mov	r2, r0
 8006f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f9a:	f7ff bb2e 	b.w	80065fa <_dtoa_r+0x32>
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	3202      	adds	r2, #2
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	f107 010c 	add.w	r1, r7, #12
 8006fa8:	300c      	adds	r0, #12
 8006faa:	f000 f9ff 	bl	80073ac <memcpy>
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fc1a 	bl	80077ec <__lshift>
 8006fb8:	9b00      	ldr	r3, [sp, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	444b      	add	r3, r9
 8006fc2:	9307      	str	r3, [sp, #28]
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	46b8      	mov	r8, r7
 8006fcc:	9306      	str	r3, [sp, #24]
 8006fce:	4607      	mov	r7, r0
 8006fd0:	9b01      	ldr	r3, [sp, #4]
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	f7ff fa67 	bl	80064ac <quorem>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	3330      	adds	r3, #48	; 0x30
 8006fe2:	9004      	str	r0, [sp, #16]
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	f000 fc6b 	bl	80078c4 <__mcmp>
 8006fee:	463a      	mov	r2, r7
 8006ff0:	4681      	mov	r9, r0
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fc81 	bl	80078fc <__mdiff>
 8006ffa:	68c2      	ldr	r2, [r0, #12]
 8006ffc:	9b08      	ldr	r3, [sp, #32]
 8006ffe:	4605      	mov	r5, r0
 8007000:	bb02      	cbnz	r2, 8007044 <_dtoa_r+0xa7c>
 8007002:	4601      	mov	r1, r0
 8007004:	4658      	mov	r0, fp
 8007006:	f000 fc5d 	bl	80078c4 <__mcmp>
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	4602      	mov	r2, r0
 800700e:	4629      	mov	r1, r5
 8007010:	4620      	mov	r0, r4
 8007012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007016:	f000 fa17 	bl	8007448 <_Bfree>
 800701a:	9b05      	ldr	r3, [sp, #20]
 800701c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800701e:	9d01      	ldr	r5, [sp, #4]
 8007020:	ea43 0102 	orr.w	r1, r3, r2
 8007024:	9b06      	ldr	r3, [sp, #24]
 8007026:	430b      	orrs	r3, r1
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	d10d      	bne.n	8007048 <_dtoa_r+0xa80>
 800702c:	2b39      	cmp	r3, #57	; 0x39
 800702e:	d029      	beq.n	8007084 <_dtoa_r+0xabc>
 8007030:	f1b9 0f00 	cmp.w	r9, #0
 8007034:	dd01      	ble.n	800703a <_dtoa_r+0xa72>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	3331      	adds	r3, #49	; 0x31
 800703a:	9a02      	ldr	r2, [sp, #8]
 800703c:	7013      	strb	r3, [r2, #0]
 800703e:	e774      	b.n	8006f2a <_dtoa_r+0x962>
 8007040:	4638      	mov	r0, r7
 8007042:	e7b9      	b.n	8006fb8 <_dtoa_r+0x9f0>
 8007044:	2201      	movs	r2, #1
 8007046:	e7e2      	b.n	800700e <_dtoa_r+0xa46>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	db06      	blt.n	800705c <_dtoa_r+0xa94>
 800704e:	9905      	ldr	r1, [sp, #20]
 8007050:	ea41 0909 	orr.w	r9, r1, r9
 8007054:	9906      	ldr	r1, [sp, #24]
 8007056:	ea59 0101 	orrs.w	r1, r9, r1
 800705a:	d120      	bne.n	800709e <_dtoa_r+0xad6>
 800705c:	2a00      	cmp	r2, #0
 800705e:	ddec      	ble.n	800703a <_dtoa_r+0xa72>
 8007060:	4659      	mov	r1, fp
 8007062:	2201      	movs	r2, #1
 8007064:	4620      	mov	r0, r4
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	f000 fbc0 	bl	80077ec <__lshift>
 800706c:	4631      	mov	r1, r6
 800706e:	4683      	mov	fp, r0
 8007070:	f000 fc28 	bl	80078c4 <__mcmp>
 8007074:	2800      	cmp	r0, #0
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	dc02      	bgt.n	8007080 <_dtoa_r+0xab8>
 800707a:	d1de      	bne.n	800703a <_dtoa_r+0xa72>
 800707c:	07da      	lsls	r2, r3, #31
 800707e:	d5dc      	bpl.n	800703a <_dtoa_r+0xa72>
 8007080:	2b39      	cmp	r3, #57	; 0x39
 8007082:	d1d8      	bne.n	8007036 <_dtoa_r+0xa6e>
 8007084:	9a02      	ldr	r2, [sp, #8]
 8007086:	2339      	movs	r3, #57	; 0x39
 8007088:	7013      	strb	r3, [r2, #0]
 800708a:	462b      	mov	r3, r5
 800708c:	461d      	mov	r5, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007094:	2a39      	cmp	r2, #57	; 0x39
 8007096:	d050      	beq.n	800713a <_dtoa_r+0xb72>
 8007098:	3201      	adds	r2, #1
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e745      	b.n	8006f2a <_dtoa_r+0x962>
 800709e:	2a00      	cmp	r2, #0
 80070a0:	dd03      	ble.n	80070aa <_dtoa_r+0xae2>
 80070a2:	2b39      	cmp	r3, #57	; 0x39
 80070a4:	d0ee      	beq.n	8007084 <_dtoa_r+0xabc>
 80070a6:	3301      	adds	r3, #1
 80070a8:	e7c7      	b.n	800703a <_dtoa_r+0xa72>
 80070aa:	9a01      	ldr	r2, [sp, #4]
 80070ac:	9907      	ldr	r1, [sp, #28]
 80070ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070b2:	428a      	cmp	r2, r1
 80070b4:	d02a      	beq.n	800710c <_dtoa_r+0xb44>
 80070b6:	4659      	mov	r1, fp
 80070b8:	2300      	movs	r3, #0
 80070ba:	220a      	movs	r2, #10
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 f9e5 	bl	800748c <__multadd>
 80070c2:	45b8      	cmp	r8, r7
 80070c4:	4683      	mov	fp, r0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	f04f 020a 	mov.w	r2, #10
 80070ce:	4641      	mov	r1, r8
 80070d0:	4620      	mov	r0, r4
 80070d2:	d107      	bne.n	80070e4 <_dtoa_r+0xb1c>
 80070d4:	f000 f9da 	bl	800748c <__multadd>
 80070d8:	4680      	mov	r8, r0
 80070da:	4607      	mov	r7, r0
 80070dc:	9b01      	ldr	r3, [sp, #4]
 80070de:	3301      	adds	r3, #1
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	e775      	b.n	8006fd0 <_dtoa_r+0xa08>
 80070e4:	f000 f9d2 	bl	800748c <__multadd>
 80070e8:	4639      	mov	r1, r7
 80070ea:	4680      	mov	r8, r0
 80070ec:	2300      	movs	r3, #0
 80070ee:	220a      	movs	r2, #10
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f9cb 	bl	800748c <__multadd>
 80070f6:	4607      	mov	r7, r0
 80070f8:	e7f0      	b.n	80070dc <_dtoa_r+0xb14>
 80070fa:	f1b9 0f00 	cmp.w	r9, #0
 80070fe:	9a00      	ldr	r2, [sp, #0]
 8007100:	bfcc      	ite	gt
 8007102:	464d      	movgt	r5, r9
 8007104:	2501      	movle	r5, #1
 8007106:	4415      	add	r5, r2
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	4659      	mov	r1, fp
 800710e:	2201      	movs	r2, #1
 8007110:	4620      	mov	r0, r4
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	f000 fb6a 	bl	80077ec <__lshift>
 8007118:	4631      	mov	r1, r6
 800711a:	4683      	mov	fp, r0
 800711c:	f000 fbd2 	bl	80078c4 <__mcmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	dcb2      	bgt.n	800708a <_dtoa_r+0xac2>
 8007124:	d102      	bne.n	800712c <_dtoa_r+0xb64>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	07db      	lsls	r3, r3, #31
 800712a:	d4ae      	bmi.n	800708a <_dtoa_r+0xac2>
 800712c:	462b      	mov	r3, r5
 800712e:	461d      	mov	r5, r3
 8007130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007134:	2a30      	cmp	r2, #48	; 0x30
 8007136:	d0fa      	beq.n	800712e <_dtoa_r+0xb66>
 8007138:	e6f7      	b.n	8006f2a <_dtoa_r+0x962>
 800713a:	9a00      	ldr	r2, [sp, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d1a5      	bne.n	800708c <_dtoa_r+0xac4>
 8007140:	f10a 0a01 	add.w	sl, sl, #1
 8007144:	2331      	movs	r3, #49	; 0x31
 8007146:	e779      	b.n	800703c <_dtoa_r+0xa74>
 8007148:	4b13      	ldr	r3, [pc, #76]	; (8007198 <_dtoa_r+0xbd0>)
 800714a:	f7ff baaf 	b.w	80066ac <_dtoa_r+0xe4>
 800714e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007150:	2b00      	cmp	r3, #0
 8007152:	f47f aa86 	bne.w	8006662 <_dtoa_r+0x9a>
 8007156:	4b11      	ldr	r3, [pc, #68]	; (800719c <_dtoa_r+0xbd4>)
 8007158:	f7ff baa8 	b.w	80066ac <_dtoa_r+0xe4>
 800715c:	f1b9 0f00 	cmp.w	r9, #0
 8007160:	dc03      	bgt.n	800716a <_dtoa_r+0xba2>
 8007162:	9b05      	ldr	r3, [sp, #20]
 8007164:	2b02      	cmp	r3, #2
 8007166:	f73f aec9 	bgt.w	8006efc <_dtoa_r+0x934>
 800716a:	9d00      	ldr	r5, [sp, #0]
 800716c:	4631      	mov	r1, r6
 800716e:	4658      	mov	r0, fp
 8007170:	f7ff f99c 	bl	80064ac <quorem>
 8007174:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007178:	f805 3b01 	strb.w	r3, [r5], #1
 800717c:	9a00      	ldr	r2, [sp, #0]
 800717e:	1aaa      	subs	r2, r5, r2
 8007180:	4591      	cmp	r9, r2
 8007182:	ddba      	ble.n	80070fa <_dtoa_r+0xb32>
 8007184:	4659      	mov	r1, fp
 8007186:	2300      	movs	r3, #0
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f97e 	bl	800748c <__multadd>
 8007190:	4683      	mov	fp, r0
 8007192:	e7eb      	b.n	800716c <_dtoa_r+0xba4>
 8007194:	08008683 	.word	0x08008683
 8007198:	080085dc 	.word	0x080085dc
 800719c:	08008600 	.word	0x08008600

080071a0 <std>:
 80071a0:	2300      	movs	r3, #0
 80071a2:	b510      	push	{r4, lr}
 80071a4:	4604      	mov	r4, r0
 80071a6:	e9c0 3300 	strd	r3, r3, [r0]
 80071aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ae:	6083      	str	r3, [r0, #8]
 80071b0:	8181      	strh	r1, [r0, #12]
 80071b2:	6643      	str	r3, [r0, #100]	; 0x64
 80071b4:	81c2      	strh	r2, [r0, #14]
 80071b6:	6183      	str	r3, [r0, #24]
 80071b8:	4619      	mov	r1, r3
 80071ba:	2208      	movs	r2, #8
 80071bc:	305c      	adds	r0, #92	; 0x5c
 80071be:	f7fe fceb 	bl	8005b98 <memset>
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <std+0x38>)
 80071c4:	6263      	str	r3, [r4, #36]	; 0x24
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x3c>)
 80071c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x40>)
 80071cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <std+0x44>)
 80071d0:	6224      	str	r4, [r4, #32]
 80071d2:	6323      	str	r3, [r4, #48]	; 0x30
 80071d4:	bd10      	pop	{r4, pc}
 80071d6:	bf00      	nop
 80071d8:	08007f0d 	.word	0x08007f0d
 80071dc:	08007f2f 	.word	0x08007f2f
 80071e0:	08007f67 	.word	0x08007f67
 80071e4:	08007f8b 	.word	0x08007f8b

080071e8 <_cleanup_r>:
 80071e8:	4901      	ldr	r1, [pc, #4]	; (80071f0 <_cleanup_r+0x8>)
 80071ea:	f000 b8af 	b.w	800734c <_fwalk_reent>
 80071ee:	bf00      	nop
 80071f0:	080082a1 	.word	0x080082a1

080071f4 <__sfmoreglue>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	1e4a      	subs	r2, r1, #1
 80071f8:	2568      	movs	r5, #104	; 0x68
 80071fa:	4355      	muls	r5, r2
 80071fc:	460e      	mov	r6, r1
 80071fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007202:	f000 fcbf 	bl	8007b84 <_malloc_r>
 8007206:	4604      	mov	r4, r0
 8007208:	b140      	cbz	r0, 800721c <__sfmoreglue+0x28>
 800720a:	2100      	movs	r1, #0
 800720c:	e9c0 1600 	strd	r1, r6, [r0]
 8007210:	300c      	adds	r0, #12
 8007212:	60a0      	str	r0, [r4, #8]
 8007214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007218:	f7fe fcbe 	bl	8005b98 <memset>
 800721c:	4620      	mov	r0, r4
 800721e:	bd70      	pop	{r4, r5, r6, pc}

08007220 <__sfp_lock_acquire>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__sfp_lock_acquire+0x8>)
 8007222:	f000 b8b8 	b.w	8007396 <__retarget_lock_acquire_recursive>
 8007226:	bf00      	nop
 8007228:	20000404 	.word	0x20000404

0800722c <__sfp_lock_release>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__sfp_lock_release+0x8>)
 800722e:	f000 b8b3 	b.w	8007398 <__retarget_lock_release_recursive>
 8007232:	bf00      	nop
 8007234:	20000404 	.word	0x20000404

08007238 <__sinit_lock_acquire>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__sinit_lock_acquire+0x8>)
 800723a:	f000 b8ac 	b.w	8007396 <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	200003ff 	.word	0x200003ff

08007244 <__sinit_lock_release>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__sinit_lock_release+0x8>)
 8007246:	f000 b8a7 	b.w	8007398 <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	200003ff 	.word	0x200003ff

08007250 <__sinit>:
 8007250:	b510      	push	{r4, lr}
 8007252:	4604      	mov	r4, r0
 8007254:	f7ff fff0 	bl	8007238 <__sinit_lock_acquire>
 8007258:	69a3      	ldr	r3, [r4, #24]
 800725a:	b11b      	cbz	r3, 8007264 <__sinit+0x14>
 800725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007260:	f7ff bff0 	b.w	8007244 <__sinit_lock_release>
 8007264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007268:	6523      	str	r3, [r4, #80]	; 0x50
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <__sinit+0x68>)
 800726c:	4a13      	ldr	r2, [pc, #76]	; (80072bc <__sinit+0x6c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	62a2      	str	r2, [r4, #40]	; 0x28
 8007272:	42a3      	cmp	r3, r4
 8007274:	bf04      	itt	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	61a3      	streq	r3, [r4, #24]
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f820 	bl	80072c0 <__sfp>
 8007280:	6060      	str	r0, [r4, #4]
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f81c 	bl	80072c0 <__sfp>
 8007288:	60a0      	str	r0, [r4, #8]
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f818 	bl	80072c0 <__sfp>
 8007290:	2200      	movs	r2, #0
 8007292:	60e0      	str	r0, [r4, #12]
 8007294:	2104      	movs	r1, #4
 8007296:	6860      	ldr	r0, [r4, #4]
 8007298:	f7ff ff82 	bl	80071a0 <std>
 800729c:	68a0      	ldr	r0, [r4, #8]
 800729e:	2201      	movs	r2, #1
 80072a0:	2109      	movs	r1, #9
 80072a2:	f7ff ff7d 	bl	80071a0 <std>
 80072a6:	68e0      	ldr	r0, [r4, #12]
 80072a8:	2202      	movs	r2, #2
 80072aa:	2112      	movs	r1, #18
 80072ac:	f7ff ff78 	bl	80071a0 <std>
 80072b0:	2301      	movs	r3, #1
 80072b2:	61a3      	str	r3, [r4, #24]
 80072b4:	e7d2      	b.n	800725c <__sinit+0xc>
 80072b6:	bf00      	nop
 80072b8:	080085c8 	.word	0x080085c8
 80072bc:	080071e9 	.word	0x080071e9

080072c0 <__sfp>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	4607      	mov	r7, r0
 80072c4:	f7ff ffac 	bl	8007220 <__sfp_lock_acquire>
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <__sfp+0x84>)
 80072ca:	681e      	ldr	r6, [r3, #0]
 80072cc:	69b3      	ldr	r3, [r6, #24]
 80072ce:	b913      	cbnz	r3, 80072d6 <__sfp+0x16>
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ffbd 	bl	8007250 <__sinit>
 80072d6:	3648      	adds	r6, #72	; 0x48
 80072d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072dc:	3b01      	subs	r3, #1
 80072de:	d503      	bpl.n	80072e8 <__sfp+0x28>
 80072e0:	6833      	ldr	r3, [r6, #0]
 80072e2:	b30b      	cbz	r3, 8007328 <__sfp+0x68>
 80072e4:	6836      	ldr	r6, [r6, #0]
 80072e6:	e7f7      	b.n	80072d8 <__sfp+0x18>
 80072e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072ec:	b9d5      	cbnz	r5, 8007324 <__sfp+0x64>
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <__sfp+0x88>)
 80072f0:	60e3      	str	r3, [r4, #12]
 80072f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072f6:	6665      	str	r5, [r4, #100]	; 0x64
 80072f8:	f000 f84c 	bl	8007394 <__retarget_lock_init_recursive>
 80072fc:	f7ff ff96 	bl	800722c <__sfp_lock_release>
 8007300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007308:	6025      	str	r5, [r4, #0]
 800730a:	61a5      	str	r5, [r4, #24]
 800730c:	2208      	movs	r2, #8
 800730e:	4629      	mov	r1, r5
 8007310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007314:	f7fe fc40 	bl	8005b98 <memset>
 8007318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800731c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007320:	4620      	mov	r0, r4
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007324:	3468      	adds	r4, #104	; 0x68
 8007326:	e7d9      	b.n	80072dc <__sfp+0x1c>
 8007328:	2104      	movs	r1, #4
 800732a:	4638      	mov	r0, r7
 800732c:	f7ff ff62 	bl	80071f4 <__sfmoreglue>
 8007330:	4604      	mov	r4, r0
 8007332:	6030      	str	r0, [r6, #0]
 8007334:	2800      	cmp	r0, #0
 8007336:	d1d5      	bne.n	80072e4 <__sfp+0x24>
 8007338:	f7ff ff78 	bl	800722c <__sfp_lock_release>
 800733c:	230c      	movs	r3, #12
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	e7ee      	b.n	8007320 <__sfp+0x60>
 8007342:	bf00      	nop
 8007344:	080085c8 	.word	0x080085c8
 8007348:	ffff0001 	.word	0xffff0001

0800734c <_fwalk_reent>:
 800734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007350:	4606      	mov	r6, r0
 8007352:	4688      	mov	r8, r1
 8007354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007358:	2700      	movs	r7, #0
 800735a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800735e:	f1b9 0901 	subs.w	r9, r9, #1
 8007362:	d505      	bpl.n	8007370 <_fwalk_reent+0x24>
 8007364:	6824      	ldr	r4, [r4, #0]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d1f7      	bne.n	800735a <_fwalk_reent+0xe>
 800736a:	4638      	mov	r0, r7
 800736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007370:	89ab      	ldrh	r3, [r5, #12]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d907      	bls.n	8007386 <_fwalk_reent+0x3a>
 8007376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800737a:	3301      	adds	r3, #1
 800737c:	d003      	beq.n	8007386 <_fwalk_reent+0x3a>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	47c0      	blx	r8
 8007384:	4307      	orrs	r7, r0
 8007386:	3568      	adds	r5, #104	; 0x68
 8007388:	e7e9      	b.n	800735e <_fwalk_reent+0x12>
	...

0800738c <_localeconv_r>:
 800738c:	4800      	ldr	r0, [pc, #0]	; (8007390 <_localeconv_r+0x4>)
 800738e:	4770      	bx	lr
 8007390:	20000160 	.word	0x20000160

08007394 <__retarget_lock_init_recursive>:
 8007394:	4770      	bx	lr

08007396 <__retarget_lock_acquire_recursive>:
 8007396:	4770      	bx	lr

08007398 <__retarget_lock_release_recursive>:
 8007398:	4770      	bx	lr
	...

0800739c <malloc>:
 800739c:	4b02      	ldr	r3, [pc, #8]	; (80073a8 <malloc+0xc>)
 800739e:	4601      	mov	r1, r0
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	f000 bbef 	b.w	8007b84 <_malloc_r>
 80073a6:	bf00      	nop
 80073a8:	2000000c 	.word	0x2000000c

080073ac <memcpy>:
 80073ac:	440a      	add	r2, r1
 80073ae:	4291      	cmp	r1, r2
 80073b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073b4:	d100      	bne.n	80073b8 <memcpy+0xc>
 80073b6:	4770      	bx	lr
 80073b8:	b510      	push	{r4, lr}
 80073ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c2:	4291      	cmp	r1, r2
 80073c4:	d1f9      	bne.n	80073ba <memcpy+0xe>
 80073c6:	bd10      	pop	{r4, pc}

080073c8 <_Balloc>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073cc:	4604      	mov	r4, r0
 80073ce:	460d      	mov	r5, r1
 80073d0:	b976      	cbnz	r6, 80073f0 <_Balloc+0x28>
 80073d2:	2010      	movs	r0, #16
 80073d4:	f7ff ffe2 	bl	800739c <malloc>
 80073d8:	4602      	mov	r2, r0
 80073da:	6260      	str	r0, [r4, #36]	; 0x24
 80073dc:	b920      	cbnz	r0, 80073e8 <_Balloc+0x20>
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <_Balloc+0x78>)
 80073e0:	4818      	ldr	r0, [pc, #96]	; (8007444 <_Balloc+0x7c>)
 80073e2:	2166      	movs	r1, #102	; 0x66
 80073e4:	f000 fea8 	bl	8008138 <__assert_func>
 80073e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073ec:	6006      	str	r6, [r0, #0]
 80073ee:	60c6      	str	r6, [r0, #12]
 80073f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80073f2:	68f3      	ldr	r3, [r6, #12]
 80073f4:	b183      	cbz	r3, 8007418 <_Balloc+0x50>
 80073f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073fe:	b9b8      	cbnz	r0, 8007430 <_Balloc+0x68>
 8007400:	2101      	movs	r1, #1
 8007402:	fa01 f605 	lsl.w	r6, r1, r5
 8007406:	1d72      	adds	r2, r6, #5
 8007408:	0092      	lsls	r2, r2, #2
 800740a:	4620      	mov	r0, r4
 800740c:	f000 fb5a 	bl	8007ac4 <_calloc_r>
 8007410:	b160      	cbz	r0, 800742c <_Balloc+0x64>
 8007412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007416:	e00e      	b.n	8007436 <_Balloc+0x6e>
 8007418:	2221      	movs	r2, #33	; 0x21
 800741a:	2104      	movs	r1, #4
 800741c:	4620      	mov	r0, r4
 800741e:	f000 fb51 	bl	8007ac4 <_calloc_r>
 8007422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007424:	60f0      	str	r0, [r6, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e4      	bne.n	80073f6 <_Balloc+0x2e>
 800742c:	2000      	movs	r0, #0
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	6802      	ldr	r2, [r0, #0]
 8007432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007436:	2300      	movs	r3, #0
 8007438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800743c:	e7f7      	b.n	800742e <_Balloc+0x66>
 800743e:	bf00      	nop
 8007440:	0800860d 	.word	0x0800860d
 8007444:	080086f4 	.word	0x080086f4

08007448 <_Bfree>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800744c:	4605      	mov	r5, r0
 800744e:	460c      	mov	r4, r1
 8007450:	b976      	cbnz	r6, 8007470 <_Bfree+0x28>
 8007452:	2010      	movs	r0, #16
 8007454:	f7ff ffa2 	bl	800739c <malloc>
 8007458:	4602      	mov	r2, r0
 800745a:	6268      	str	r0, [r5, #36]	; 0x24
 800745c:	b920      	cbnz	r0, 8007468 <_Bfree+0x20>
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <_Bfree+0x3c>)
 8007460:	4809      	ldr	r0, [pc, #36]	; (8007488 <_Bfree+0x40>)
 8007462:	218a      	movs	r1, #138	; 0x8a
 8007464:	f000 fe68 	bl	8008138 <__assert_func>
 8007468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800746c:	6006      	str	r6, [r0, #0]
 800746e:	60c6      	str	r6, [r0, #12]
 8007470:	b13c      	cbz	r4, 8007482 <_Bfree+0x3a>
 8007472:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007474:	6862      	ldr	r2, [r4, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800747c:	6021      	str	r1, [r4, #0]
 800747e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	0800860d 	.word	0x0800860d
 8007488:	080086f4 	.word	0x080086f4

0800748c <__multadd>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	690e      	ldr	r6, [r1, #16]
 8007492:	4607      	mov	r7, r0
 8007494:	4698      	mov	r8, r3
 8007496:	460c      	mov	r4, r1
 8007498:	f101 0014 	add.w	r0, r1, #20
 800749c:	2300      	movs	r3, #0
 800749e:	6805      	ldr	r5, [r0, #0]
 80074a0:	b2a9      	uxth	r1, r5
 80074a2:	fb02 8101 	mla	r1, r2, r1, r8
 80074a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80074aa:	0c2d      	lsrs	r5, r5, #16
 80074ac:	fb02 c505 	mla	r5, r2, r5, ip
 80074b0:	b289      	uxth	r1, r1
 80074b2:	3301      	adds	r3, #1
 80074b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80074b8:	429e      	cmp	r6, r3
 80074ba:	f840 1b04 	str.w	r1, [r0], #4
 80074be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80074c2:	dcec      	bgt.n	800749e <__multadd+0x12>
 80074c4:	f1b8 0f00 	cmp.w	r8, #0
 80074c8:	d022      	beq.n	8007510 <__multadd+0x84>
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	42b3      	cmp	r3, r6
 80074ce:	dc19      	bgt.n	8007504 <__multadd+0x78>
 80074d0:	6861      	ldr	r1, [r4, #4]
 80074d2:	4638      	mov	r0, r7
 80074d4:	3101      	adds	r1, #1
 80074d6:	f7ff ff77 	bl	80073c8 <_Balloc>
 80074da:	4605      	mov	r5, r0
 80074dc:	b928      	cbnz	r0, 80074ea <__multadd+0x5e>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <__multadd+0x8c>)
 80074e2:	480e      	ldr	r0, [pc, #56]	; (800751c <__multadd+0x90>)
 80074e4:	21b5      	movs	r1, #181	; 0xb5
 80074e6:	f000 fe27 	bl	8008138 <__assert_func>
 80074ea:	6922      	ldr	r2, [r4, #16]
 80074ec:	3202      	adds	r2, #2
 80074ee:	f104 010c 	add.w	r1, r4, #12
 80074f2:	0092      	lsls	r2, r2, #2
 80074f4:	300c      	adds	r0, #12
 80074f6:	f7ff ff59 	bl	80073ac <memcpy>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff ffa3 	bl	8007448 <_Bfree>
 8007502:	462c      	mov	r4, r5
 8007504:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007508:	3601      	adds	r6, #1
 800750a:	f8c3 8014 	str.w	r8, [r3, #20]
 800750e:	6126      	str	r6, [r4, #16]
 8007510:	4620      	mov	r0, r4
 8007512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007516:	bf00      	nop
 8007518:	08008683 	.word	0x08008683
 800751c:	080086f4 	.word	0x080086f4

08007520 <__hi0bits>:
 8007520:	0c03      	lsrs	r3, r0, #16
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	b9d3      	cbnz	r3, 800755c <__hi0bits+0x3c>
 8007526:	0400      	lsls	r0, r0, #16
 8007528:	2310      	movs	r3, #16
 800752a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800752e:	bf04      	itt	eq
 8007530:	0200      	lsleq	r0, r0, #8
 8007532:	3308      	addeq	r3, #8
 8007534:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007538:	bf04      	itt	eq
 800753a:	0100      	lsleq	r0, r0, #4
 800753c:	3304      	addeq	r3, #4
 800753e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007542:	bf04      	itt	eq
 8007544:	0080      	lsleq	r0, r0, #2
 8007546:	3302      	addeq	r3, #2
 8007548:	2800      	cmp	r0, #0
 800754a:	db05      	blt.n	8007558 <__hi0bits+0x38>
 800754c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007550:	f103 0301 	add.w	r3, r3, #1
 8007554:	bf08      	it	eq
 8007556:	2320      	moveq	r3, #32
 8007558:	4618      	mov	r0, r3
 800755a:	4770      	bx	lr
 800755c:	2300      	movs	r3, #0
 800755e:	e7e4      	b.n	800752a <__hi0bits+0xa>

08007560 <__lo0bits>:
 8007560:	6803      	ldr	r3, [r0, #0]
 8007562:	f013 0207 	ands.w	r2, r3, #7
 8007566:	4601      	mov	r1, r0
 8007568:	d00b      	beq.n	8007582 <__lo0bits+0x22>
 800756a:	07da      	lsls	r2, r3, #31
 800756c:	d424      	bmi.n	80075b8 <__lo0bits+0x58>
 800756e:	0798      	lsls	r0, r3, #30
 8007570:	bf49      	itett	mi
 8007572:	085b      	lsrmi	r3, r3, #1
 8007574:	089b      	lsrpl	r3, r3, #2
 8007576:	2001      	movmi	r0, #1
 8007578:	600b      	strmi	r3, [r1, #0]
 800757a:	bf5c      	itt	pl
 800757c:	600b      	strpl	r3, [r1, #0]
 800757e:	2002      	movpl	r0, #2
 8007580:	4770      	bx	lr
 8007582:	b298      	uxth	r0, r3
 8007584:	b9b0      	cbnz	r0, 80075b4 <__lo0bits+0x54>
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	2010      	movs	r0, #16
 800758a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800758e:	bf04      	itt	eq
 8007590:	0a1b      	lsreq	r3, r3, #8
 8007592:	3008      	addeq	r0, #8
 8007594:	071a      	lsls	r2, r3, #28
 8007596:	bf04      	itt	eq
 8007598:	091b      	lsreq	r3, r3, #4
 800759a:	3004      	addeq	r0, #4
 800759c:	079a      	lsls	r2, r3, #30
 800759e:	bf04      	itt	eq
 80075a0:	089b      	lsreq	r3, r3, #2
 80075a2:	3002      	addeq	r0, #2
 80075a4:	07da      	lsls	r2, r3, #31
 80075a6:	d403      	bmi.n	80075b0 <__lo0bits+0x50>
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	f100 0001 	add.w	r0, r0, #1
 80075ae:	d005      	beq.n	80075bc <__lo0bits+0x5c>
 80075b0:	600b      	str	r3, [r1, #0]
 80075b2:	4770      	bx	lr
 80075b4:	4610      	mov	r0, r2
 80075b6:	e7e8      	b.n	800758a <__lo0bits+0x2a>
 80075b8:	2000      	movs	r0, #0
 80075ba:	4770      	bx	lr
 80075bc:	2020      	movs	r0, #32
 80075be:	4770      	bx	lr

080075c0 <__i2b>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	460c      	mov	r4, r1
 80075c4:	2101      	movs	r1, #1
 80075c6:	f7ff feff 	bl	80073c8 <_Balloc>
 80075ca:	4602      	mov	r2, r0
 80075cc:	b928      	cbnz	r0, 80075da <__i2b+0x1a>
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <__i2b+0x24>)
 80075d0:	4805      	ldr	r0, [pc, #20]	; (80075e8 <__i2b+0x28>)
 80075d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075d6:	f000 fdaf 	bl	8008138 <__assert_func>
 80075da:	2301      	movs	r3, #1
 80075dc:	6144      	str	r4, [r0, #20]
 80075de:	6103      	str	r3, [r0, #16]
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	bf00      	nop
 80075e4:	08008683 	.word	0x08008683
 80075e8:	080086f4 	.word	0x080086f4

080075ec <__multiply>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	4614      	mov	r4, r2
 80075f2:	690a      	ldr	r2, [r1, #16]
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	bfb8      	it	lt
 80075fa:	460b      	movlt	r3, r1
 80075fc:	460d      	mov	r5, r1
 80075fe:	bfbc      	itt	lt
 8007600:	4625      	movlt	r5, r4
 8007602:	461c      	movlt	r4, r3
 8007604:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007608:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800760c:	68ab      	ldr	r3, [r5, #8]
 800760e:	6869      	ldr	r1, [r5, #4]
 8007610:	eb0a 0709 	add.w	r7, sl, r9
 8007614:	42bb      	cmp	r3, r7
 8007616:	b085      	sub	sp, #20
 8007618:	bfb8      	it	lt
 800761a:	3101      	addlt	r1, #1
 800761c:	f7ff fed4 	bl	80073c8 <_Balloc>
 8007620:	b930      	cbnz	r0, 8007630 <__multiply+0x44>
 8007622:	4602      	mov	r2, r0
 8007624:	4b42      	ldr	r3, [pc, #264]	; (8007730 <__multiply+0x144>)
 8007626:	4843      	ldr	r0, [pc, #268]	; (8007734 <__multiply+0x148>)
 8007628:	f240 115d 	movw	r1, #349	; 0x15d
 800762c:	f000 fd84 	bl	8008138 <__assert_func>
 8007630:	f100 0614 	add.w	r6, r0, #20
 8007634:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007638:	4633      	mov	r3, r6
 800763a:	2200      	movs	r2, #0
 800763c:	4543      	cmp	r3, r8
 800763e:	d31e      	bcc.n	800767e <__multiply+0x92>
 8007640:	f105 0c14 	add.w	ip, r5, #20
 8007644:	f104 0314 	add.w	r3, r4, #20
 8007648:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800764c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007650:	9202      	str	r2, [sp, #8]
 8007652:	ebac 0205 	sub.w	r2, ip, r5
 8007656:	3a15      	subs	r2, #21
 8007658:	f022 0203 	bic.w	r2, r2, #3
 800765c:	3204      	adds	r2, #4
 800765e:	f105 0115 	add.w	r1, r5, #21
 8007662:	458c      	cmp	ip, r1
 8007664:	bf38      	it	cc
 8007666:	2204      	movcc	r2, #4
 8007668:	9201      	str	r2, [sp, #4]
 800766a:	9a02      	ldr	r2, [sp, #8]
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	429a      	cmp	r2, r3
 8007670:	d808      	bhi.n	8007684 <__multiply+0x98>
 8007672:	2f00      	cmp	r7, #0
 8007674:	dc55      	bgt.n	8007722 <__multiply+0x136>
 8007676:	6107      	str	r7, [r0, #16]
 8007678:	b005      	add	sp, #20
 800767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767e:	f843 2b04 	str.w	r2, [r3], #4
 8007682:	e7db      	b.n	800763c <__multiply+0x50>
 8007684:	f8b3 a000 	ldrh.w	sl, [r3]
 8007688:	f1ba 0f00 	cmp.w	sl, #0
 800768c:	d020      	beq.n	80076d0 <__multiply+0xe4>
 800768e:	f105 0e14 	add.w	lr, r5, #20
 8007692:	46b1      	mov	r9, r6
 8007694:	2200      	movs	r2, #0
 8007696:	f85e 4b04 	ldr.w	r4, [lr], #4
 800769a:	f8d9 b000 	ldr.w	fp, [r9]
 800769e:	b2a1      	uxth	r1, r4
 80076a0:	fa1f fb8b 	uxth.w	fp, fp
 80076a4:	fb0a b101 	mla	r1, sl, r1, fp
 80076a8:	4411      	add	r1, r2
 80076aa:	f8d9 2000 	ldr.w	r2, [r9]
 80076ae:	0c24      	lsrs	r4, r4, #16
 80076b0:	0c12      	lsrs	r2, r2, #16
 80076b2:	fb0a 2404 	mla	r4, sl, r4, r2
 80076b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80076ba:	b289      	uxth	r1, r1
 80076bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076c0:	45f4      	cmp	ip, lr
 80076c2:	f849 1b04 	str.w	r1, [r9], #4
 80076c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80076ca:	d8e4      	bhi.n	8007696 <__multiply+0xaa>
 80076cc:	9901      	ldr	r1, [sp, #4]
 80076ce:	5072      	str	r2, [r6, r1]
 80076d0:	9a03      	ldr	r2, [sp, #12]
 80076d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076d6:	3304      	adds	r3, #4
 80076d8:	f1b9 0f00 	cmp.w	r9, #0
 80076dc:	d01f      	beq.n	800771e <__multiply+0x132>
 80076de:	6834      	ldr	r4, [r6, #0]
 80076e0:	f105 0114 	add.w	r1, r5, #20
 80076e4:	46b6      	mov	lr, r6
 80076e6:	f04f 0a00 	mov.w	sl, #0
 80076ea:	880a      	ldrh	r2, [r1, #0]
 80076ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 80076f0:	fb09 b202 	mla	r2, r9, r2, fp
 80076f4:	4492      	add	sl, r2
 80076f6:	b2a4      	uxth	r4, r4
 80076f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80076fc:	f84e 4b04 	str.w	r4, [lr], #4
 8007700:	f851 4b04 	ldr.w	r4, [r1], #4
 8007704:	f8be 2000 	ldrh.w	r2, [lr]
 8007708:	0c24      	lsrs	r4, r4, #16
 800770a:	fb09 2404 	mla	r4, r9, r4, r2
 800770e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007712:	458c      	cmp	ip, r1
 8007714:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007718:	d8e7      	bhi.n	80076ea <__multiply+0xfe>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	50b4      	str	r4, [r6, r2]
 800771e:	3604      	adds	r6, #4
 8007720:	e7a3      	b.n	800766a <__multiply+0x7e>
 8007722:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1a5      	bne.n	8007676 <__multiply+0x8a>
 800772a:	3f01      	subs	r7, #1
 800772c:	e7a1      	b.n	8007672 <__multiply+0x86>
 800772e:	bf00      	nop
 8007730:	08008683 	.word	0x08008683
 8007734:	080086f4 	.word	0x080086f4

08007738 <__pow5mult>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	4615      	mov	r5, r2
 800773e:	f012 0203 	ands.w	r2, r2, #3
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	d007      	beq.n	8007758 <__pow5mult+0x20>
 8007748:	4c25      	ldr	r4, [pc, #148]	; (80077e0 <__pow5mult+0xa8>)
 800774a:	3a01      	subs	r2, #1
 800774c:	2300      	movs	r3, #0
 800774e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007752:	f7ff fe9b 	bl	800748c <__multadd>
 8007756:	4607      	mov	r7, r0
 8007758:	10ad      	asrs	r5, r5, #2
 800775a:	d03d      	beq.n	80077d8 <__pow5mult+0xa0>
 800775c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800775e:	b97c      	cbnz	r4, 8007780 <__pow5mult+0x48>
 8007760:	2010      	movs	r0, #16
 8007762:	f7ff fe1b 	bl	800739c <malloc>
 8007766:	4602      	mov	r2, r0
 8007768:	6270      	str	r0, [r6, #36]	; 0x24
 800776a:	b928      	cbnz	r0, 8007778 <__pow5mult+0x40>
 800776c:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <__pow5mult+0xac>)
 800776e:	481e      	ldr	r0, [pc, #120]	; (80077e8 <__pow5mult+0xb0>)
 8007770:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007774:	f000 fce0 	bl	8008138 <__assert_func>
 8007778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800777c:	6004      	str	r4, [r0, #0]
 800777e:	60c4      	str	r4, [r0, #12]
 8007780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007788:	b94c      	cbnz	r4, 800779e <__pow5mult+0x66>
 800778a:	f240 2171 	movw	r1, #625	; 0x271
 800778e:	4630      	mov	r0, r6
 8007790:	f7ff ff16 	bl	80075c0 <__i2b>
 8007794:	2300      	movs	r3, #0
 8007796:	f8c8 0008 	str.w	r0, [r8, #8]
 800779a:	4604      	mov	r4, r0
 800779c:	6003      	str	r3, [r0, #0]
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	07eb      	lsls	r3, r5, #31
 80077a4:	d50a      	bpl.n	80077bc <__pow5mult+0x84>
 80077a6:	4639      	mov	r1, r7
 80077a8:	4622      	mov	r2, r4
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7ff ff1e 	bl	80075ec <__multiply>
 80077b0:	4639      	mov	r1, r7
 80077b2:	4680      	mov	r8, r0
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff fe47 	bl	8007448 <_Bfree>
 80077ba:	4647      	mov	r7, r8
 80077bc:	106d      	asrs	r5, r5, #1
 80077be:	d00b      	beq.n	80077d8 <__pow5mult+0xa0>
 80077c0:	6820      	ldr	r0, [r4, #0]
 80077c2:	b938      	cbnz	r0, 80077d4 <__pow5mult+0x9c>
 80077c4:	4622      	mov	r2, r4
 80077c6:	4621      	mov	r1, r4
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7ff ff0f 	bl	80075ec <__multiply>
 80077ce:	6020      	str	r0, [r4, #0]
 80077d0:	f8c0 9000 	str.w	r9, [r0]
 80077d4:	4604      	mov	r4, r0
 80077d6:	e7e4      	b.n	80077a2 <__pow5mult+0x6a>
 80077d8:	4638      	mov	r0, r7
 80077da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077de:	bf00      	nop
 80077e0:	08008848 	.word	0x08008848
 80077e4:	0800860d 	.word	0x0800860d
 80077e8:	080086f4 	.word	0x080086f4

080077ec <__lshift>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	6849      	ldr	r1, [r1, #4]
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	4607      	mov	r7, r0
 80077fe:	4691      	mov	r9, r2
 8007800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007804:	f108 0601 	add.w	r6, r8, #1
 8007808:	42b3      	cmp	r3, r6
 800780a:	db0b      	blt.n	8007824 <__lshift+0x38>
 800780c:	4638      	mov	r0, r7
 800780e:	f7ff fddb 	bl	80073c8 <_Balloc>
 8007812:	4605      	mov	r5, r0
 8007814:	b948      	cbnz	r0, 800782a <__lshift+0x3e>
 8007816:	4602      	mov	r2, r0
 8007818:	4b28      	ldr	r3, [pc, #160]	; (80078bc <__lshift+0xd0>)
 800781a:	4829      	ldr	r0, [pc, #164]	; (80078c0 <__lshift+0xd4>)
 800781c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007820:	f000 fc8a 	bl	8008138 <__assert_func>
 8007824:	3101      	adds	r1, #1
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	e7ee      	b.n	8007808 <__lshift+0x1c>
 800782a:	2300      	movs	r3, #0
 800782c:	f100 0114 	add.w	r1, r0, #20
 8007830:	f100 0210 	add.w	r2, r0, #16
 8007834:	4618      	mov	r0, r3
 8007836:	4553      	cmp	r3, sl
 8007838:	db33      	blt.n	80078a2 <__lshift+0xb6>
 800783a:	6920      	ldr	r0, [r4, #16]
 800783c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007840:	f104 0314 	add.w	r3, r4, #20
 8007844:	f019 091f 	ands.w	r9, r9, #31
 8007848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800784c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007850:	d02b      	beq.n	80078aa <__lshift+0xbe>
 8007852:	f1c9 0e20 	rsb	lr, r9, #32
 8007856:	468a      	mov	sl, r1
 8007858:	2200      	movs	r2, #0
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	fa00 f009 	lsl.w	r0, r0, r9
 8007860:	4302      	orrs	r2, r0
 8007862:	f84a 2b04 	str.w	r2, [sl], #4
 8007866:	f853 2b04 	ldr.w	r2, [r3], #4
 800786a:	459c      	cmp	ip, r3
 800786c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007870:	d8f3      	bhi.n	800785a <__lshift+0x6e>
 8007872:	ebac 0304 	sub.w	r3, ip, r4
 8007876:	3b15      	subs	r3, #21
 8007878:	f023 0303 	bic.w	r3, r3, #3
 800787c:	3304      	adds	r3, #4
 800787e:	f104 0015 	add.w	r0, r4, #21
 8007882:	4584      	cmp	ip, r0
 8007884:	bf38      	it	cc
 8007886:	2304      	movcc	r3, #4
 8007888:	50ca      	str	r2, [r1, r3]
 800788a:	b10a      	cbz	r2, 8007890 <__lshift+0xa4>
 800788c:	f108 0602 	add.w	r6, r8, #2
 8007890:	3e01      	subs	r6, #1
 8007892:	4638      	mov	r0, r7
 8007894:	612e      	str	r6, [r5, #16]
 8007896:	4621      	mov	r1, r4
 8007898:	f7ff fdd6 	bl	8007448 <_Bfree>
 800789c:	4628      	mov	r0, r5
 800789e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80078a6:	3301      	adds	r3, #1
 80078a8:	e7c5      	b.n	8007836 <__lshift+0x4a>
 80078aa:	3904      	subs	r1, #4
 80078ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80078b4:	459c      	cmp	ip, r3
 80078b6:	d8f9      	bhi.n	80078ac <__lshift+0xc0>
 80078b8:	e7ea      	b.n	8007890 <__lshift+0xa4>
 80078ba:	bf00      	nop
 80078bc:	08008683 	.word	0x08008683
 80078c0:	080086f4 	.word	0x080086f4

080078c4 <__mcmp>:
 80078c4:	b530      	push	{r4, r5, lr}
 80078c6:	6902      	ldr	r2, [r0, #16]
 80078c8:	690c      	ldr	r4, [r1, #16]
 80078ca:	1b12      	subs	r2, r2, r4
 80078cc:	d10e      	bne.n	80078ec <__mcmp+0x28>
 80078ce:	f100 0314 	add.w	r3, r0, #20
 80078d2:	3114      	adds	r1, #20
 80078d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80078d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80078dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80078e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80078e4:	42a5      	cmp	r5, r4
 80078e6:	d003      	beq.n	80078f0 <__mcmp+0x2c>
 80078e8:	d305      	bcc.n	80078f6 <__mcmp+0x32>
 80078ea:	2201      	movs	r2, #1
 80078ec:	4610      	mov	r0, r2
 80078ee:	bd30      	pop	{r4, r5, pc}
 80078f0:	4283      	cmp	r3, r0
 80078f2:	d3f3      	bcc.n	80078dc <__mcmp+0x18>
 80078f4:	e7fa      	b.n	80078ec <__mcmp+0x28>
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295
 80078fa:	e7f7      	b.n	80078ec <__mcmp+0x28>

080078fc <__mdiff>:
 80078fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	4606      	mov	r6, r0
 8007904:	4611      	mov	r1, r2
 8007906:	4620      	mov	r0, r4
 8007908:	4617      	mov	r7, r2
 800790a:	f7ff ffdb 	bl	80078c4 <__mcmp>
 800790e:	1e05      	subs	r5, r0, #0
 8007910:	d110      	bne.n	8007934 <__mdiff+0x38>
 8007912:	4629      	mov	r1, r5
 8007914:	4630      	mov	r0, r6
 8007916:	f7ff fd57 	bl	80073c8 <_Balloc>
 800791a:	b930      	cbnz	r0, 800792a <__mdiff+0x2e>
 800791c:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <__mdiff+0x108>)
 800791e:	4602      	mov	r2, r0
 8007920:	f240 2132 	movw	r1, #562	; 0x232
 8007924:	4838      	ldr	r0, [pc, #224]	; (8007a08 <__mdiff+0x10c>)
 8007926:	f000 fc07 	bl	8008138 <__assert_func>
 800792a:	2301      	movs	r3, #1
 800792c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007934:	bfa4      	itt	ge
 8007936:	463b      	movge	r3, r7
 8007938:	4627      	movge	r7, r4
 800793a:	4630      	mov	r0, r6
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	bfa6      	itte	ge
 8007940:	461c      	movge	r4, r3
 8007942:	2500      	movge	r5, #0
 8007944:	2501      	movlt	r5, #1
 8007946:	f7ff fd3f 	bl	80073c8 <_Balloc>
 800794a:	b920      	cbnz	r0, 8007956 <__mdiff+0x5a>
 800794c:	4b2d      	ldr	r3, [pc, #180]	; (8007a04 <__mdiff+0x108>)
 800794e:	4602      	mov	r2, r0
 8007950:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007954:	e7e6      	b.n	8007924 <__mdiff+0x28>
 8007956:	693e      	ldr	r6, [r7, #16]
 8007958:	60c5      	str	r5, [r0, #12]
 800795a:	6925      	ldr	r5, [r4, #16]
 800795c:	f107 0114 	add.w	r1, r7, #20
 8007960:	f104 0914 	add.w	r9, r4, #20
 8007964:	f100 0e14 	add.w	lr, r0, #20
 8007968:	f107 0210 	add.w	r2, r7, #16
 800796c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007970:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007974:	46f2      	mov	sl, lr
 8007976:	2700      	movs	r7, #0
 8007978:	f859 3b04 	ldr.w	r3, [r9], #4
 800797c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007980:	fa1f f883 	uxth.w	r8, r3
 8007984:	fa17 f78b 	uxtah	r7, r7, fp
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	eba7 0808 	sub.w	r8, r7, r8
 800798e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007992:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007996:	fa1f f888 	uxth.w	r8, r8
 800799a:	141f      	asrs	r7, r3, #16
 800799c:	454d      	cmp	r5, r9
 800799e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079a2:	f84a 3b04 	str.w	r3, [sl], #4
 80079a6:	d8e7      	bhi.n	8007978 <__mdiff+0x7c>
 80079a8:	1b2b      	subs	r3, r5, r4
 80079aa:	3b15      	subs	r3, #21
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	3304      	adds	r3, #4
 80079b2:	3415      	adds	r4, #21
 80079b4:	42a5      	cmp	r5, r4
 80079b6:	bf38      	it	cc
 80079b8:	2304      	movcc	r3, #4
 80079ba:	4419      	add	r1, r3
 80079bc:	4473      	add	r3, lr
 80079be:	469e      	mov	lr, r3
 80079c0:	460d      	mov	r5, r1
 80079c2:	4565      	cmp	r5, ip
 80079c4:	d30e      	bcc.n	80079e4 <__mdiff+0xe8>
 80079c6:	f10c 0203 	add.w	r2, ip, #3
 80079ca:	1a52      	subs	r2, r2, r1
 80079cc:	f022 0203 	bic.w	r2, r2, #3
 80079d0:	3903      	subs	r1, #3
 80079d2:	458c      	cmp	ip, r1
 80079d4:	bf38      	it	cc
 80079d6:	2200      	movcc	r2, #0
 80079d8:	441a      	add	r2, r3
 80079da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80079de:	b17b      	cbz	r3, 8007a00 <__mdiff+0x104>
 80079e0:	6106      	str	r6, [r0, #16]
 80079e2:	e7a5      	b.n	8007930 <__mdiff+0x34>
 80079e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80079e8:	fa17 f488 	uxtah	r4, r7, r8
 80079ec:	1422      	asrs	r2, r4, #16
 80079ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80079f2:	b2a4      	uxth	r4, r4
 80079f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80079f8:	f84e 4b04 	str.w	r4, [lr], #4
 80079fc:	1417      	asrs	r7, r2, #16
 80079fe:	e7e0      	b.n	80079c2 <__mdiff+0xc6>
 8007a00:	3e01      	subs	r6, #1
 8007a02:	e7ea      	b.n	80079da <__mdiff+0xde>
 8007a04:	08008683 	.word	0x08008683
 8007a08:	080086f4 	.word	0x080086f4

08007a0c <__d2b>:
 8007a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a10:	4689      	mov	r9, r1
 8007a12:	2101      	movs	r1, #1
 8007a14:	ec57 6b10 	vmov	r6, r7, d0
 8007a18:	4690      	mov	r8, r2
 8007a1a:	f7ff fcd5 	bl	80073c8 <_Balloc>
 8007a1e:	4604      	mov	r4, r0
 8007a20:	b930      	cbnz	r0, 8007a30 <__d2b+0x24>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4b25      	ldr	r3, [pc, #148]	; (8007abc <__d2b+0xb0>)
 8007a26:	4826      	ldr	r0, [pc, #152]	; (8007ac0 <__d2b+0xb4>)
 8007a28:	f240 310a 	movw	r1, #778	; 0x30a
 8007a2c:	f000 fb84 	bl	8008138 <__assert_func>
 8007a30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a38:	bb35      	cbnz	r5, 8007a88 <__d2b+0x7c>
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	d028      	beq.n	8007a92 <__d2b+0x86>
 8007a40:	4668      	mov	r0, sp
 8007a42:	9600      	str	r6, [sp, #0]
 8007a44:	f7ff fd8c 	bl	8007560 <__lo0bits>
 8007a48:	9900      	ldr	r1, [sp, #0]
 8007a4a:	b300      	cbz	r0, 8007a8e <__d2b+0x82>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	f1c0 0320 	rsb	r3, r0, #32
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	430b      	orrs	r3, r1
 8007a58:	40c2      	lsrs	r2, r0
 8007a5a:	6163      	str	r3, [r4, #20]
 8007a5c:	9201      	str	r2, [sp, #4]
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	61a3      	str	r3, [r4, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bf14      	ite	ne
 8007a66:	2202      	movne	r2, #2
 8007a68:	2201      	moveq	r2, #1
 8007a6a:	6122      	str	r2, [r4, #16]
 8007a6c:	b1d5      	cbz	r5, 8007aa4 <__d2b+0x98>
 8007a6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a72:	4405      	add	r5, r0
 8007a74:	f8c9 5000 	str.w	r5, [r9]
 8007a78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a7c:	f8c8 0000 	str.w	r0, [r8]
 8007a80:	4620      	mov	r0, r4
 8007a82:	b003      	add	sp, #12
 8007a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a8c:	e7d5      	b.n	8007a3a <__d2b+0x2e>
 8007a8e:	6161      	str	r1, [r4, #20]
 8007a90:	e7e5      	b.n	8007a5e <__d2b+0x52>
 8007a92:	a801      	add	r0, sp, #4
 8007a94:	f7ff fd64 	bl	8007560 <__lo0bits>
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	6122      	str	r2, [r4, #16]
 8007aa0:	3020      	adds	r0, #32
 8007aa2:	e7e3      	b.n	8007a6c <__d2b+0x60>
 8007aa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007aac:	f8c9 0000 	str.w	r0, [r9]
 8007ab0:	6918      	ldr	r0, [r3, #16]
 8007ab2:	f7ff fd35 	bl	8007520 <__hi0bits>
 8007ab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007aba:	e7df      	b.n	8007a7c <__d2b+0x70>
 8007abc:	08008683 	.word	0x08008683
 8007ac0:	080086f4 	.word	0x080086f4

08007ac4 <_calloc_r>:
 8007ac4:	b513      	push	{r0, r1, r4, lr}
 8007ac6:	434a      	muls	r2, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	9201      	str	r2, [sp, #4]
 8007acc:	f000 f85a 	bl	8007b84 <_malloc_r>
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	b118      	cbz	r0, 8007adc <_calloc_r+0x18>
 8007ad4:	9a01      	ldr	r2, [sp, #4]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	f7fe f85e 	bl	8005b98 <memset>
 8007adc:	4620      	mov	r0, r4
 8007ade:	b002      	add	sp, #8
 8007ae0:	bd10      	pop	{r4, pc}
	...

08007ae4 <_free_r>:
 8007ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d048      	beq.n	8007b7c <_free_r+0x98>
 8007aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aee:	9001      	str	r0, [sp, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f1a1 0404 	sub.w	r4, r1, #4
 8007af6:	bfb8      	it	lt
 8007af8:	18e4      	addlt	r4, r4, r3
 8007afa:	f000 fca7 	bl	800844c <__malloc_lock>
 8007afe:	4a20      	ldr	r2, [pc, #128]	; (8007b80 <_free_r+0x9c>)
 8007b00:	9801      	ldr	r0, [sp, #4]
 8007b02:	6813      	ldr	r3, [r2, #0]
 8007b04:	4615      	mov	r5, r2
 8007b06:	b933      	cbnz	r3, 8007b16 <_free_r+0x32>
 8007b08:	6063      	str	r3, [r4, #4]
 8007b0a:	6014      	str	r4, [r2, #0]
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b12:	f000 bca1 	b.w	8008458 <__malloc_unlock>
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	d90b      	bls.n	8007b32 <_free_r+0x4e>
 8007b1a:	6821      	ldr	r1, [r4, #0]
 8007b1c:	1862      	adds	r2, r4, r1
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bf04      	itt	eq
 8007b22:	681a      	ldreq	r2, [r3, #0]
 8007b24:	685b      	ldreq	r3, [r3, #4]
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	bf04      	itt	eq
 8007b2a:	1852      	addeq	r2, r2, r1
 8007b2c:	6022      	streq	r2, [r4, #0]
 8007b2e:	602c      	str	r4, [r5, #0]
 8007b30:	e7ec      	b.n	8007b0c <_free_r+0x28>
 8007b32:	461a      	mov	r2, r3
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b10b      	cbz	r3, 8007b3c <_free_r+0x58>
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d9fa      	bls.n	8007b32 <_free_r+0x4e>
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	1855      	adds	r5, r2, r1
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d10b      	bne.n	8007b5c <_free_r+0x78>
 8007b44:	6824      	ldr	r4, [r4, #0]
 8007b46:	4421      	add	r1, r4
 8007b48:	1854      	adds	r4, r2, r1
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	d1dd      	bne.n	8007b0c <_free_r+0x28>
 8007b50:	681c      	ldr	r4, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	6053      	str	r3, [r2, #4]
 8007b56:	4421      	add	r1, r4
 8007b58:	6011      	str	r1, [r2, #0]
 8007b5a:	e7d7      	b.n	8007b0c <_free_r+0x28>
 8007b5c:	d902      	bls.n	8007b64 <_free_r+0x80>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	6003      	str	r3, [r0, #0]
 8007b62:	e7d3      	b.n	8007b0c <_free_r+0x28>
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	1961      	adds	r1, r4, r5
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf04      	itt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	6063      	str	r3, [r4, #4]
 8007b72:	bf04      	itt	eq
 8007b74:	1949      	addeq	r1, r1, r5
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	6054      	str	r4, [r2, #4]
 8007b7a:	e7c7      	b.n	8007b0c <_free_r+0x28>
 8007b7c:	b003      	add	sp, #12
 8007b7e:	bd30      	pop	{r4, r5, pc}
 8007b80:	20000208 	.word	0x20000208

08007b84 <_malloc_r>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	1ccd      	adds	r5, r1, #3
 8007b88:	f025 0503 	bic.w	r5, r5, #3
 8007b8c:	3508      	adds	r5, #8
 8007b8e:	2d0c      	cmp	r5, #12
 8007b90:	bf38      	it	cc
 8007b92:	250c      	movcc	r5, #12
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	4606      	mov	r6, r0
 8007b98:	db01      	blt.n	8007b9e <_malloc_r+0x1a>
 8007b9a:	42a9      	cmp	r1, r5
 8007b9c:	d903      	bls.n	8007ba6 <_malloc_r+0x22>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6033      	str	r3, [r6, #0]
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba6:	f000 fc51 	bl	800844c <__malloc_lock>
 8007baa:	4921      	ldr	r1, [pc, #132]	; (8007c30 <_malloc_r+0xac>)
 8007bac:	680a      	ldr	r2, [r1, #0]
 8007bae:	4614      	mov	r4, r2
 8007bb0:	b99c      	cbnz	r4, 8007bda <_malloc_r+0x56>
 8007bb2:	4f20      	ldr	r7, [pc, #128]	; (8007c34 <_malloc_r+0xb0>)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	b923      	cbnz	r3, 8007bc2 <_malloc_r+0x3e>
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f000 f996 	bl	8007eec <_sbrk_r>
 8007bc0:	6038      	str	r0, [r7, #0]
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f000 f991 	bl	8007eec <_sbrk_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d123      	bne.n	8007c16 <_malloc_r+0x92>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 fc40 	bl	8008458 <__malloc_unlock>
 8007bd8:	e7e3      	b.n	8007ba2 <_malloc_r+0x1e>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	1b5b      	subs	r3, r3, r5
 8007bde:	d417      	bmi.n	8007c10 <_malloc_r+0x8c>
 8007be0:	2b0b      	cmp	r3, #11
 8007be2:	d903      	bls.n	8007bec <_malloc_r+0x68>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	441c      	add	r4, r3
 8007be8:	6025      	str	r5, [r4, #0]
 8007bea:	e004      	b.n	8007bf6 <_malloc_r+0x72>
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	42a2      	cmp	r2, r4
 8007bf0:	bf0c      	ite	eq
 8007bf2:	600b      	streq	r3, [r1, #0]
 8007bf4:	6053      	strne	r3, [r2, #4]
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f000 fc2e 	bl	8008458 <__malloc_unlock>
 8007bfc:	f104 000b 	add.w	r0, r4, #11
 8007c00:	1d23      	adds	r3, r4, #4
 8007c02:	f020 0007 	bic.w	r0, r0, #7
 8007c06:	1ac2      	subs	r2, r0, r3
 8007c08:	d0cc      	beq.n	8007ba4 <_malloc_r+0x20>
 8007c0a:	1a1b      	subs	r3, r3, r0
 8007c0c:	50a3      	str	r3, [r4, r2]
 8007c0e:	e7c9      	b.n	8007ba4 <_malloc_r+0x20>
 8007c10:	4622      	mov	r2, r4
 8007c12:	6864      	ldr	r4, [r4, #4]
 8007c14:	e7cc      	b.n	8007bb0 <_malloc_r+0x2c>
 8007c16:	1cc4      	adds	r4, r0, #3
 8007c18:	f024 0403 	bic.w	r4, r4, #3
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d0e3      	beq.n	8007be8 <_malloc_r+0x64>
 8007c20:	1a21      	subs	r1, r4, r0
 8007c22:	4630      	mov	r0, r6
 8007c24:	f000 f962 	bl	8007eec <_sbrk_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d1dd      	bne.n	8007be8 <_malloc_r+0x64>
 8007c2c:	e7cf      	b.n	8007bce <_malloc_r+0x4a>
 8007c2e:	bf00      	nop
 8007c30:	20000208 	.word	0x20000208
 8007c34:	2000020c 	.word	0x2000020c

08007c38 <__sfputc_r>:
 8007c38:	6893      	ldr	r3, [r2, #8]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	b410      	push	{r4}
 8007c40:	6093      	str	r3, [r2, #8]
 8007c42:	da08      	bge.n	8007c56 <__sfputc_r+0x1e>
 8007c44:	6994      	ldr	r4, [r2, #24]
 8007c46:	42a3      	cmp	r3, r4
 8007c48:	db01      	blt.n	8007c4e <__sfputc_r+0x16>
 8007c4a:	290a      	cmp	r1, #10
 8007c4c:	d103      	bne.n	8007c56 <__sfputc_r+0x1e>
 8007c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c52:	f000 b99f 	b.w	8007f94 <__swbuf_r>
 8007c56:	6813      	ldr	r3, [r2, #0]
 8007c58:	1c58      	adds	r0, r3, #1
 8007c5a:	6010      	str	r0, [r2, #0]
 8007c5c:	7019      	strb	r1, [r3, #0]
 8007c5e:	4608      	mov	r0, r1
 8007c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <__sfputs_r>:
 8007c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c68:	4606      	mov	r6, r0
 8007c6a:	460f      	mov	r7, r1
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	18d5      	adds	r5, r2, r3
 8007c70:	42ac      	cmp	r4, r5
 8007c72:	d101      	bne.n	8007c78 <__sfputs_r+0x12>
 8007c74:	2000      	movs	r0, #0
 8007c76:	e007      	b.n	8007c88 <__sfputs_r+0x22>
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff ffda 	bl	8007c38 <__sfputc_r>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d1f3      	bne.n	8007c70 <__sfputs_r+0xa>
 8007c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c8c <_vfiprintf_r>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	460d      	mov	r5, r1
 8007c92:	b09d      	sub	sp, #116	; 0x74
 8007c94:	4614      	mov	r4, r2
 8007c96:	4698      	mov	r8, r3
 8007c98:	4606      	mov	r6, r0
 8007c9a:	b118      	cbz	r0, 8007ca4 <_vfiprintf_r+0x18>
 8007c9c:	6983      	ldr	r3, [r0, #24]
 8007c9e:	b90b      	cbnz	r3, 8007ca4 <_vfiprintf_r+0x18>
 8007ca0:	f7ff fad6 	bl	8007250 <__sinit>
 8007ca4:	4b89      	ldr	r3, [pc, #548]	; (8007ecc <_vfiprintf_r+0x240>)
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	d11b      	bne.n	8007ce2 <_vfiprintf_r+0x56>
 8007caa:	6875      	ldr	r5, [r6, #4]
 8007cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	d405      	bmi.n	8007cbe <_vfiprintf_r+0x32>
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	059a      	lsls	r2, r3, #22
 8007cb6:	d402      	bmi.n	8007cbe <_vfiprintf_r+0x32>
 8007cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cba:	f7ff fb6c 	bl	8007396 <__retarget_lock_acquire_recursive>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	071b      	lsls	r3, r3, #28
 8007cc2:	d501      	bpl.n	8007cc8 <_vfiprintf_r+0x3c>
 8007cc4:	692b      	ldr	r3, [r5, #16]
 8007cc6:	b9eb      	cbnz	r3, 8007d04 <_vfiprintf_r+0x78>
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f000 f9c6 	bl	800805c <__swsetup_r>
 8007cd0:	b1c0      	cbz	r0, 8007d04 <_vfiprintf_r+0x78>
 8007cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cd4:	07dc      	lsls	r4, r3, #31
 8007cd6:	d50e      	bpl.n	8007cf6 <_vfiprintf_r+0x6a>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	b01d      	add	sp, #116	; 0x74
 8007cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce2:	4b7b      	ldr	r3, [pc, #492]	; (8007ed0 <_vfiprintf_r+0x244>)
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	d101      	bne.n	8007cec <_vfiprintf_r+0x60>
 8007ce8:	68b5      	ldr	r5, [r6, #8]
 8007cea:	e7df      	b.n	8007cac <_vfiprintf_r+0x20>
 8007cec:	4b79      	ldr	r3, [pc, #484]	; (8007ed4 <_vfiprintf_r+0x248>)
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	bf08      	it	eq
 8007cf2:	68f5      	ldreq	r5, [r6, #12]
 8007cf4:	e7da      	b.n	8007cac <_vfiprintf_r+0x20>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	0598      	lsls	r0, r3, #22
 8007cfa:	d4ed      	bmi.n	8007cd8 <_vfiprintf_r+0x4c>
 8007cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cfe:	f7ff fb4b 	bl	8007398 <__retarget_lock_release_recursive>
 8007d02:	e7e9      	b.n	8007cd8 <_vfiprintf_r+0x4c>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9309      	str	r3, [sp, #36]	; 0x24
 8007d08:	2320      	movs	r3, #32
 8007d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d12:	2330      	movs	r3, #48	; 0x30
 8007d14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ed8 <_vfiprintf_r+0x24c>
 8007d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d1c:	f04f 0901 	mov.w	r9, #1
 8007d20:	4623      	mov	r3, r4
 8007d22:	469a      	mov	sl, r3
 8007d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d28:	b10a      	cbz	r2, 8007d2e <_vfiprintf_r+0xa2>
 8007d2a:	2a25      	cmp	r2, #37	; 0x25
 8007d2c:	d1f9      	bne.n	8007d22 <_vfiprintf_r+0x96>
 8007d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d32:	d00b      	beq.n	8007d4c <_vfiprintf_r+0xc0>
 8007d34:	465b      	mov	r3, fp
 8007d36:	4622      	mov	r2, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ff93 	bl	8007c66 <__sfputs_r>
 8007d40:	3001      	adds	r0, #1
 8007d42:	f000 80aa 	beq.w	8007e9a <_vfiprintf_r+0x20e>
 8007d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d48:	445a      	add	r2, fp
 8007d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80a2 	beq.w	8007e9a <_vfiprintf_r+0x20e>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d60:	f10a 0a01 	add.w	sl, sl, #1
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d6e:	4654      	mov	r4, sl
 8007d70:	2205      	movs	r2, #5
 8007d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d76:	4858      	ldr	r0, [pc, #352]	; (8007ed8 <_vfiprintf_r+0x24c>)
 8007d78:	f7f8 fa32 	bl	80001e0 <memchr>
 8007d7c:	9a04      	ldr	r2, [sp, #16]
 8007d7e:	b9d8      	cbnz	r0, 8007db8 <_vfiprintf_r+0x12c>
 8007d80:	06d1      	lsls	r1, r2, #27
 8007d82:	bf44      	itt	mi
 8007d84:	2320      	movmi	r3, #32
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8a:	0713      	lsls	r3, r2, #28
 8007d8c:	bf44      	itt	mi
 8007d8e:	232b      	movmi	r3, #43	; 0x2b
 8007d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d94:	f89a 3000 	ldrb.w	r3, [sl]
 8007d98:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9a:	d015      	beq.n	8007dc8 <_vfiprintf_r+0x13c>
 8007d9c:	9a07      	ldr	r2, [sp, #28]
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2000      	movs	r0, #0
 8007da2:	f04f 0c0a 	mov.w	ip, #10
 8007da6:	4621      	mov	r1, r4
 8007da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dac:	3b30      	subs	r3, #48	; 0x30
 8007dae:	2b09      	cmp	r3, #9
 8007db0:	d94e      	bls.n	8007e50 <_vfiprintf_r+0x1c4>
 8007db2:	b1b0      	cbz	r0, 8007de2 <_vfiprintf_r+0x156>
 8007db4:	9207      	str	r2, [sp, #28]
 8007db6:	e014      	b.n	8007de2 <_vfiprintf_r+0x156>
 8007db8:	eba0 0308 	sub.w	r3, r0, r8
 8007dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	46a2      	mov	sl, r4
 8007dc6:	e7d2      	b.n	8007d6e <_vfiprintf_r+0xe2>
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	1d19      	adds	r1, r3, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	9103      	str	r1, [sp, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bfbb      	ittet	lt
 8007dd4:	425b      	neglt	r3, r3
 8007dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dda:	9307      	strge	r3, [sp, #28]
 8007ddc:	9307      	strlt	r3, [sp, #28]
 8007dde:	bfb8      	it	lt
 8007de0:	9204      	strlt	r2, [sp, #16]
 8007de2:	7823      	ldrb	r3, [r4, #0]
 8007de4:	2b2e      	cmp	r3, #46	; 0x2e
 8007de6:	d10c      	bne.n	8007e02 <_vfiprintf_r+0x176>
 8007de8:	7863      	ldrb	r3, [r4, #1]
 8007dea:	2b2a      	cmp	r3, #42	; 0x2a
 8007dec:	d135      	bne.n	8007e5a <_vfiprintf_r+0x1ce>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	1d1a      	adds	r2, r3, #4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	9203      	str	r2, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dfe:	3402      	adds	r4, #2
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ee8 <_vfiprintf_r+0x25c>
 8007e06:	7821      	ldrb	r1, [r4, #0]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	4650      	mov	r0, sl
 8007e0c:	f7f8 f9e8 	bl	80001e0 <memchr>
 8007e10:	b140      	cbz	r0, 8007e24 <_vfiprintf_r+0x198>
 8007e12:	2340      	movs	r3, #64	; 0x40
 8007e14:	eba0 000a 	sub.w	r0, r0, sl
 8007e18:	fa03 f000 	lsl.w	r0, r3, r0
 8007e1c:	9b04      	ldr	r3, [sp, #16]
 8007e1e:	4303      	orrs	r3, r0
 8007e20:	3401      	adds	r4, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e28:	482c      	ldr	r0, [pc, #176]	; (8007edc <_vfiprintf_r+0x250>)
 8007e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e2e:	2206      	movs	r2, #6
 8007e30:	f7f8 f9d6 	bl	80001e0 <memchr>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d03f      	beq.n	8007eb8 <_vfiprintf_r+0x22c>
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <_vfiprintf_r+0x254>)
 8007e3a:	bb1b      	cbnz	r3, 8007e84 <_vfiprintf_r+0x1f8>
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	3307      	adds	r3, #7
 8007e40:	f023 0307 	bic.w	r3, r3, #7
 8007e44:	3308      	adds	r3, #8
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	443b      	add	r3, r7
 8007e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4e:	e767      	b.n	8007d20 <_vfiprintf_r+0x94>
 8007e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e54:	460c      	mov	r4, r1
 8007e56:	2001      	movs	r0, #1
 8007e58:	e7a5      	b.n	8007da6 <_vfiprintf_r+0x11a>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	3401      	adds	r4, #1
 8007e5e:	9305      	str	r3, [sp, #20]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f04f 0c0a 	mov.w	ip, #10
 8007e66:	4620      	mov	r0, r4
 8007e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e6c:	3a30      	subs	r2, #48	; 0x30
 8007e6e:	2a09      	cmp	r2, #9
 8007e70:	d903      	bls.n	8007e7a <_vfiprintf_r+0x1ee>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c5      	beq.n	8007e02 <_vfiprintf_r+0x176>
 8007e76:	9105      	str	r1, [sp, #20]
 8007e78:	e7c3      	b.n	8007e02 <_vfiprintf_r+0x176>
 8007e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e7e:	4604      	mov	r4, r0
 8007e80:	2301      	movs	r3, #1
 8007e82:	e7f0      	b.n	8007e66 <_vfiprintf_r+0x1da>
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	462a      	mov	r2, r5
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <_vfiprintf_r+0x258>)
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7fd ff2a 	bl	8005ce8 <_printf_float>
 8007e94:	4607      	mov	r7, r0
 8007e96:	1c78      	adds	r0, r7, #1
 8007e98:	d1d6      	bne.n	8007e48 <_vfiprintf_r+0x1bc>
 8007e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e9c:	07d9      	lsls	r1, r3, #31
 8007e9e:	d405      	bmi.n	8007eac <_vfiprintf_r+0x220>
 8007ea0:	89ab      	ldrh	r3, [r5, #12]
 8007ea2:	059a      	lsls	r2, r3, #22
 8007ea4:	d402      	bmi.n	8007eac <_vfiprintf_r+0x220>
 8007ea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ea8:	f7ff fa76 	bl	8007398 <__retarget_lock_release_recursive>
 8007eac:	89ab      	ldrh	r3, [r5, #12]
 8007eae:	065b      	lsls	r3, r3, #25
 8007eb0:	f53f af12 	bmi.w	8007cd8 <_vfiprintf_r+0x4c>
 8007eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eb6:	e711      	b.n	8007cdc <_vfiprintf_r+0x50>
 8007eb8:	ab03      	add	r3, sp, #12
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <_vfiprintf_r+0x258>)
 8007ec0:	a904      	add	r1, sp, #16
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7fe f9b4 	bl	8006230 <_printf_i>
 8007ec8:	e7e4      	b.n	8007e94 <_vfiprintf_r+0x208>
 8007eca:	bf00      	nop
 8007ecc:	080086b4 	.word	0x080086b4
 8007ed0:	080086d4 	.word	0x080086d4
 8007ed4:	08008694 	.word	0x08008694
 8007ed8:	08008854 	.word	0x08008854
 8007edc:	0800885e 	.word	0x0800885e
 8007ee0:	08005ce9 	.word	0x08005ce9
 8007ee4:	08007c67 	.word	0x08007c67
 8007ee8:	0800885a 	.word	0x0800885a

08007eec <_sbrk_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4d06      	ldr	r5, [pc, #24]	; (8007f08 <_sbrk_r+0x1c>)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	f7f9 fdee 	bl	8001ad8 <_sbrk>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_sbrk_r+0x1a>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_sbrk_r+0x1a>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	20000408 	.word	0x20000408

08007f0c <__sread>:
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	460c      	mov	r4, r1
 8007f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f14:	f000 faa6 	bl	8008464 <_read_r>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	bfab      	itete	ge
 8007f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f20:	181b      	addge	r3, r3, r0
 8007f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f26:	bfac      	ite	ge
 8007f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f2a:	81a3      	strhlt	r3, [r4, #12]
 8007f2c:	bd10      	pop	{r4, pc}

08007f2e <__swrite>:
 8007f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	461f      	mov	r7, r3
 8007f34:	898b      	ldrh	r3, [r1, #12]
 8007f36:	05db      	lsls	r3, r3, #23
 8007f38:	4605      	mov	r5, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	d505      	bpl.n	8007f4c <__swrite+0x1e>
 8007f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f44:	2302      	movs	r3, #2
 8007f46:	2200      	movs	r2, #0
 8007f48:	f000 f9f8 	bl	800833c <_lseek_r>
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f56:	81a3      	strh	r3, [r4, #12]
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f62:	f000 b869 	b.w	8008038 <_write_r>

08007f66 <__sseek>:
 8007f66:	b510      	push	{r4, lr}
 8007f68:	460c      	mov	r4, r1
 8007f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6e:	f000 f9e5 	bl	800833c <_lseek_r>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	bf15      	itete	ne
 8007f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f82:	81a3      	strheq	r3, [r4, #12]
 8007f84:	bf18      	it	ne
 8007f86:	81a3      	strhne	r3, [r4, #12]
 8007f88:	bd10      	pop	{r4, pc}

08007f8a <__sclose>:
 8007f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8e:	f000 b8f1 	b.w	8008174 <_close_r>
	...

08007f94 <__swbuf_r>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	460e      	mov	r6, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	b118      	cbz	r0, 8007fa6 <__swbuf_r+0x12>
 8007f9e:	6983      	ldr	r3, [r0, #24]
 8007fa0:	b90b      	cbnz	r3, 8007fa6 <__swbuf_r+0x12>
 8007fa2:	f7ff f955 	bl	8007250 <__sinit>
 8007fa6:	4b21      	ldr	r3, [pc, #132]	; (800802c <__swbuf_r+0x98>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d12b      	bne.n	8008004 <__swbuf_r+0x70>
 8007fac:	686c      	ldr	r4, [r5, #4]
 8007fae:	69a3      	ldr	r3, [r4, #24]
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	071a      	lsls	r2, r3, #28
 8007fb6:	d52f      	bpl.n	8008018 <__swbuf_r+0x84>
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	b36b      	cbz	r3, 8008018 <__swbuf_r+0x84>
 8007fbc:	6923      	ldr	r3, [r4, #16]
 8007fbe:	6820      	ldr	r0, [r4, #0]
 8007fc0:	1ac0      	subs	r0, r0, r3
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	b2f6      	uxtb	r6, r6
 8007fc6:	4283      	cmp	r3, r0
 8007fc8:	4637      	mov	r7, r6
 8007fca:	dc04      	bgt.n	8007fd6 <__swbuf_r+0x42>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f966 	bl	80082a0 <_fflush_r>
 8007fd4:	bb30      	cbnz	r0, 8008024 <__swbuf_r+0x90>
 8007fd6:	68a3      	ldr	r3, [r4, #8]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	60a3      	str	r3, [r4, #8]
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	6022      	str	r2, [r4, #0]
 8007fe2:	701e      	strb	r6, [r3, #0]
 8007fe4:	6963      	ldr	r3, [r4, #20]
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	4283      	cmp	r3, r0
 8007fea:	d004      	beq.n	8007ff6 <__swbuf_r+0x62>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	07db      	lsls	r3, r3, #31
 8007ff0:	d506      	bpl.n	8008000 <__swbuf_r+0x6c>
 8007ff2:	2e0a      	cmp	r6, #10
 8007ff4:	d104      	bne.n	8008000 <__swbuf_r+0x6c>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 f951 	bl	80082a0 <_fflush_r>
 8007ffe:	b988      	cbnz	r0, 8008024 <__swbuf_r+0x90>
 8008000:	4638      	mov	r0, r7
 8008002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <__swbuf_r+0x9c>)
 8008006:	429c      	cmp	r4, r3
 8008008:	d101      	bne.n	800800e <__swbuf_r+0x7a>
 800800a:	68ac      	ldr	r4, [r5, #8]
 800800c:	e7cf      	b.n	8007fae <__swbuf_r+0x1a>
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <__swbuf_r+0xa0>)
 8008010:	429c      	cmp	r4, r3
 8008012:	bf08      	it	eq
 8008014:	68ec      	ldreq	r4, [r5, #12]
 8008016:	e7ca      	b.n	8007fae <__swbuf_r+0x1a>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f81e 	bl	800805c <__swsetup_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	d0cb      	beq.n	8007fbc <__swbuf_r+0x28>
 8008024:	f04f 37ff 	mov.w	r7, #4294967295
 8008028:	e7ea      	b.n	8008000 <__swbuf_r+0x6c>
 800802a:	bf00      	nop
 800802c:	080086b4 	.word	0x080086b4
 8008030:	080086d4 	.word	0x080086d4
 8008034:	08008694 	.word	0x08008694

08008038 <_write_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4d07      	ldr	r5, [pc, #28]	; (8008058 <_write_r+0x20>)
 800803c:	4604      	mov	r4, r0
 800803e:	4608      	mov	r0, r1
 8008040:	4611      	mov	r1, r2
 8008042:	2200      	movs	r2, #0
 8008044:	602a      	str	r2, [r5, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	f7f9 f94a 	bl	80012e0 <_write>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_write_r+0x1e>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_write_r+0x1e>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	20000408 	.word	0x20000408

0800805c <__swsetup_r>:
 800805c:	4b32      	ldr	r3, [pc, #200]	; (8008128 <__swsetup_r+0xcc>)
 800805e:	b570      	push	{r4, r5, r6, lr}
 8008060:	681d      	ldr	r5, [r3, #0]
 8008062:	4606      	mov	r6, r0
 8008064:	460c      	mov	r4, r1
 8008066:	b125      	cbz	r5, 8008072 <__swsetup_r+0x16>
 8008068:	69ab      	ldr	r3, [r5, #24]
 800806a:	b913      	cbnz	r3, 8008072 <__swsetup_r+0x16>
 800806c:	4628      	mov	r0, r5
 800806e:	f7ff f8ef 	bl	8007250 <__sinit>
 8008072:	4b2e      	ldr	r3, [pc, #184]	; (800812c <__swsetup_r+0xd0>)
 8008074:	429c      	cmp	r4, r3
 8008076:	d10f      	bne.n	8008098 <__swsetup_r+0x3c>
 8008078:	686c      	ldr	r4, [r5, #4]
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008080:	0719      	lsls	r1, r3, #28
 8008082:	d42c      	bmi.n	80080de <__swsetup_r+0x82>
 8008084:	06dd      	lsls	r5, r3, #27
 8008086:	d411      	bmi.n	80080ac <__swsetup_r+0x50>
 8008088:	2309      	movs	r3, #9
 800808a:	6033      	str	r3, [r6, #0]
 800808c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	f04f 30ff 	mov.w	r0, #4294967295
 8008096:	e03e      	b.n	8008116 <__swsetup_r+0xba>
 8008098:	4b25      	ldr	r3, [pc, #148]	; (8008130 <__swsetup_r+0xd4>)
 800809a:	429c      	cmp	r4, r3
 800809c:	d101      	bne.n	80080a2 <__swsetup_r+0x46>
 800809e:	68ac      	ldr	r4, [r5, #8]
 80080a0:	e7eb      	b.n	800807a <__swsetup_r+0x1e>
 80080a2:	4b24      	ldr	r3, [pc, #144]	; (8008134 <__swsetup_r+0xd8>)
 80080a4:	429c      	cmp	r4, r3
 80080a6:	bf08      	it	eq
 80080a8:	68ec      	ldreq	r4, [r5, #12]
 80080aa:	e7e6      	b.n	800807a <__swsetup_r+0x1e>
 80080ac:	0758      	lsls	r0, r3, #29
 80080ae:	d512      	bpl.n	80080d6 <__swsetup_r+0x7a>
 80080b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b2:	b141      	cbz	r1, 80080c6 <__swsetup_r+0x6a>
 80080b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b8:	4299      	cmp	r1, r3
 80080ba:	d002      	beq.n	80080c2 <__swsetup_r+0x66>
 80080bc:	4630      	mov	r0, r6
 80080be:	f7ff fd11 	bl	8007ae4 <_free_r>
 80080c2:	2300      	movs	r3, #0
 80080c4:	6363      	str	r3, [r4, #52]	; 0x34
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080cc:	81a3      	strh	r3, [r4, #12]
 80080ce:	2300      	movs	r3, #0
 80080d0:	6063      	str	r3, [r4, #4]
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f043 0308 	orr.w	r3, r3, #8
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	b94b      	cbnz	r3, 80080f6 <__swsetup_r+0x9a>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ec:	d003      	beq.n	80080f6 <__swsetup_r+0x9a>
 80080ee:	4621      	mov	r1, r4
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f959 	bl	80083a8 <__smakebuf_r>
 80080f6:	89a0      	ldrh	r0, [r4, #12]
 80080f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080fc:	f010 0301 	ands.w	r3, r0, #1
 8008100:	d00a      	beq.n	8008118 <__swsetup_r+0xbc>
 8008102:	2300      	movs	r3, #0
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	6963      	ldr	r3, [r4, #20]
 8008108:	425b      	negs	r3, r3
 800810a:	61a3      	str	r3, [r4, #24]
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	b943      	cbnz	r3, 8008122 <__swsetup_r+0xc6>
 8008110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008114:	d1ba      	bne.n	800808c <__swsetup_r+0x30>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	0781      	lsls	r1, r0, #30
 800811a:	bf58      	it	pl
 800811c:	6963      	ldrpl	r3, [r4, #20]
 800811e:	60a3      	str	r3, [r4, #8]
 8008120:	e7f4      	b.n	800810c <__swsetup_r+0xb0>
 8008122:	2000      	movs	r0, #0
 8008124:	e7f7      	b.n	8008116 <__swsetup_r+0xba>
 8008126:	bf00      	nop
 8008128:	2000000c 	.word	0x2000000c
 800812c:	080086b4 	.word	0x080086b4
 8008130:	080086d4 	.word	0x080086d4
 8008134:	08008694 	.word	0x08008694

08008138 <__assert_func>:
 8008138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800813a:	4614      	mov	r4, r2
 800813c:	461a      	mov	r2, r3
 800813e:	4b09      	ldr	r3, [pc, #36]	; (8008164 <__assert_func+0x2c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4605      	mov	r5, r0
 8008144:	68d8      	ldr	r0, [r3, #12]
 8008146:	b14c      	cbz	r4, 800815c <__assert_func+0x24>
 8008148:	4b07      	ldr	r3, [pc, #28]	; (8008168 <__assert_func+0x30>)
 800814a:	9100      	str	r1, [sp, #0]
 800814c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008150:	4906      	ldr	r1, [pc, #24]	; (800816c <__assert_func+0x34>)
 8008152:	462b      	mov	r3, r5
 8008154:	f000 f8e0 	bl	8008318 <fiprintf>
 8008158:	f000 f9a3 	bl	80084a2 <abort>
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <__assert_func+0x38>)
 800815e:	461c      	mov	r4, r3
 8008160:	e7f3      	b.n	800814a <__assert_func+0x12>
 8008162:	bf00      	nop
 8008164:	2000000c 	.word	0x2000000c
 8008168:	08008865 	.word	0x08008865
 800816c:	08008872 	.word	0x08008872
 8008170:	080088a0 	.word	0x080088a0

08008174 <_close_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d06      	ldr	r5, [pc, #24]	; (8008190 <_close_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f9 fc75 	bl	8001a6e <_close>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_close_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_close_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000408 	.word	0x20000408

08008194 <__sflush_r>:
 8008194:	898a      	ldrh	r2, [r1, #12]
 8008196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819a:	4605      	mov	r5, r0
 800819c:	0710      	lsls	r0, r2, #28
 800819e:	460c      	mov	r4, r1
 80081a0:	d458      	bmi.n	8008254 <__sflush_r+0xc0>
 80081a2:	684b      	ldr	r3, [r1, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	dc05      	bgt.n	80081b4 <__sflush_r+0x20>
 80081a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dc02      	bgt.n	80081b4 <__sflush_r+0x20>
 80081ae:	2000      	movs	r0, #0
 80081b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081b6:	2e00      	cmp	r6, #0
 80081b8:	d0f9      	beq.n	80081ae <__sflush_r+0x1a>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081c0:	682f      	ldr	r7, [r5, #0]
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	d032      	beq.n	800822c <__sflush_r+0x98>
 80081c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	075a      	lsls	r2, r3, #29
 80081cc:	d505      	bpl.n	80081da <__sflush_r+0x46>
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	1ac0      	subs	r0, r0, r3
 80081d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081d4:	b10b      	cbz	r3, 80081da <__sflush_r+0x46>
 80081d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081d8:	1ac0      	subs	r0, r0, r3
 80081da:	2300      	movs	r3, #0
 80081dc:	4602      	mov	r2, r0
 80081de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081e0:	6a21      	ldr	r1, [r4, #32]
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b0      	blx	r6
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	d106      	bne.n	80081fa <__sflush_r+0x66>
 80081ec:	6829      	ldr	r1, [r5, #0]
 80081ee:	291d      	cmp	r1, #29
 80081f0:	d82c      	bhi.n	800824c <__sflush_r+0xb8>
 80081f2:	4a2a      	ldr	r2, [pc, #168]	; (800829c <__sflush_r+0x108>)
 80081f4:	40ca      	lsrs	r2, r1
 80081f6:	07d6      	lsls	r6, r2, #31
 80081f8:	d528      	bpl.n	800824c <__sflush_r+0xb8>
 80081fa:	2200      	movs	r2, #0
 80081fc:	6062      	str	r2, [r4, #4]
 80081fe:	04d9      	lsls	r1, r3, #19
 8008200:	6922      	ldr	r2, [r4, #16]
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	d504      	bpl.n	8008210 <__sflush_r+0x7c>
 8008206:	1c42      	adds	r2, r0, #1
 8008208:	d101      	bne.n	800820e <__sflush_r+0x7a>
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	b903      	cbnz	r3, 8008210 <__sflush_r+0x7c>
 800820e:	6560      	str	r0, [r4, #84]	; 0x54
 8008210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008212:	602f      	str	r7, [r5, #0]
 8008214:	2900      	cmp	r1, #0
 8008216:	d0ca      	beq.n	80081ae <__sflush_r+0x1a>
 8008218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800821c:	4299      	cmp	r1, r3
 800821e:	d002      	beq.n	8008226 <__sflush_r+0x92>
 8008220:	4628      	mov	r0, r5
 8008222:	f7ff fc5f 	bl	8007ae4 <_free_r>
 8008226:	2000      	movs	r0, #0
 8008228:	6360      	str	r0, [r4, #52]	; 0x34
 800822a:	e7c1      	b.n	80081b0 <__sflush_r+0x1c>
 800822c:	6a21      	ldr	r1, [r4, #32]
 800822e:	2301      	movs	r3, #1
 8008230:	4628      	mov	r0, r5
 8008232:	47b0      	blx	r6
 8008234:	1c41      	adds	r1, r0, #1
 8008236:	d1c7      	bne.n	80081c8 <__sflush_r+0x34>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0c4      	beq.n	80081c8 <__sflush_r+0x34>
 800823e:	2b1d      	cmp	r3, #29
 8008240:	d001      	beq.n	8008246 <__sflush_r+0xb2>
 8008242:	2b16      	cmp	r3, #22
 8008244:	d101      	bne.n	800824a <__sflush_r+0xb6>
 8008246:	602f      	str	r7, [r5, #0]
 8008248:	e7b1      	b.n	80081ae <__sflush_r+0x1a>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	e7ad      	b.n	80081b0 <__sflush_r+0x1c>
 8008254:	690f      	ldr	r7, [r1, #16]
 8008256:	2f00      	cmp	r7, #0
 8008258:	d0a9      	beq.n	80081ae <__sflush_r+0x1a>
 800825a:	0793      	lsls	r3, r2, #30
 800825c:	680e      	ldr	r6, [r1, #0]
 800825e:	bf08      	it	eq
 8008260:	694b      	ldreq	r3, [r1, #20]
 8008262:	600f      	str	r7, [r1, #0]
 8008264:	bf18      	it	ne
 8008266:	2300      	movne	r3, #0
 8008268:	eba6 0807 	sub.w	r8, r6, r7
 800826c:	608b      	str	r3, [r1, #8]
 800826e:	f1b8 0f00 	cmp.w	r8, #0
 8008272:	dd9c      	ble.n	80081ae <__sflush_r+0x1a>
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008278:	4643      	mov	r3, r8
 800827a:	463a      	mov	r2, r7
 800827c:	4628      	mov	r0, r5
 800827e:	47b0      	blx	r6
 8008280:	2800      	cmp	r0, #0
 8008282:	dc06      	bgt.n	8008292 <__sflush_r+0xfe>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	e78e      	b.n	80081b0 <__sflush_r+0x1c>
 8008292:	4407      	add	r7, r0
 8008294:	eba8 0800 	sub.w	r8, r8, r0
 8008298:	e7e9      	b.n	800826e <__sflush_r+0xda>
 800829a:	bf00      	nop
 800829c:	20400001 	.word	0x20400001

080082a0 <_fflush_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	690b      	ldr	r3, [r1, #16]
 80082a4:	4605      	mov	r5, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	b913      	cbnz	r3, 80082b0 <_fflush_r+0x10>
 80082aa:	2500      	movs	r5, #0
 80082ac:	4628      	mov	r0, r5
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	b118      	cbz	r0, 80082ba <_fflush_r+0x1a>
 80082b2:	6983      	ldr	r3, [r0, #24]
 80082b4:	b90b      	cbnz	r3, 80082ba <_fflush_r+0x1a>
 80082b6:	f7fe ffcb 	bl	8007250 <__sinit>
 80082ba:	4b14      	ldr	r3, [pc, #80]	; (800830c <_fflush_r+0x6c>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	d11b      	bne.n	80082f8 <_fflush_r+0x58>
 80082c0:	686c      	ldr	r4, [r5, #4]
 80082c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0ef      	beq.n	80082aa <_fflush_r+0xa>
 80082ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082cc:	07d0      	lsls	r0, r2, #31
 80082ce:	d404      	bmi.n	80082da <_fflush_r+0x3a>
 80082d0:	0599      	lsls	r1, r3, #22
 80082d2:	d402      	bmi.n	80082da <_fflush_r+0x3a>
 80082d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d6:	f7ff f85e 	bl	8007396 <__retarget_lock_acquire_recursive>
 80082da:	4628      	mov	r0, r5
 80082dc:	4621      	mov	r1, r4
 80082de:	f7ff ff59 	bl	8008194 <__sflush_r>
 80082e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e4:	07da      	lsls	r2, r3, #31
 80082e6:	4605      	mov	r5, r0
 80082e8:	d4e0      	bmi.n	80082ac <_fflush_r+0xc>
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	059b      	lsls	r3, r3, #22
 80082ee:	d4dd      	bmi.n	80082ac <_fflush_r+0xc>
 80082f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082f2:	f7ff f851 	bl	8007398 <__retarget_lock_release_recursive>
 80082f6:	e7d9      	b.n	80082ac <_fflush_r+0xc>
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <_fflush_r+0x70>)
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d101      	bne.n	8008302 <_fflush_r+0x62>
 80082fe:	68ac      	ldr	r4, [r5, #8]
 8008300:	e7df      	b.n	80082c2 <_fflush_r+0x22>
 8008302:	4b04      	ldr	r3, [pc, #16]	; (8008314 <_fflush_r+0x74>)
 8008304:	429c      	cmp	r4, r3
 8008306:	bf08      	it	eq
 8008308:	68ec      	ldreq	r4, [r5, #12]
 800830a:	e7da      	b.n	80082c2 <_fflush_r+0x22>
 800830c:	080086b4 	.word	0x080086b4
 8008310:	080086d4 	.word	0x080086d4
 8008314:	08008694 	.word	0x08008694

08008318 <fiprintf>:
 8008318:	b40e      	push	{r1, r2, r3}
 800831a:	b503      	push	{r0, r1, lr}
 800831c:	4601      	mov	r1, r0
 800831e:	ab03      	add	r3, sp, #12
 8008320:	4805      	ldr	r0, [pc, #20]	; (8008338 <fiprintf+0x20>)
 8008322:	f853 2b04 	ldr.w	r2, [r3], #4
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	f7ff fcaf 	bl	8007c8c <_vfiprintf_r>
 800832e:	b002      	add	sp, #8
 8008330:	f85d eb04 	ldr.w	lr, [sp], #4
 8008334:	b003      	add	sp, #12
 8008336:	4770      	bx	lr
 8008338:	2000000c 	.word	0x2000000c

0800833c <_lseek_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	; (800835c <_lseek_r+0x20>)
 8008340:	4604      	mov	r4, r0
 8008342:	4608      	mov	r0, r1
 8008344:	4611      	mov	r1, r2
 8008346:	2200      	movs	r2, #0
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7f9 fbb6 	bl	8001abc <_lseek>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_lseek_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_lseek_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20000408 	.word	0x20000408

08008360 <__swhatbuf_r>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	460e      	mov	r6, r1
 8008364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008368:	2900      	cmp	r1, #0
 800836a:	b096      	sub	sp, #88	; 0x58
 800836c:	4614      	mov	r4, r2
 800836e:	461d      	mov	r5, r3
 8008370:	da07      	bge.n	8008382 <__swhatbuf_r+0x22>
 8008372:	2300      	movs	r3, #0
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	89b3      	ldrh	r3, [r6, #12]
 8008378:	061a      	lsls	r2, r3, #24
 800837a:	d410      	bmi.n	800839e <__swhatbuf_r+0x3e>
 800837c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008380:	e00e      	b.n	80083a0 <__swhatbuf_r+0x40>
 8008382:	466a      	mov	r2, sp
 8008384:	f000 f894 	bl	80084b0 <_fstat_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	dbf2      	blt.n	8008372 <__swhatbuf_r+0x12>
 800838c:	9a01      	ldr	r2, [sp, #4]
 800838e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008392:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008396:	425a      	negs	r2, r3
 8008398:	415a      	adcs	r2, r3
 800839a:	602a      	str	r2, [r5, #0]
 800839c:	e7ee      	b.n	800837c <__swhatbuf_r+0x1c>
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	2000      	movs	r0, #0
 80083a2:	6023      	str	r3, [r4, #0]
 80083a4:	b016      	add	sp, #88	; 0x58
 80083a6:	bd70      	pop	{r4, r5, r6, pc}

080083a8 <__smakebuf_r>:
 80083a8:	898b      	ldrh	r3, [r1, #12]
 80083aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ac:	079d      	lsls	r5, r3, #30
 80083ae:	4606      	mov	r6, r0
 80083b0:	460c      	mov	r4, r1
 80083b2:	d507      	bpl.n	80083c4 <__smakebuf_r+0x1c>
 80083b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	2301      	movs	r3, #1
 80083be:	6163      	str	r3, [r4, #20]
 80083c0:	b002      	add	sp, #8
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	ab01      	add	r3, sp, #4
 80083c6:	466a      	mov	r2, sp
 80083c8:	f7ff ffca 	bl	8008360 <__swhatbuf_r>
 80083cc:	9900      	ldr	r1, [sp, #0]
 80083ce:	4605      	mov	r5, r0
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff fbd7 	bl	8007b84 <_malloc_r>
 80083d6:	b948      	cbnz	r0, 80083ec <__smakebuf_r+0x44>
 80083d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083dc:	059a      	lsls	r2, r3, #22
 80083de:	d4ef      	bmi.n	80083c0 <__smakebuf_r+0x18>
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	e7e3      	b.n	80083b4 <__smakebuf_r+0xc>
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <__smakebuf_r+0x7c>)
 80083ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	6020      	str	r0, [r4, #0]
 80083f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	9b00      	ldr	r3, [sp, #0]
 80083fc:	6163      	str	r3, [r4, #20]
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	6120      	str	r0, [r4, #16]
 8008402:	b15b      	cbz	r3, 800841c <__smakebuf_r+0x74>
 8008404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008408:	4630      	mov	r0, r6
 800840a:	f000 f863 	bl	80084d4 <_isatty_r>
 800840e:	b128      	cbz	r0, 800841c <__smakebuf_r+0x74>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f023 0303 	bic.w	r3, r3, #3
 8008416:	f043 0301 	orr.w	r3, r3, #1
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	89a0      	ldrh	r0, [r4, #12]
 800841e:	4305      	orrs	r5, r0
 8008420:	81a5      	strh	r5, [r4, #12]
 8008422:	e7cd      	b.n	80083c0 <__smakebuf_r+0x18>
 8008424:	080071e9 	.word	0x080071e9

08008428 <__ascii_mbtowc>:
 8008428:	b082      	sub	sp, #8
 800842a:	b901      	cbnz	r1, 800842e <__ascii_mbtowc+0x6>
 800842c:	a901      	add	r1, sp, #4
 800842e:	b142      	cbz	r2, 8008442 <__ascii_mbtowc+0x1a>
 8008430:	b14b      	cbz	r3, 8008446 <__ascii_mbtowc+0x1e>
 8008432:	7813      	ldrb	r3, [r2, #0]
 8008434:	600b      	str	r3, [r1, #0]
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	1e10      	subs	r0, r2, #0
 800843a:	bf18      	it	ne
 800843c:	2001      	movne	r0, #1
 800843e:	b002      	add	sp, #8
 8008440:	4770      	bx	lr
 8008442:	4610      	mov	r0, r2
 8008444:	e7fb      	b.n	800843e <__ascii_mbtowc+0x16>
 8008446:	f06f 0001 	mvn.w	r0, #1
 800844a:	e7f8      	b.n	800843e <__ascii_mbtowc+0x16>

0800844c <__malloc_lock>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__malloc_lock+0x8>)
 800844e:	f7fe bfa2 	b.w	8007396 <__retarget_lock_acquire_recursive>
 8008452:	bf00      	nop
 8008454:	20000400 	.word	0x20000400

08008458 <__malloc_unlock>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__malloc_unlock+0x8>)
 800845a:	f7fe bf9d 	b.w	8007398 <__retarget_lock_release_recursive>
 800845e:	bf00      	nop
 8008460:	20000400 	.word	0x20000400

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_read_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 fade 	bl	8001a34 <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000408 	.word	0x20000408

08008488 <__ascii_wctomb>:
 8008488:	b149      	cbz	r1, 800849e <__ascii_wctomb+0x16>
 800848a:	2aff      	cmp	r2, #255	; 0xff
 800848c:	bf85      	ittet	hi
 800848e:	238a      	movhi	r3, #138	; 0x8a
 8008490:	6003      	strhi	r3, [r0, #0]
 8008492:	700a      	strbls	r2, [r1, #0]
 8008494:	f04f 30ff 	movhi.w	r0, #4294967295
 8008498:	bf98      	it	ls
 800849a:	2001      	movls	r0, #1
 800849c:	4770      	bx	lr
 800849e:	4608      	mov	r0, r1
 80084a0:	4770      	bx	lr

080084a2 <abort>:
 80084a2:	b508      	push	{r3, lr}
 80084a4:	2006      	movs	r0, #6
 80084a6:	f000 f84d 	bl	8008544 <raise>
 80084aa:	2001      	movs	r0, #1
 80084ac:	f7f9 fab8 	bl	8001a20 <_exit>

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	; (80084d0 <_fstat_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f9 fae2 	bl	8001a86 <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20000408 	.word	0x20000408

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	; (80084f0 <_isatty_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f9 fae1 	bl	8001aa6 <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000408 	.word	0x20000408

080084f4 <_raise_r>:
 80084f4:	291f      	cmp	r1, #31
 80084f6:	b538      	push	{r3, r4, r5, lr}
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	d904      	bls.n	8008508 <_raise_r+0x14>
 80084fe:	2316      	movs	r3, #22
 8008500:	6003      	str	r3, [r0, #0]
 8008502:	f04f 30ff 	mov.w	r0, #4294967295
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800850a:	b112      	cbz	r2, 8008512 <_raise_r+0x1e>
 800850c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008510:	b94b      	cbnz	r3, 8008526 <_raise_r+0x32>
 8008512:	4620      	mov	r0, r4
 8008514:	f000 f830 	bl	8008578 <_getpid_r>
 8008518:	462a      	mov	r2, r5
 800851a:	4601      	mov	r1, r0
 800851c:	4620      	mov	r0, r4
 800851e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008522:	f000 b817 	b.w	8008554 <_kill_r>
 8008526:	2b01      	cmp	r3, #1
 8008528:	d00a      	beq.n	8008540 <_raise_r+0x4c>
 800852a:	1c59      	adds	r1, r3, #1
 800852c:	d103      	bne.n	8008536 <_raise_r+0x42>
 800852e:	2316      	movs	r3, #22
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	2001      	movs	r0, #1
 8008534:	e7e7      	b.n	8008506 <_raise_r+0x12>
 8008536:	2400      	movs	r4, #0
 8008538:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800853c:	4628      	mov	r0, r5
 800853e:	4798      	blx	r3
 8008540:	2000      	movs	r0, #0
 8008542:	e7e0      	b.n	8008506 <_raise_r+0x12>

08008544 <raise>:
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <raise+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f7ff bfd3 	b.w	80084f4 <_raise_r>
 800854e:	bf00      	nop
 8008550:	2000000c 	.word	0x2000000c

08008554 <_kill_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d07      	ldr	r5, [pc, #28]	; (8008574 <_kill_r+0x20>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	4611      	mov	r1, r2
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	f7f9 fa4d 	bl	8001a00 <_kill>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d102      	bne.n	8008570 <_kill_r+0x1c>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	b103      	cbz	r3, 8008570 <_kill_r+0x1c>
 800856e:	6023      	str	r3, [r4, #0]
 8008570:	bd38      	pop	{r3, r4, r5, pc}
 8008572:	bf00      	nop
 8008574:	20000408 	.word	0x20000408

08008578 <_getpid_r>:
 8008578:	f7f9 ba3a 	b.w	80019f0 <_getpid>

0800857c <_init>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr

08008588 <_fini>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr
